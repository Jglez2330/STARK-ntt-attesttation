// auto-generated: "lalrpop 0.22.2"
// sha3: ae5131f0afc87a1832d6cdcbe2973d23d17f990042401858947ff13dd6d26f82
use alloc::{
    boxed::Box,
    collections::{VecDeque, BTreeSet, BTreeMap},
    string::ToString,
    sync::Arc,
    vec::Vec,
};
use core::{marker::PhantomData, num::NonZeroU32};
use miden_debug_types::{SourceFile, SourceSpan, Span, Spanned};
use smallvec::smallvec;
use crate::{LibraryPath, LibraryNamespace, ast::*, Felt, FieldElement, StarkField, Word};
use super::{
    BinEncodedValue, IntValue, Token, WordValue, ParseError, ParsingError,
    LiteralErrorKind, HexErrorKind, DocumentationType
};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
#[allow(unused_extern_crates)]
extern crate alloc;

#[rustfmt::skip]
#[allow(explicit_outlives_requirements, non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::match_single_binding)]
mod __parse__Forms {

    use alloc::{
    boxed::Box,
    collections::{VecDeque, BTreeSet, BTreeMap},
    string::ToString,
    sync::Arc,
    vec::Vec,
};
    use core::{marker::PhantomData, num::NonZeroU32};
    use miden_debug_types::{SourceFile, SourceSpan, Span, Spanned};
    use smallvec::smallvec;
    use crate::{LibraryPath, LibraryNamespace, ast::*, Felt, FieldElement, StarkField, Word};
    use super::super::{
    BinEncodedValue, IntValue, Token, WordValue, ParseError, ParsingError,
    LiteralErrorKind, HexErrorKind, DocumentationType
};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    #[allow(unused_extern_crates)]
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(Token<'input>),
        Variant1(&'input str),
        Variant2(BinEncodedValue),
        Variant3(DocumentationType),
        Variant4(IntValue),
        Variant5(u64),
        Variant6(Ident),
        Variant7(Option<Ident>),
        Variant8(ProcedureName),
        Variant9(Option<ProcedureName>),
        Variant10(Span<u8>),
        Variant11(Option<Span<u8>>),
        Variant12(alloc::vec::Vec<Ident>),
        Variant13(Felt),
        Variant14(alloc::vec::Vec<Felt>),
        Variant15(Immediate<IntValue>),
        Variant16(alloc::vec::Vec<Immediate<IntValue>>),
        Variant17(MetaExpr),
        Variant18(alloc::vec::Vec<MetaExpr>),
        Variant19(Span<(Ident, MetaExpr)>),
        Variant20(alloc::vec::Vec<Span<(Ident, MetaExpr)>>),
        Variant21(u32),
        Variant22(Form),
        Variant23(ProcedureAlias),
        Variant24(Attribute),
        Variant25(alloc::vec::Vec<Attribute>),
        Variant26(u8),
        Variant27(Block),
        Variant28(Option<Block>),
        Variant29(Instruction),
        Variant30(Vec<Felt>),
        Variant31(Vec<MetaExpr>),
        Variant32(Vec<Span<(Ident, MetaExpr)>>),
        Variant33(bool),
        Variant34(ConstantExpr),
        Variant35(Vec<Immediate<IntValue>>),
        Variant36(SmallOpsVec),
        Variant37(alloc::vec::Vec<Form>),
        Variant38(Vec<Form>),
        Variant39(Op),
        Variant40(Immediate<Felt>),
        Variant41(Immediate<u8>),
        Variant42(Immediate<u16>),
        Variant43(Immediate<u32>),
        Variant44(Immediate<Span<u8>>),
        Variant45(Immediate<Arc<str>>),
        Variant46(InvocationTarget),
        Variant47(Span<Word>),
        Variant48(Option<Span<WordValue>>),
        Variant49(Option<Immediate<Felt>>),
        Variant50(Option<Immediate<u8>>),
        Variant51(Option<Immediate<u16>>),
        Variant52(Option<Immediate<u32>>),
        Variant53(Option<Immediate<Span<u8>>>),
        Variant54(Option<u16>),
        Variant55(Span<LibraryPath>),
        Variant56(alloc::vec::Vec<SmallOpsVec>),
        Variant57(&'static str),
        Variant58(Vec<Op>),
        Variant59(Vec<Ident>),
        Variant60(Procedure),
        Variant61((Ident, LibraryPath)),
        Variant62(u16),
        Variant63(Visibility),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 148, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 289, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 429, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 449, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 455, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 460, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 460, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 14
        0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, -786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 0, 461, 0, 0, 464,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 449, 0, 0, 0, 0, 492, 450, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 461, 0, 0, 464,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 21

        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 507, 0, 461, 0, 0, 464,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 449, 0, 0, 0, 0, 492, 450, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 510, 0, 461, 0, 0, 464,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512, 0, 461, 0, 0, 464,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 514, 0, 461, 0, 0, 464,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 516, 0, 0, 0, 0, 517,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 0, 0, 0, 0, 517,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 521, 0, 0, 0, 0, 517,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 523, 0, 0, 0, 0, 517,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 525, 0, 0, 0, 0, 517,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 527, 0, 461, 0, 0, 464,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 529, 0, 461, 0, 0, 464,
        // State 34

        // State 35

        // State 36

        // State 37

        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544, 0, 461, 0, 0, 464,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 0, 461, 0, 0, 464,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 449, 0, 0, 0, 0, 492, 450, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 461, 0, 0, 464,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 552, 0, 461, 0, 0, 464,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 449, 0, 0, 0, 0, 492, 450, 0, 0,
        // State 50

        // State 51

        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 502, 0, 564, 0, 504, 0, 0, 505,
        // State 53

        // State 54

        // State 55

        // State 56

        // State 57

        // State 58

        // State 59

        // State 60

        // State 61

        // State 62

        // State 63

        // State 64

        // State 65

        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 0, 0, 0, 0, 438,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 595, 0, 0, 0, 0, 438,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 597, 0, 0, 0, 0, 438,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 599, 0, 0, 0, 0, 438,
        // State 70

        // State 71

        // State 72

        // State 73

        // State 74
        0, 0, 0, 0, 0, 0, 0, -816, 0, 0, 0, 0, 97, -816, 0, 0, 298, 299, -816, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, -816, 311, 310, 312, 313, 314, -816, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, -816, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, -816, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, -816, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, -816, 0, 0, 0, 0, -816, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 611, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 614, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 617, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 623, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 623, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 626, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 111, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 112, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 461, 0, 0, 464,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, -79, 325, -79, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 664, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 452, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 517,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 623, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 156, 157, 159, 0, 0, 0, 0, 158, 160, 161, 162, 0, 0, 0, 0, 0, 0, 163, 164, 165, 168, 166, 167, 169, 171, 170, 172, 173, 174, 175, 176, 177, 178, 0, 179, 180, 181, 182, 183, 185, 184, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 201, 191, 192, 193, 194, 195, 0, 0, 202, 203, 204, 0, 206, 205, 0, 207, 208, 209, 215, 214, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 0, 228, 0, 229, 230, 231, 232, 233, 0, 234, 235, 236, 237, 238, 239, 0, 0, 240, 241, 242, 243, 244, 246, 245, 247, 248, 0, 0, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 255, 257, 254, 256, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 0, 288, 0, 623, 0, 0, 0, 0, 461, 462, 463, 464,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 0, 517,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 699, 0, 0, 0, 0, 517,
        // State 108

        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 703, 0, 0, 0, 0, 438,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 0, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 731, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 299, 0, 0, 0, 0, 0, 300, 301, 302, 0, 0, 0, 0, 0, 0, 0, 303, 304, 305, 308, 306, 307, 0, 311, 310, 312, 313, 314, 0, 315, 316, 317, 309, 318, 319, 320, 321, 322, 324, 323, 0, 325, 734, 326, 327, 330, 331, 332, 333, 334, 335, 0, 328, 329, 7, 0, 0, 336, 337, 338, 339, 0, 343, 340, 344, 345, 346, 347, 0, 352, 348, 349, 350, 351, 353, 354, 0, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 371, 373, 374, 375, 0, 376, 377, 341, 342, 378, 379, 0, 380, 381, 383, 382, 384, 385, 0, 0, 386, 387, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 392, 394, 391, 393, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 122
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 123
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 124
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 125
        0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 656, 0, 461, 657, 658, 464,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 517,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 517,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 502, 0, 754, 0, 504, 0, 0, 505,
        // State 130

        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0, 464,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, 0, 0, 0, -233, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, 0, 0, 0, -234, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, 0, 0, 0, -232, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, 0, 0, 0, -230, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, 0, 0, 0, -236, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, 0, 0, 0, -231, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, 0, 0, 0, -235, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, 0, 0, 0, -237, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153

        // State 154
        0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, -997, -997, 0, 0, -997, 0, -997, 0, 0, -997, -997, -997, -997, 0, 0, -997, -997, -997, 0, 0, 0, 0, -997, -997, -997, 0, 0, 0, 0, 0, 0, 0, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, 0, -997, -997, -997, -997, 0, -997, -997, -997, -997, 0, -997, -997, -997, -997, -997, -997, 0, -997, -997, -997, -997, -997, -997, -997, 0, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, 0, -997, -997, -997, -997, -997, -997, 0, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, -997, 0, 0, 0, 0, -997, 0, 0, 0, 0,
        // State 156

        // State 157

        // State 158

        // State 159

        // State 160

        // State 161

        // State 162

        // State 163

        // State 164

        // State 165

        // State 166

        // State 167

        // State 168

        // State 169

        // State 170

        // State 171

        // State 172

        // State 173

        // State 174

        // State 175

        // State 176

        // State 177

        // State 178

        // State 179

        // State 180

        // State 181

        // State 182

        // State 183

        // State 184

        // State 185
        0, -1027, -1027, 0, 0, -1027, 0, -1027, 0, 0, -1027, -1027, -1027, -1027, 0, 0, -1027, -1027, -1027, 0, 0, 0, 0, -1027, -1027, -1027, 0, 0, 0, 0, 0, 0, 0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, -1027, -1027, 0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, 0, 0, 0, 0, -1027, 0, 0, 0, 0,
        // State 186

        // State 187

        // State 188

        // State 189

        // State 190

        // State 191

        // State 192

        // State 193
        0, -1041, -1041, 0, 0, -1041, 0, -1041, 0, 0, -1041, -1041, -1041, -1041, 0, 0, -1041, -1041, -1041, 0, 0, 0, 0, -1041, -1041, -1041, 0, 0, 0, 0, 0, 0, 0, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, -1041, -1041, 0, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, -1041, 0, 0, 0, 0, -1041, 0, 0, 0, 0,
        // State 194

        // State 195

        // State 196

        // State 197

        // State 198

        // State 199

        // State 200

        // State 201

        // State 202
        0, -1044, -1044, 0, 0, -1044, 0, -1044, 0, 0, -1044, -1044, -1044, -1044, 0, 0, -1044, -1044, -1044, 0, 0, 0, 0, -1044, -1044, -1044, 0, 0, 0, 0, 0, 0, 0, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, -1044, -1044, 0, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, -1044, 0, 0, 0, 0, -1044, 0, 0, 0, 0,
        // State 203

        // State 204

        // State 205

        // State 206

        // State 207

        // State 208

        // State 209

        // State 210

        // State 211

        // State 212

        // State 213

        // State 214

        // State 215

        // State 216

        // State 217

        // State 218

        // State 219

        // State 220

        // State 221

        // State 222

        // State 223

        // State 224

        // State 225

        // State 226

        // State 227

        // State 228

        // State 229
        0, -1071, -1071, 0, 0, -1071, 0, -1071, 0, 0, -1071, -1071, -1071, -1071, 0, 0, -1071, -1071, -1071, 0, 0, 0, 0, -1071, -1071, -1071, 0, 0, 0, 0, 0, 0, 0, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, -1071, -1071, 0, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, 0, 0, 0, 0, -1071, 0, 0, 0, 0,
        // State 230

        // State 231

        // State 232

        // State 233

        // State 234

        // State 235

        // State 236

        // State 237

        // State 238
        0, -1080, -1080, 0, 0, -1080, 0, -1080, 0, 0, -1080, -1080, -1080, -1080, 0, 0, -1080, -1080, -1080, 0, 0, 0, 0, -1080, -1080, -1080, 0, 0, 0, 0, 0, 0, 0, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, -1080, -1080, 0, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, -1080, 0, 0, 0, 0, -1080, 0, 0, 0, 0,
        // State 239

        // State 240

        // State 241

        // State 242

        // State 243

        // State 244

        // State 245
        0, -1086, -1086, 0, 0, -1086, 0, -1086, 0, 0, -1086, -1086, -1086, -1086, 0, 0, -1086, -1086, -1086, 0, 0, 0, 0, -1086, -1086, -1086, 0, 0, 0, 0, 0, 0, 0, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, -1086, -1086, 0, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, -1086, 0, 0, 0, 0, -1086, 0, 0, 0, 0,
        // State 246

        // State 247

        // State 248

        // State 249
        0, -1091, -1091, 0, 0, -1091, 0, -1091, 0, 0, -1091, -1091, -1091, -1091, 0, 0, -1091, -1091, -1091, 0, 0, 0, 0, -1091, -1091, -1091, 0, 0, 0, 0, 0, 0, 0, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, -1091, -1091, 0, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, 0, 0, 0, 0, -1091, 0, 0, 0, 0,
        // State 250

        // State 251

        // State 252

        // State 253

        // State 254

        // State 255

        // State 256

        // State 257

        // State 258

        // State 259
        0, -1097, -1097, 0, 0, -1097, 0, -1097, 0, 0, -1097, -1097, -1097, -1097, 0, 0, -1097, -1097, -1097, 0, 0, 0, 0, -1097, -1097, -1097, 0, 0, 0, 0, 0, 0, 0, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, -1097, -1097, 0, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, 0, 0, 0, 0, -1097, 0, 0, 0, 0,
        // State 260

        // State 261

        // State 262

        // State 263

        // State 264

        // State 265

        // State 266

        // State 267

        // State 268
        0, -1106, -1106, 0, 0, -1106, 0, -1106, 0, 0, -1106, -1106, -1106, -1106, 0, 0, -1106, -1106, -1106, 0, 0, 0, 0, -1106, -1106, -1106, 0, 0, 0, 0, 0, 0, 0, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, -1106, -1106, 0, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, -1106, 0, 0, 0, 0, -1106, 0, 0, 0, 0,
        // State 269

        // State 270

        // State 271
        0, -1109, -1109, 0, 0, -1109, 0, -1109, 0, 0, -1109, -1109, -1109, -1109, 0, 0, -1109, -1109, -1109, 0, 0, 0, 0, -1109, -1109, -1109, 0, 0, 0, 0, 0, 0, 0, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, -1109, -1109, 0, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, -1109, 0, 0, 0, 0, -1109, 0, 0, 0, 0,
        // State 272

        // State 273

        // State 274

        // State 275

        // State 276

        // State 277

        // State 278

        // State 279

        // State 280

        // State 281

        // State 282

        // State 283

        // State 284

        // State 285

        // State 286

        // State 287
        0, -1129, -1129, 0, 0, -1129, 0, -1129, 0, 0, -1129, -1129, -1129, -1129, 0, 0, -1129, -1129, -1129, 0, 0, 0, 0, -1129, -1129, -1129, 0, 0, 0, 0, 0, 0, 0, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, -1129, -1129, 0, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, 0, 0, 0, 0, -1129, 0, 0, 0, 0,
        // State 288
        0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 289
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
        // State 290

        // State 291

        // State 292

        // State 293

        // State 294

        // State 295

        // State 296

        // State 297
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, -702, -702, 0, 0, 0, 0, 0, -702, -702, -702, 0, 0, 0, 0, 0, 0, 0, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, 0, 0, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, 0, -702, -702, -702, -702, -702, -702, 0, 0, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, -702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 298
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 299

        // State 300

        // State 301
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 302

        // State 303

        // State 304
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 431, 0, 0, 0, -867, -867, 0, 0, 0, 0, 0, -867, -867, -867, 0, 0, 0, 0, 0, 0, 0, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, 0, 0, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, 0, -867, -867, -867, -867, -867, -867, 0, 0, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, -867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 305
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0, 0, 0, -875, -875, 0, 0, 0, 0, 0, -875, -875, -875, 0, 0, 0, 0, 0, 0, 0, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, 0, 0, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, 0, -875, -875, -875, -875, -875, -875, 0, 0, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, -875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 306
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 433, 0, 0, 0, -879, -879, 0, 0, 0, 0, 0, -879, -879, -879, 0, 0, 0, 0, 0, 0, 0, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, 0, 0, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, 0, -879, -879, -879, -879, -879, -879, 0, 0, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, -879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 307
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 434, 0, 0, 0, -871, -871, 0, 0, 0, 0, 0, -871, -871, -871, 0, 0, 0, 0, 0, 0, 0, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, 0, 0, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, 0, -871, -871, -871, -871, -871, -871, 0, 0, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, -871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 308

        // State 309
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 310

        // State 311
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -943, -943, 0, 0, 0, 0, 0, -943, -943, -943, 0, 0, 0, 0, 0, 0, 0, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, 0, 0, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, 0, -943, -943, -943, -943, -943, -943, 0, 0, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, -943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 312

        // State 313

        // State 314

        // State 315

        // State 316
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 317
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, -711, -711, 0, 0, 0, 0, 0, -711, -711, -711, 0, 0, 0, 0, 0, 0, 0, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, 0, 0, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, 0, -711, -711, -711, -711, -711, -711, 0, 0, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, -711, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 318

        // State 319

        // State 320
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, -914, -914, 0, 0, 0, 0, 0, -914, -914, -914, 0, 0, 0, 0, 0, 0, 0, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, 0, 0, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, 0, -914, -914, -914, -914, -914, -914, 0, 0, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, -914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 321
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, -916, -916, 0, 0, 0, 0, 0, -916, -916, -916, 0, 0, 0, 0, 0, 0, 0, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, 0, 0, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, 0, -916, -916, -916, -916, -916, -916, 0, 0, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, -916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 322

        // State 323

        // State 324
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 325
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, -684, -684, 0, 0, 0, 0, 0, -684, -684, -684, 0, 0, 0, 0, 0, 0, 0, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, 0, 0, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, 0, -684, -684, -684, -684, -684, -684, 0, 0, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, -684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 326

        // State 327
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 328
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, -901, -901, 0, 0, 0, 0, 0, -901, -901, -901, 0, 0, 0, 0, 0, 0, 0, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, 0, 0, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, 0, -901, -901, -901, -901, -901, -901, 0, 0, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, -901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 329

        // State 330

        // State 331

        // State 332

        // State 333

        // State 334

        // State 335

        // State 336
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, -696, -696, 0, 0, 0, 0, 0, -696, -696, -696, 0, 0, 0, 0, 0, 0, 0, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, 0, 0, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, 0, -696, -696, -696, -696, -696, -696, 0, 0, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, -696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 337
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, -699, -699, 0, 0, 0, 0, 0, -699, -699, -699, 0, 0, 0, 0, 0, 0, 0, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, 0, 0, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, 0, -699, -699, -699, -699, -699, -699, 0, 0, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, -699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 338

        // State 339

        // State 340

        // State 341

        // State 342

        // State 343
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 344
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -963, -963, 0, 0, 0, 0, 0, -963, -963, -963, 0, 0, 0, 0, 0, 0, 0, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, 0, 0, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, 0, -963, -963, -963, -963, -963, -963, 0, 0, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, -963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 345

        // State 346

        // State 347
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 348
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 349
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 350
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 351
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 352
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, -690, -690, 0, 0, 0, 0, 0, -690, -690, -690, 0, 0, 0, 0, 0, 0, 0, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, 0, 0, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, 0, -690, -690, -690, -690, -690, -690, 0, 0, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, -690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 353
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, -693, -693, 0, 0, 0, 0, 0, -693, -693, -693, 0, 0, 0, 0, 0, 0, 0, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, 0, 0, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, 0, -693, -693, -693, -693, -693, -693, 0, 0, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, -693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 354
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, -927, -927, 0, 0, 0, 0, 0, -927, -927, -927, 0, 0, 0, 0, 0, 0, 0, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, 0, 0, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, 0, -927, -927, -927, -927, -927, -927, 0, 0, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, -927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 355
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, -930, -930, 0, 0, 0, 0, 0, -930, -930, -930, 0, 0, 0, 0, 0, 0, 0, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, 0, 0, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, 0, -930, -930, -930, -930, -930, -930, 0, 0, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, -930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 356
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, -933, -933, 0, 0, 0, 0, 0, -933, -933, -933, 0, 0, 0, 0, 0, 0, 0, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, 0, 0, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, 0, -933, -933, -933, -933, -933, -933, 0, 0, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, -933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 357
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, -936, -936, 0, 0, 0, 0, 0, -936, -936, -936, 0, 0, 0, 0, 0, 0, 0, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, 0, 0, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, 0, -936, -936, -936, -936, -936, -936, 0, 0, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, -936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 358

        // State 359
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 360
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 361
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 362
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 363

        // State 364

        // State 365

        // State 366
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 440, 0, 0, 0, -895, -895, 0, 0, 0, 0, 0, -895, -895, -895, 0, 0, 0, 0, 0, 0, 0, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, 0, 0, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, 0, -895, -895, -895, -895, -895, -895, 0, 0, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, -895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 367
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, -708, -708, 0, 0, 0, 0, 0, -708, -708, -708, 0, 0, 0, 0, 0, 0, 0, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, 0, 0, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, 0, -708, -708, -708, -708, -708, -708, 0, 0, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, -708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 368

        // State 369
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, -687, -687, 0, 0, 0, 0, 0, -687, -687, -687, 0, 0, 0, 0, 0, 0, 0, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, 0, 0, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, 0, -687, -687, -687, -687, -687, -687, 0, 0, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, -687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 370

        // State 371

        // State 372

        // State 373

        // State 374

        // State 375
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 376
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 377
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 378

        // State 379
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, -705, -705, 0, 0, 0, 0, 0, -705, -705, -705, 0, 0, 0, 0, 0, 0, 0, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, 0, 0, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, 0, -705, -705, -705, -705, -705, -705, 0, 0, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, -705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 380
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, -922, -922, 0, 0, 0, 0, 0, -922, -922, -922, 0, 0, 0, 0, 0, 0, 0, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, 0, 0, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, 0, -922, -922, -922, -922, -922, -922, 0, 0, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, -922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 381

        // State 382
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, -924, -924, 0, 0, 0, 0, 0, -924, -924, -924, 0, 0, 0, 0, 0, 0, 0, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, 0, 0, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, 0, -924, -924, -924, -924, -924, -924, 0, 0, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, -924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 383
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 384
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 385
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, -723, -723, 0, 0, 0, 0, 0, -723, -723, -723, 0, 0, 0, 0, 0, 0, 0, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, 0, 0, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, 0, -723, -723, -723, -723, -723, -723, 0, 0, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, -723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 386
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442, 0, 0, 0, -883, -883, 0, 0, 0, 0, 0, -883, -883, -883, 0, 0, 0, 0, 0, 0, 0, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, 0, 0, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, 0, -883, -883, -883, -883, -883, -883, 0, 0, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, -883, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 387
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0, 0, -887, -887, 0, 0, 0, 0, 0, -887, -887, -887, 0, 0, 0, 0, 0, 0, 0, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, 0, 0, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, 0, -887, -887, -887, -887, -887, -887, 0, 0, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, -887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 388
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 444, 0, 0, 0, -891, -891, 0, 0, 0, 0, 0, -891, -891, -891, 0, 0, 0, 0, 0, 0, 0, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, 0, 0, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, 0, -891, -891, -891, -891, -891, -891, 0, 0, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, -891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 389

        // State 390

        // State 391

        // State 392

        // State 393

        // State 394
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, -714, -714, 0, 0, 0, 0, 0, -714, -714, -714, 0, 0, 0, 0, 0, 0, 0, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, 0, 0, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, 0, -714, -714, -714, -714, -714, -714, 0, 0, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, -714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 395
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, -717, -717, 0, 0, 0, 0, 0, -717, -717, -717, 0, 0, 0, 0, 0, 0, 0, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, 0, 0, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, 0, -717, -717, -717, -717, -717, -717, 0, 0, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, -717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 396
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, -771, -771, 0, 0, 0, 0, 0, -771, -771, -771, 0, 0, 0, 0, 0, 0, 0, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, 0, 0, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, 0, -771, -771, -771, -771, -771, -771, 0, 0, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, -771, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 397
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, -774, -774, 0, 0, 0, 0, 0, -774, -774, -774, 0, 0, 0, 0, 0, 0, 0, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, 0, 0, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, 0, -774, -774, -774, -774, -774, -774, 0, 0, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, -774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 398
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, -765, -765, 0, 0, 0, 0, 0, -765, -765, -765, 0, 0, 0, 0, 0, 0, 0, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, 0, 0, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, 0, -765, -765, -765, -765, -765, -765, 0, 0, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, -765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 399
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, -768, -768, 0, 0, 0, 0, 0, -768, -768, -768, 0, 0, 0, 0, 0, 0, 0, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, 0, 0, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, 0, -768, -768, -768, -768, -768, -768, 0, 0, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, -768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 400
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, -780, -780, 0, 0, 0, 0, 0, -780, -780, -780, 0, 0, 0, 0, 0, 0, 0, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, 0, 0, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, 0, -780, -780, -780, -780, -780, -780, 0, 0, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, -780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 401
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, -777, -777, 0, 0, 0, 0, 0, -777, -777, -777, 0, 0, 0, 0, 0, 0, 0, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, 0, 0, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, 0, -777, -777, -777, -777, -777, -777, 0, 0, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, -777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 402
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, -720, -720, 0, 0, 0, 0, 0, -720, -720, -720, 0, 0, 0, 0, 0, 0, 0, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, 0, 0, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, 0, -720, -720, -720, -720, -720, -720, 0, 0, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, -720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 403
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, -732, -732, 0, 0, 0, 0, 0, -732, -732, -732, 0, 0, 0, 0, 0, 0, 0, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, 0, 0, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, 0, -732, -732, -732, -732, -732, -732, 0, 0, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, -732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 404
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, -726, -726, 0, 0, 0, 0, 0, -726, -726, -726, 0, 0, 0, 0, 0, 0, 0, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, 0, 0, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, 0, -726, -726, -726, -726, -726, -726, 0, 0, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, -726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 405
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, -744, -744, 0, 0, 0, 0, 0, -744, -744, -744, 0, 0, 0, 0, 0, 0, 0, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, 0, 0, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, 0, -744, -744, -744, -744, -744, -744, 0, 0, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, -744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 406

        // State 407

        // State 408
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, -750, -750, 0, 0, 0, 0, 0, -750, -750, -750, 0, 0, 0, 0, 0, 0, 0, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, 0, 0, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, 0, -750, -750, -750, -750, -750, -750, 0, 0, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, -750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 409
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, -747, -747, 0, 0, 0, 0, 0, -747, -747, -747, 0, 0, 0, 0, 0, 0, 0, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, 0, 0, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, 0, -747, -747, -747, -747, -747, -747, 0, 0, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, -747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 410

        // State 411
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, -759, -759, 0, 0, 0, 0, 0, -759, -759, -759, 0, 0, 0, 0, 0, 0, 0, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, 0, 0, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, 0, -759, -759, -759, -759, -759, -759, 0, 0, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, -759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 412
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, -762, -762, 0, 0, 0, 0, 0, -762, -762, -762, 0, 0, 0, 0, 0, 0, 0, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, 0, 0, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, 0, -762, -762, -762, -762, -762, -762, 0, 0, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, -762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 413
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, -753, -753, 0, 0, 0, 0, 0, -753, -753, -753, 0, 0, 0, 0, 0, 0, 0, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, 0, 0, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, 0, -753, -753, -753, -753, -753, -753, 0, 0, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, -753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 414
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, -756, -756, 0, 0, 0, 0, 0, -756, -756, -756, 0, 0, 0, 0, 0, 0, 0, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, 0, 0, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, 0, -756, -756, -756, -756, -756, -756, 0, 0, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, -756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 415

        // State 416

        // State 417

        // State 418
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, -735, -735, 0, 0, 0, 0, 0, -735, -735, -735, 0, 0, 0, 0, 0, 0, 0, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, 0, 0, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, 0, -735, -735, -735, -735, -735, -735, 0, 0, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, -735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 419
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -991, -991, 0, 0, 0, 0, 0, -991, -991, -991, 0, 0, 0, 0, 0, 0, 0, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, 0, 0, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, 0, -991, -991, -991, -991, -991, -991, 0, 0, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, -991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 420

        // State 421
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, -741, -741, 0, 0, 0, 0, 0, -741, -741, -741, 0, 0, 0, 0, 0, 0, 0, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, 0, 0, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, 0, -741, -741, -741, -741, -741, -741, 0, 0, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, -741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 422
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, -738, -738, 0, 0, 0, 0, 0, -738, -738, -738, 0, 0, 0, 0, 0, 0, 0, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, 0, 0, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, 0, -738, -738, -738, -738, -738, -738, 0, 0, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, -738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 423
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, -729, -729, 0, 0, 0, 0, 0, -729, -729, -729, 0, 0, 0, 0, 0, 0, 0, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, 0, 0, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, 0, -729, -729, -729, -729, -729, -729, 0, 0, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, -729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 424
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 425

        // State 426
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 446, 0, 0, 0, 0, 0,
        // State 427

        // State 428
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0,
        // State 429
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 472, 473, 474, 475, 0, 0, 0, 0, 477, 478, 479, 480, 481, 476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 430
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 431
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 432
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 433
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 434
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 494, 0, 0, 0, 0, 0, 0, 0, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 435

        // State 436

        // State 437

        // State 438
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 439
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 440
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
        // State 441
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 442
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 443
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 562, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 444
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 445
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 446
        0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1145, 0, 0, 0, 0, -1145, 0, 0, 0, 0,
        // State 447
        0, 0, 0, 0, 0, 0, 0, -1152, 0, 0, 95, 0, -1152, -1152, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, 0, 0, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, 0, 0, 0, -1152, 0, 0, 0, 0,
        // State 448
        0, 0, 0, 0, 0, 0, 0, -1151, 0, 0, 99, 0, -1151, -1151, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, 0, 0, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, 0, 0, 0, -1151, 0, 0, 0, 0,
        // State 449

        // State 450

        // State 451

        // State 452
        0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, -272, 0, 0, 0, 0,
        // State 453
        0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 615, 0, 0, -810, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -810, 0, 0, 0, 0, -810, 0, 0, 0, 0,
        // State 454
        0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 618, 0, 0, -808, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -808, 0, 0, 0, 0, -808, 0, 0, 0, 0,
        // State 455
        0, 0, -821, 0, 0, -821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 456
        0, 0, 627, 0, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 457
        0, 0, 629, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 458
        0, 0, -818, 0, 0, -818, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 459
        0, 0, -817, 0, 0, -817, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 460
        0, 0, -679, -679, -679, -679, -679, 0, -679, -679, 0, 0, -679, -679, 0, -679, -679, -679, -679, 0, 0, 0, 0, -679, -679, -679, 0, 0, 0, 0, 0, 0, 0, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, 0, -679, -679, -679, -679, 0, -679, -679, -679, -679, 0, -679, -679, -679, -679, -679, -679, 0, -679, -679, -679, -679, -679, -679, -679, 0, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, 0, -679, -679, -679, -679, -679, -679, 0, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, -679, 0, 0, 0, 0, -679, 0, 0, 0, 0,
        // State 461
        0, 0, -820, 0, 0, -820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 462
        0, 0, -819, 0, 0, -819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 463

        // State 464
        0, 0, 634, 0, 0, 628, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 465
        0, 0, 635, 0, 0, 630, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 466
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 467

        // State 468

        // State 469

        // State 470

        // State 471

        // State 472

        // State 473

        // State 474

        // State 475

        // State 476

        // State 477

        // State 478

        // State 479
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -837, -837, 0, 0, 0, 0, 0, -837, -837, -837, 0, 0, 0, 0, 0, 0, 0, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, 0, 0, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, 0, -837, -837, -837, -837, -837, -837, 0, 0, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, -837, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 480

        // State 481

        // State 482

        // State 483
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 484
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 485
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 486
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 487

        // State 488

        // State 489

        // State 490

        // State 491

        // State 492
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, -861, -861, 0, 0, 0, 0, 0, -861, -861, -861, 0, 0, 0, 0, 0, 0, 0, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, 0, 0, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, 0, -861, -861, -861, -861, -861, -861, 0, 0, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, -861, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 493
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, -858, -858, 0, 0, 0, 0, 0, -858, -858, -858, 0, 0, 0, 0, 0, 0, 0, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, 0, 0, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, 0, -858, -858, -858, -858, -858, -858, 0, 0, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, -858, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 494
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, -851, -851, 0, 0, 0, 0, 0, -851, -851, -851, 0, 0, 0, 0, 0, 0, 0, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, 0, 0, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, 0, -851, -851, -851, -851, -851, -851, 0, 0, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, -851, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 495
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, -844, -844, 0, 0, 0, 0, 0, -844, -844, -844, 0, 0, 0, 0, 0, 0, 0, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, 0, 0, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, 0, -844, -844, -844, -844, -844, -844, 0, 0, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, -844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 496

        // State 497

        // State 498
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -913, -913, 0, 0, 0, 0, 0, -913, -913, -913, 0, 0, 0, 0, 0, 0, 0, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, 0, 0, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, 0, -913, -913, -913, -913, -913, -913, 0, 0, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, -913, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 499

        // State 500

        // State 501

        // State 502

        // State 503

        // State 504

        // State 505

        // State 506

        // State 507
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, -82, 0, 0, 0, 0, 0, -82, -82, -82, 0, 0, 0, 0, 0, 0, 0, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, 0, 0, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, 0, -82, -82, -82, -82, -82, -82, 0, 0, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 508

        // State 509

        // State 510

        // State 511

        // State 512

        // State 513
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -698, -698, 0, 0, 0, 0, 0, -698, -698, -698, 0, 0, 0, 0, 0, 0, 0, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, 0, 0, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, 0, -698, -698, -698, -698, -698, -698, 0, 0, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, -698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 514

        // State 515
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -905, -905, 0, 0, 0, 0, 0, -905, -905, -905, 0, 0, 0, 0, 0, 0, 0, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, 0, 0, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, 0, -905, -905, -905, -905, -905, -905, 0, 0, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, -905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 516

        // State 517

        // State 518

        // State 519

        // State 520

        // State 521

        // State 522

        // State 523

        // State 524

        // State 525

        // State 526

        // State 527

        // State 528

        // State 529

        // State 530

        // State 531

        // State 532

        // State 533
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -931, -931, 0, 0, 0, 0, 0, -931, -931, -931, 0, 0, 0, 0, 0, 0, 0, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, 0, 0, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, 0, -931, -931, -931, -931, -931, -931, 0, 0, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, -931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 534

        // State 535

        // State 536

        // State 537

        // State 538

        // State 539

        // State 540

        // State 541
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 542

        // State 543

        // State 544

        // State 545

        // State 546

        // State 547
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, -1154, -1154, 0, 0, 0, 0, 0, -1154, -1154, -1154, 0, 0, 0, 0, 0, 0, 0, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, 0, 0, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, 0, -1154, -1154, -1154, -1154, -1154, -1154, 0, 0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 548

        // State 549

        // State 550

        // State 551

        // State 552

        // State 553

        // State 554

        // State 555

        // State 556

        // State 557

        // State 558

        // State 559
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 560
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 561
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 562

        // State 563
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -713, -713, 0, 0, 0, 0, 0, -713, -713, -713, 0, 0, 0, 0, 0, 0, 0, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, 0, 0, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, 0, -713, -713, -713, -713, -713, -713, 0, 0, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, -713, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 564
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -715, -715, 0, 0, 0, 0, 0, -715, -715, -715, 0, 0, 0, 0, 0, 0, 0, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, 0, 0, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, 0, -715, -715, -715, -715, -715, -715, 0, 0, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, -715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 565

        // State 566

        // State 567

        // State 568

        // State 569

        // State 570

        // State 571

        // State 572

        // State 573

        // State 574

        // State 575

        // State 576

        // State 577

        // State 578

        // State 579

        // State 580

        // State 581

        // State 582

        // State 583

        // State 584

        // State 585

        // State 586

        // State 587

        // State 588

        // State 589

        // State 590

        // State 591

        // State 592

        // State 593

        // State 594

        // State 595

        // State 596

        // State 597

        // State 598

        // State 599

        // State 600

        // State 601

        // State 602

        // State 603
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -736, -736, 0, 0, 0, 0, 0, -736, -736, -736, 0, 0, 0, 0, 0, 0, 0, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, 0, 0, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, 0, -736, -736, -736, -736, -736, -736, 0, 0, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, -736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 604

        // State 605

        // State 606

        // State 607
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 608
        0, 0, 0, 0, 0, 0, 0, -1152, 0, 0, 615, 0, 0, -1152, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, 0, 0, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, 0, 0, 0, -1152, 0, 0, 0, 0,
        // State 609

        // State 610
        0, 0, 0, 0, 0, 0, 0, -1151, 0, 0, 618, 0, 0, -1151, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, 0, 0, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, 0, 0, 0, -1151, 0, 0, 0, 0,
        // State 611
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 612
        0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 667, 0, 0, -811, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -811, 0, 0, 0, 0, -811, 0, 0, 0, 0,
        // State 613
        0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 668, 0, 0, -809, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -809, 0, 0, 0, 0, -809, 0, 0, 0, 0,
        // State 614

        // State 615
        0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 615, 0, 0, -806, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -806, 0, 0, 0, 0, -806, 0, 0, 0, 0,
        // State 616
        0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 618, 0, 0, -804, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -804, 0, 0, 0, 0, -804, 0, 0, 0, 0,
        // State 617

        // State 618
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 619
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 620
        0, 0, 675, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 621
        0, 0, -818, 0, 0, -818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 622
        0, 0, -817, 0, 0, -817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 623
        0, 0, 677, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 624
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 625
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 626
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 627
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, -36, -36, -36, 0, 0, 0, 0, -36, -36, -36, -36, 0, 0, 0, 0, 0, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, 0, -36, -36, -36, 0, -36, -36, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, 0, -36, -36, -36, -36, -36, 0, -36, -36, -36, -36, -36, -36, 0, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, 0, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, -36, 0, -36, 0, -36, 0, 0, 0, 0, -36, -36, -36, -36,
        // State 628
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 629

        // State 630
        0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 631
        0, 0, 681, 0, 0, 676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 632
        0, 0, 682, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 633
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 634
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 635
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 636
        0, 0, 683, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 637
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 684, 0, 0, 685, 686, 0,
        // State 638
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 687, 0, 0, 688, 689, 0,
        // State 639
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 691, 692, 0,
        // State 640
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 693, 0, 0, 694, 695, 0,
        // State 641
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 642
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 643
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 0, 709, 710, 0,
        // State 644
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0, 0, -1155, -1155, 0, 0, 0, 0, 0, -1155, -1155, -1155, 0, 0, 0, 0, 0, 0, 0, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, 0, 0, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, 0, -1155, -1155, -1155, -1155, -1155, -1155, 0, 0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 645
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, -31, 0, 0, -31,
        // State 646
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 647
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 714, 715, 0,
        // State 648
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716, 0, 0, 717, 718, 0,
        // State 649
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 719, 0, 0, 720, 721, 0,
        // State 650
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 651
        0, 0, 0, 0, 122, 0, 123, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, -93, 0, 0, 0, 0,
        // State 652
        0, 0, -96, 124, -96, 0, -96, 0, 125, 126, 0, 0, 0, -96, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, -96, 0, 0, 0, 0,
        // State 653
        0, 0, -1183, -1183, -1183, 0, -1183, 0, -1183, -1183, 0, 0, 0, -1183, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1183, 0, 0, 0, 0, -1183, 0, 0, 0, 0,
        // State 654
        0, 0, -100, -100, -100, 0, -100, 0, -100, -100, 0, 0, 0, -100, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, -100, 0, 0, 0, 0,
        // State 655
        0, 0, -1186, -1186, -1186, 0, -1186, 0, -1186, -1186, 0, 0, 0, -1186, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1186, 0, 0, 0, 0, -1186, 0, 0, 0, 0,
        // State 656
        0, 0, -1185, -1185, -1185, 0, -1185, 0, -1185, -1185, 0, 0, 0, -1185, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1185, 0, 0, 0, 0, -1185, 0, 0, 0, 0,
        // State 657
        0, 0, -1184, -1184, -1184, 0, -1184, 0, -1184, -1184, 0, 0, 0, -1184, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1184, 0, 0, 0, 0, -1184, 0, 0, 0, 0,
        // State 658
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1144, 0, 0, 0, 0, -1144, 0, 0, 0, 0,
        // State 659

        // State 660
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1139, 0, 0, 0, 0, -1139, 0, 0, 0, 0,
        // State 661
        0, 0, 0, 0, 0, 0, 0, -1152, 0, 0, 667, 0, 0, -1152, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, -1152, -1152, -1152, 0, 0, 0, 0, 0, 0, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, 0, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, 0, 0, 0, 0, -1152, 0, 0, 0, 0,
        // State 662

        // State 663
        0, 0, 0, 0, 0, 0, 0, -1151, 0, 0, 668, 0, 0, -1151, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, -1151, -1151, -1151, 0, 0, 0, 0, 0, 0, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, 0, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, 0, 0, 0, 0, -1151, 0, 0, 0, 0,
        // State 664

        // State 665
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1138, 0, 0, 0, 0, -1138, 0, 0, 0, 0,
        // State 666

        // State 667
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, -18, -18, 0, 0, 0, 0, -18, -18, -18, -18, 0, 0, 0, 0, 0, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, 0, -18, -18, -18, 0, -18, -18, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, -18, 0, -18, -18, -18, -18, -18, 0, -18, -18, -18, -18, -18, -18, 0, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, 0, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, -18, 0, -18, 0, -18, 0, 0, 0, 0, 0, -18, 0, 0,
        // State 668
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, -271, 0, 0, 0, 0,
        // State 669
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, -270, 0, 0, 0, 0,
        // State 670
        0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 667, 0, 0, -807, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -807, 0, 0, 0, 0, -807, 0, 0, 0, 0,
        // State 671
        0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 668, 0, 0, -805, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -805, 0, 0, 0, 0, -805, 0, 0, 0, 0,
        // State 672
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1143, 0, 0, 0, 0, -1143, 0, 0, 0, 0,
        // State 673
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1142, 0, 0, 0, 0, -1142, 0, 0, 0, 0,
        // State 674
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 675

        // State 676
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 677

        // State 678
        0, 0, -823, 0, 0, -823, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 679
        0, 0, -822, 0, 0, -822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 680
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 681
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 682
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 683

        // State 684

        // State 685

        // State 686

        // State 687

        // State 688
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -876, -876, 0, 0, 0, 0, 0, -876, -876, -876, 0, 0, 0, 0, 0, 0, 0, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, 0, 0, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, 0, -876, -876, -876, -876, -876, -876, 0, 0, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, -876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 689

        // State 690

        // State 691

        // State 692

        // State 693

        // State 694

        // State 695

        // State 696

        // State 697
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, -856, -856, 0, 0, 0, 0, 0, -856, -856, -856, 0, 0, 0, 0, 0, 0, 0, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, 0, 0, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, 0, -856, -856, -856, -856, -856, -856, 0, 0, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, -856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 698
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, -857, -857, 0, 0, 0, 0, 0, -857, -857, -857, 0, 0, 0, 0, 0, 0, 0, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, 0, 0, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, 0, -857, -857, -857, -857, -857, -857, 0, 0, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, -857, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 699
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, -849, -849, 0, 0, 0, 0, 0, -849, -849, -849, 0, 0, 0, 0, 0, 0, 0, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, 0, 0, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, 0, -849, -849, -849, -849, -849, -849, 0, 0, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, -849, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 700
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, -850, -850, 0, 0, 0, 0, 0, -850, -850, -850, 0, 0, 0, 0, 0, 0, 0, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, 0, 0, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, 0, -850, -850, -850, -850, -850, -850, 0, 0, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, -850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 701

        // State 702
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -843, -843, 0, 0, 0, 0, 0, -843, -843, -843, 0, 0, 0, 0, 0, 0, 0, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, 0, 0, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, 0, -843, -843, -843, -843, -843, -843, 0, 0, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, -843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 703
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, -246, 0, 0, 0, 0, 0, -246, -246, -246, 0, 0, 0, 0, 0, 0, 0, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, 0, 0, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, 0, -246, -246, -246, -246, -246, -246, 0, 0, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 704
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 705

        // State 706
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 707

        // State 708

        // State 709

        // State 710
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, -32, 0, 0, -32,
        // State 711
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1168, -1168, 0, 0, 0, 0, 0, -1168, -1168, -1168, 0, 0, 0, 0, 0, 0, 0, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, 0, 0, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, 0, -1168, -1168, -1168, -1168, -1168, -1168, 0, 0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 712

        // State 713

        // State 714

        // State 715
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -890, -890, 0, 0, 0, 0, 0, -890, -890, -890, 0, 0, 0, 0, 0, 0, 0, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, 0, 0, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, 0, -890, -890, -890, -890, -890, -890, 0, 0, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, -890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 716

        // State 717

        // State 718

        // State 719

        // State 720

        // State 721

        // State 722
        0, 0, 741, 0, 122, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 723
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 724
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 725
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 726
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 727
        0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 728
        0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 729
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 730

        // State 731
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, -240, 0, 0, 0, 0, 0, -240, -240, -240, 0, 0, 0, 0, 0, 0, 0, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, 0, 0, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, 0, -240, -240, -240, -240, -240, -240, 0, 0, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 732
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 733

        // State 734

        // State 735
        0, 0, -94, 124, -94, 0, -94, 0, 125, 126, 0, 0, 0, -94, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, -94, 0, 0, 0, 0,
        // State 736
        0, 0, -95, 124, -95, 0, -95, 0, 125, 126, 0, 0, 0, -95, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, -95, 0, 0, 0, 0,
        // State 737
        0, 0, -97, -97, -97, 0, -97, 0, -97, -97, 0, 0, 0, -97, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, -97, 0, 0, 0, 0,
        // State 738
        0, 0, -98, -98, -98, 0, -98, 0, -98, -98, 0, 0, 0, -98, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, -98, 0, 0, 0, 0,
        // State 739
        0, 0, -99, -99, -99, 0, -99, 0, -99, -99, 0, 0, 0, -99, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, -99, 0, 0, 0, 0,
        // State 740
        0, 0, -1182, -1182, -1182, 0, -1182, 0, -1182, -1182, 0, 0, 0, -1182, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1182, 0, 0, 0, 0, -1182, 0, 0, 0, 0,
        // State 741
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1137, 0, 0, 0, 0, -1137, 0, 0, 0, 0,
        // State 742
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1136, 0, 0, 0, 0, -1136, 0, 0, 0, 0,
        // State 743
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1141, 0, 0, 0, 0, -1141, 0, 0, 0, 0,
        // State 744
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1140, 0, 0, 0, 0, -1140, 0, 0, 0, 0,
        // State 745
        0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 746
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, -26,
        // State 747
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, -45, 0, 0, 0, 0,
        // State 748

        // State 749

        // State 750

        // State 751

        // State 752

        // State 753

        // State 754

        // State 755
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -848, -848, 0, 0, 0, 0, 0, -848, -848, -848, 0, 0, 0, 0, 0, 0, 0, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, 0, 0, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, 0, -848, -848, -848, -848, -848, -848, 0, 0, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, -848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 756

        // State 757

        // State 758
        0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 759
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, -27,
        // State 760
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, -46, 0, 0, 0, 0,
        // State 761
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 762

    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 182 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        -1195,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        -238,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        0,
        // State 196
        0,
        // State 197
        0,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        0,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        0,
        // State 231
        0,
        // State 232
        0,
        // State 233
        0,
        // State 234
        0,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        0,
        // State 241
        0,
        // State 242
        0,
        // State 243
        0,
        // State 244
        0,
        // State 245
        0,
        // State 246
        0,
        // State 247
        0,
        // State 248
        0,
        // State 249
        0,
        // State 250
        0,
        // State 251
        0,
        // State 252
        0,
        // State 253
        0,
        // State 254
        0,
        // State 255
        0,
        // State 256
        0,
        // State 257
        0,
        // State 258
        0,
        // State 259
        0,
        // State 260
        0,
        // State 261
        0,
        // State 262
        0,
        // State 263
        0,
        // State 264
        0,
        // State 265
        0,
        // State 266
        0,
        // State 267
        0,
        // State 268
        0,
        // State 269
        0,
        // State 270
        0,
        // State 271
        0,
        // State 272
        0,
        // State 273
        0,
        // State 274
        0,
        // State 275
        0,
        // State 276
        0,
        // State 277
        0,
        // State 278
        0,
        // State 279
        0,
        // State 280
        0,
        // State 281
        0,
        // State 282
        0,
        // State 283
        0,
        // State 284
        0,
        // State 285
        0,
        // State 286
        0,
        // State 287
        0,
        // State 288
        0,
        // State 289
        0,
        // State 290
        0,
        // State 291
        0,
        // State 292
        0,
        // State 293
        0,
        // State 294
        0,
        // State 295
        0,
        // State 296
        0,
        // State 297
        0,
        // State 298
        0,
        // State 299
        0,
        // State 300
        0,
        // State 301
        0,
        // State 302
        0,
        // State 303
        0,
        // State 304
        0,
        // State 305
        0,
        // State 306
        0,
        // State 307
        0,
        // State 308
        0,
        // State 309
        0,
        // State 310
        0,
        // State 311
        0,
        // State 312
        0,
        // State 313
        0,
        // State 314
        0,
        // State 315
        0,
        // State 316
        0,
        // State 317
        0,
        // State 318
        0,
        // State 319
        0,
        // State 320
        0,
        // State 321
        0,
        // State 322
        0,
        // State 323
        0,
        // State 324
        0,
        // State 325
        0,
        // State 326
        0,
        // State 327
        0,
        // State 328
        0,
        // State 329
        0,
        // State 330
        0,
        // State 331
        0,
        // State 332
        0,
        // State 333
        0,
        // State 334
        0,
        // State 335
        0,
        // State 336
        0,
        // State 337
        0,
        // State 338
        0,
        // State 339
        0,
        // State 340
        0,
        // State 341
        0,
        // State 342
        0,
        // State 343
        0,
        // State 344
        0,
        // State 345
        0,
        // State 346
        0,
        // State 347
        0,
        // State 348
        0,
        // State 349
        0,
        // State 350
        0,
        // State 351
        0,
        // State 352
        0,
        // State 353
        0,
        // State 354
        0,
        // State 355
        0,
        // State 356
        0,
        // State 357
        0,
        // State 358
        0,
        // State 359
        0,
        // State 360
        0,
        // State 361
        0,
        // State 362
        0,
        // State 363
        0,
        // State 364
        0,
        // State 365
        0,
        // State 366
        0,
        // State 367
        0,
        // State 368
        0,
        // State 369
        0,
        // State 370
        0,
        // State 371
        0,
        // State 372
        0,
        // State 373
        0,
        // State 374
        0,
        // State 375
        0,
        // State 376
        0,
        // State 377
        0,
        // State 378
        0,
        // State 379
        0,
        // State 380
        0,
        // State 381
        0,
        // State 382
        0,
        // State 383
        0,
        // State 384
        0,
        // State 385
        0,
        // State 386
        0,
        // State 387
        0,
        // State 388
        0,
        // State 389
        0,
        // State 390
        0,
        // State 391
        0,
        // State 392
        0,
        // State 393
        0,
        // State 394
        0,
        // State 395
        0,
        // State 396
        0,
        // State 397
        0,
        // State 398
        0,
        // State 399
        0,
        // State 400
        0,
        // State 401
        0,
        // State 402
        0,
        // State 403
        0,
        // State 404
        0,
        // State 405
        0,
        // State 406
        0,
        // State 407
        0,
        // State 408
        0,
        // State 409
        0,
        // State 410
        0,
        // State 411
        0,
        // State 412
        0,
        // State 413
        0,
        // State 414
        0,
        // State 415
        0,
        // State 416
        0,
        // State 417
        0,
        // State 418
        0,
        // State 419
        0,
        // State 420
        0,
        // State 421
        0,
        // State 422
        0,
        // State 423
        0,
        // State 424
        0,
        // State 425
        0,
        // State 426
        0,
        // State 427
        0,
        // State 428
        0,
        // State 429
        0,
        // State 430
        0,
        // State 431
        0,
        // State 432
        0,
        // State 433
        0,
        // State 434
        0,
        // State 435
        0,
        // State 436
        0,
        // State 437
        0,
        // State 438
        0,
        // State 439
        0,
        // State 440
        0,
        // State 441
        0,
        // State 442
        0,
        // State 443
        0,
        // State 444
        0,
        // State 445
        0,
        // State 446
        0,
        // State 447
        0,
        // State 448
        0,
        // State 449
        0,
        // State 450
        0,
        // State 451
        0,
        // State 452
        0,
        // State 453
        0,
        // State 454
        0,
        // State 455
        0,
        // State 456
        0,
        // State 457
        0,
        // State 458
        0,
        // State 459
        0,
        // State 460
        0,
        // State 461
        0,
        // State 462
        0,
        // State 463
        0,
        // State 464
        0,
        // State 465
        0,
        // State 466
        0,
        // State 467
        0,
        // State 468
        0,
        // State 469
        0,
        // State 470
        0,
        // State 471
        0,
        // State 472
        0,
        // State 473
        0,
        // State 474
        0,
        // State 475
        0,
        // State 476
        0,
        // State 477
        0,
        // State 478
        0,
        // State 479
        0,
        // State 480
        0,
        // State 481
        0,
        // State 482
        0,
        // State 483
        0,
        // State 484
        0,
        // State 485
        0,
        // State 486
        0,
        // State 487
        0,
        // State 488
        0,
        // State 489
        0,
        // State 490
        0,
        // State 491
        0,
        // State 492
        0,
        // State 493
        0,
        // State 494
        0,
        // State 495
        0,
        // State 496
        0,
        // State 497
        0,
        // State 498
        0,
        // State 499
        0,
        // State 500
        0,
        // State 501
        0,
        // State 502
        0,
        // State 503
        0,
        // State 504
        0,
        // State 505
        0,
        // State 506
        0,
        // State 507
        0,
        // State 508
        0,
        // State 509
        0,
        // State 510
        0,
        // State 511
        0,
        // State 512
        0,
        // State 513
        0,
        // State 514
        0,
        // State 515
        0,
        // State 516
        0,
        // State 517
        0,
        // State 518
        0,
        // State 519
        0,
        // State 520
        0,
        // State 521
        0,
        // State 522
        0,
        // State 523
        0,
        // State 524
        0,
        // State 525
        0,
        // State 526
        0,
        // State 527
        0,
        // State 528
        0,
        // State 529
        0,
        // State 530
        0,
        // State 531
        0,
        // State 532
        0,
        // State 533
        0,
        // State 534
        0,
        // State 535
        0,
        // State 536
        0,
        // State 537
        0,
        // State 538
        0,
        // State 539
        0,
        // State 540
        0,
        // State 541
        0,
        // State 542
        0,
        // State 543
        0,
        // State 544
        0,
        // State 545
        0,
        // State 546
        0,
        // State 547
        0,
        // State 548
        0,
        // State 549
        0,
        // State 550
        0,
        // State 551
        0,
        // State 552
        0,
        // State 553
        0,
        // State 554
        0,
        // State 555
        0,
        // State 556
        0,
        // State 557
        0,
        // State 558
        0,
        // State 559
        0,
        // State 560
        0,
        // State 561
        0,
        // State 562
        0,
        // State 563
        0,
        // State 564
        0,
        // State 565
        0,
        // State 566
        0,
        // State 567
        0,
        // State 568
        0,
        // State 569
        0,
        // State 570
        0,
        // State 571
        0,
        // State 572
        0,
        // State 573
        0,
        // State 574
        0,
        // State 575
        0,
        // State 576
        0,
        // State 577
        0,
        // State 578
        0,
        // State 579
        0,
        // State 580
        0,
        // State 581
        0,
        // State 582
        0,
        // State 583
        0,
        // State 584
        0,
        // State 585
        0,
        // State 586
        0,
        // State 587
        0,
        // State 588
        0,
        // State 589
        0,
        // State 590
        0,
        // State 591
        0,
        // State 592
        0,
        // State 593
        0,
        // State 594
        0,
        // State 595
        0,
        // State 596
        0,
        // State 597
        0,
        // State 598
        0,
        // State 599
        0,
        // State 600
        0,
        // State 601
        0,
        // State 602
        0,
        // State 603
        0,
        // State 604
        0,
        // State 605
        0,
        // State 606
        0,
        // State 607
        0,
        // State 608
        0,
        // State 609
        0,
        // State 610
        0,
        // State 611
        0,
        // State 612
        0,
        // State 613
        0,
        // State 614
        0,
        // State 615
        0,
        // State 616
        0,
        // State 617
        0,
        // State 618
        0,
        // State 619
        0,
        // State 620
        0,
        // State 621
        0,
        // State 622
        0,
        // State 623
        0,
        // State 624
        0,
        // State 625
        0,
        // State 626
        0,
        // State 627
        0,
        // State 628
        0,
        // State 629
        0,
        // State 630
        0,
        // State 631
        0,
        // State 632
        0,
        // State 633
        0,
        // State 634
        0,
        // State 635
        0,
        // State 636
        0,
        // State 637
        0,
        // State 638
        0,
        // State 639
        0,
        // State 640
        0,
        // State 641
        0,
        // State 642
        0,
        // State 643
        0,
        // State 644
        0,
        // State 645
        0,
        // State 646
        0,
        // State 647
        0,
        // State 648
        0,
        // State 649
        0,
        // State 650
        0,
        // State 651
        0,
        // State 652
        0,
        // State 653
        0,
        // State 654
        0,
        // State 655
        0,
        // State 656
        0,
        // State 657
        0,
        // State 658
        0,
        // State 659
        0,
        // State 660
        0,
        // State 661
        0,
        // State 662
        0,
        // State 663
        0,
        // State 664
        0,
        // State 665
        0,
        // State 666
        0,
        // State 667
        0,
        // State 668
        0,
        // State 669
        0,
        // State 670
        0,
        // State 671
        0,
        // State 672
        0,
        // State 673
        0,
        // State 674
        0,
        // State 675
        0,
        // State 676
        0,
        // State 677
        0,
        // State 678
        0,
        // State 679
        0,
        // State 680
        0,
        // State 681
        0,
        // State 682
        0,
        // State 683
        0,
        // State 684
        0,
        // State 685
        0,
        // State 686
        0,
        // State 687
        0,
        // State 688
        0,
        // State 689
        0,
        // State 690
        0,
        // State 691
        0,
        // State 692
        0,
        // State 693
        0,
        // State 694
        0,
        // State 695
        0,
        // State 696
        0,
        // State 697
        0,
        // State 698
        0,
        // State 699
        0,
        // State 700
        0,
        // State 701
        0,
        // State 702
        0,
        // State 703
        0,
        // State 704
        0,
        // State 705
        0,
        // State 706
        0,
        // State 707
        0,
        // State 708
        0,
        // State 709
        0,
        // State 710
        0,
        // State 711
        0,
        // State 712
        0,
        // State 713
        0,
        // State 714
        0,
        // State 715
        0,
        // State 716
        0,
        // State 717
        0,
        // State 718
        0,
        // State 719
        0,
        // State 720
        0,
        // State 721
        0,
        // State 722
        0,
        // State 723
        0,
        // State 724
        0,
        // State 725
        0,
        // State 726
        0,
        // State 727
        0,
        // State 728
        0,
        // State 729
        0,
        // State 730
        0,
        // State 731
        0,
        // State 732
        0,
        // State 733
        0,
        // State 734
        0,
        // State 735
        0,
        // State 736
        0,
        // State 737
        0,
        // State 738
        0,
        // State 739
        0,
        // State 740
        0,
        // State 741
        0,
        // State 742
        0,
        // State 743
        0,
        // State 744
        0,
        // State 745
        0,
        // State 746
        0,
        // State 747
        0,
        // State 748
        0,
        // State 749
        0,
        // State 750
        0,
        // State 751
        0,
        // State 752
        0,
        // State 753
        0,
        // State 754
        0,
        // State 755
        0,
        // State 756
        0,
        // State 757
        0,
        // State 758
        0,
        // State 759
        0,
        // State 760
        0,
        // State 761
        0,
        // State 762
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            8 => match state {
                75 => 97,
                78 => 101,
                _ => 77,
            },
            12 => 126,
            15 => 89,
            18 => match state {
                13 => 84,
                _ => 81,
            },
            21 => match state {
                13 => 85,
                _ => 82,
            },
            24 => 133,
            26 => match state {
                1 => 148,
                _ => 134,
            },
            28 => 1,
            32 => 135,
            33 => 435,
            34 => match state {
                76 => 611,
                79 => 618,
                80 => 619,
                87 => 641,
                88 => 642,
                90 => 646,
                91 => 650,
                110 => 704,
                111 => 706,
                113 => 723,
                114 => 724,
                115 => 725,
                116 => 726,
                119 => 729,
                120 => 732,
                _ => 607,
            },
            36 => 290,
            41 => 136,
            42 => match state {
                112 => 722,
                _ => 651,
            },
            43 => match state {
                121 => 735,
                122 => 736,
                _ => 652,
            },
            46 => 137,
            48 => match state {
                18 => 496,
                22 => 505,
                24 => 508,
                25 => 510,
                26 => 512,
                32 => 525,
                33 => 527,
                42 => 542,
                43 => 544,
                46 => 550,
                83 => 630,
                117 => 727,
                118 => 728,
                126 => 745,
                131 => 758,
                132 => 761,
                _ => 467,
            },
            51 => match state {
                2 => 151,
                _ => 138,
            },
            52 => 2,
            53 => 139,
            54 => 291,
            66 => 140,
            75 => match state {
                89 => 644,
                _ => 547,
            },
            76 => match state {
                12..=13 | 81 | 84 | 104..=105 => 455,
                45 | 89 => 548,
                86 => 636,
                92 | 112 | 121..=125 => 653,
                _ => 468,
            },
            77 => match state {
                23 => 507,
                44 => 546,
                49 => 554,
                _ => 487,
            },
            78 => 292,
            79 => 488,
            81 => 466,
            88 => 452,
            89 => match state {
                7 => 446,
                _ => 489,
            },
            90 => match state {
                13 => 464,
                81 => 620,
                84 => 631,
                104 => 678,
                105 => 679,
                _ => 456,
            },
            91 => match state {
                13 => 465,
                82 => 623,
                85 => 632,
                _ => 457,
            },
            92 => 481,
            94 => match state {
                5 | 95 => 427,
                _ => 293,
            },
            95 => match state {
                4 => 5,
                _ => 95,
            },
            96 => 153,
            97 => match state {
                3 => 154,
                8 | 10..=11 | 93..=94 | 98 => 450,
                9 => 453,
                12..=13 => 458,
                75 => 608,
                77 => 612,
                78 => 615,
                81 | 84 | 104..=105 => 621,
                82 | 85 => 624,
                97 => 661,
                100 => 668,
                101 => 670,
                _ => 447,
            },
            100 => 141,
            103 => match state {
                7 => 74,
                8 => 76,
                10 => 79,
                11 => 80,
                75 => 609,
                93 => 658,
                94 => 659,
                97 => 662,
                98 => 664,
                _ => 490,
            },
            104 => 294,
            109 => 295,
            110 => match state {
                67 => 593,
                68 => 595,
                69 => 597,
                _ => 590,
            },
            113 => match state {
                123 => 737,
                124 => 738,
                125 => 739,
                _ => 654,
            },
            114 => match state {
                99 => 114,
                102 => 115,
                103 => 116,
                27 => 514,
                28 => 517,
                29 => 519,
                30 => 521,
                31 => 523,
                106 => 695,
                107 => 697,
                127 => 748,
                128 => 750,
                _ => 113,
            },
            115 => match state {
                34 => 529,
                35 => 531,
                36 => 533,
                37 => 535,
                50 => 555,
                51 => 557,
                52 => 562,
                53 => 564,
                54 => 566,
                55 => 568,
                56 => 570,
                57 => 572,
                58 => 574,
                59 => 576,
                60 => 578,
                61 => 580,
                62 => 582,
                63 => 584,
                64 => 586,
                65 => 588,
                70 => 599,
                71 => 601,
                72 => 603,
                73 => 605,
                108 => 699,
                129 => 752,
                130 => 754,
                _ => 500,
            },
            116 => match state {
                16 => 482,
                19 => 498,
                20 => 499,
                38 => 537,
                39 => 538,
                40 => 539,
                41 => 540,
                47 => 552,
                48 => 553,
                66..=69 => 591,
                109 => 701,
                _ => 436,
            },
            118 => 296,
            _ => 0,
        }
    }
    #[allow(clippy::needless_raw_string_hashes)]
    const __TERMINAL: &[&str] = &[
        r###""!""###,
        r###""(""###,
        r###"")""###,
        r###""*""###,
        r###""+""###,
        r###"",""###,
        r###""-""###,
        r###""->""###,
        r###""/""###,
        r###""//""###,
        r###""::""###,
        r###""=""###,
        r###"".""###,
        r###""@""###,
        r###""[""###,
        r###""]""###,
        r###""add""###,
        r###""adv""###,
        r###""adv_map""###,
        r###""insert_hdword""###,
        r###""insert_hdword_d""###,
        r###""insert_hperm""###,
        r###""insert_mem""###,
        r###""adv_loadw""###,
        r###""adv_pipe""###,
        r###""adv_push""###,
        r###""adv_stack""###,
        r###""push_mapval""###,
        r###""push_mapvaln""###,
        r###""push_mtnode""###,
        r###""push_smtpeek""###,
        r###""push_u64div""###,
        r###""push_falcon_div""###,
        r###""and""###,
        r###""arithmetic_circuit_eval""###,
        r###""assert""###,
        r###""assertz""###,
        r###""assert_eq""###,
        r###""assert_eqw""###,
        r###""begin""###,
        r###""caller""###,
        r###""call""###,
        r###""cdrop""###,
        r###""cdropw""###,
        r###""clk""###,
        r###""const""###,
        r###""cswap""###,
        r###""cswapw""###,
        r###""debug""###,
        r###""breakpoint""###,
        r###""div""###,
        r###""drop""###,
        r###""dropw""###,
        r###""dup""###,
        r###""dupw""###,
        r###""dynexec""###,
        r###""dyncall""###,
        r###""else""###,
        r###""emit""###,
        r###""end""###,
        r###""eq""###,
        r###""eqw""###,
        r###""ext2add""###,
        r###""ext2div""###,
        r###""ext2inv""###,
        r###""ext2mul""###,
        r###""ext2neg""###,
        r###""ext2sub""###,
        r###""err""###,
        r###""exec""###,
        r###""exp""###,
        r###""exp.u""###,
        r###""export""###,
        r###""false""###,
        r###""fri_ext2fold4""###,
        r###""gt""###,
        r###""gte""###,
        r###""hash""###,
        r###""has_mapkey""###,
        r###""hperm""###,
        r###""hmerge""###,
        r###""if""###,
        r###""ilog2""###,
        r###""inv""###,
        r###""is_odd""###,
        r###""local""###,
        r###""locaddr""###,
        r###""loc_load""###,
        r###""loc_loadw""###,
        r###""loc_store""###,
        r###""loc_storew""###,
        r###""lt""###,
        r###""lte""###,
        r###""mem""###,
        r###""mem_load""###,
        r###""mem_loadw""###,
        r###""mem_store""###,
        r###""mem_storew""###,
        r###""mem_stream""###,
        r###""movdn""###,
        r###""movdnw""###,
        r###""movup""###,
        r###""movupw""###,
        r###""mtree_get""###,
        r###""mtree_merge""###,
        r###""mtree_set""###,
        r###""mtree_verify""###,
        r###""mul""###,
        r###""neg""###,
        r###""neq""###,
        r###""not""###,
        r###""nop""###,
        r###""or""###,
        r###""padw""###,
        r###""pow2""###,
        r###""proc""###,
        r###""procref""###,
        r###""push""###,
        r###""horner_eval_base""###,
        r###""horner_eval_ext""###,
        r###""repeat""###,
        r###""sdepth""###,
        r###""stack""###,
        r###""sub""###,
        r###""swap""###,
        r###""swapw""###,
        r###""swapdw""###,
        r###""syscall""###,
        r###""trace""###,
        r###""true""###,
        r###""use""###,
        r###""u32and""###,
        r###""u32assert""###,
        r###""u32assert2""###,
        r###""u32assertw""###,
        r###""u32cast""###,
        r###""u32div""###,
        r###""u32divmod""###,
        r###""u32gt""###,
        r###""u32gte""###,
        r###""u32lt""###,
        r###""u32lte""###,
        r###""u32max""###,
        r###""u32min""###,
        r###""u32mod""###,
        r###""u32not""###,
        r###""u32or""###,
        r###""u32overflowing_add""###,
        r###""u32overflowing_add3""###,
        r###""u32overflowing_madd""###,
        r###""u32overflowing_mul""###,
        r###""u32overflowing_sub""###,
        r###""u32popcnt""###,
        r###""u32clz""###,
        r###""u32ctz""###,
        r###""u32clo""###,
        r###""u32cto""###,
        r###""u32rotl""###,
        r###""u32rotr""###,
        r###""u32shl""###,
        r###""u32shr""###,
        r###""u32split""###,
        r###""u32test""###,
        r###""u32testw""###,
        r###""u32wrapping_add""###,
        r###""u32wrapping_add3""###,
        r###""u32wrapping_madd""###,
        r###""u32wrapping_mul""###,
        r###""u32wrapping_sub""###,
        r###""u32xor""###,
        r###""while""###,
        r###""xor""###,
        r###"EOF"###,
        r###"bare_ident"###,
        r###"bin_value"###,
        r###"comment"###,
        r###"const_ident"###,
        r###"doc_comment"###,
        r###"hex_value"###,
        r###"quoted_ident"###,
        r###"quoted_string"###,
        r###"uint"###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        '__1,
        '__2,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, '__1, '__2>
    where 
    {
        source_file: &'__1 Arc<SourceFile>,
        interned: &'__2 mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __phantom: core::marker::PhantomData<(&'input ())>,
    }
    impl<'input, '__1, '__2> __state_machine::ParserDefinition for __StateMachine<'input, '__1, '__2>
    where 
    {
        type Location = u32;
        type Error = ParsingError;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Vec<Form>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 182 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.source_file,
                self.interned,
                self._marker,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&())>)
        }
    }
    fn __token_to_integer<
        'input,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<usize>
    {
        #[warn(unused_variables)]
        match __token {
            Token::Bang if true => Some(0),
            Token::Lparen if true => Some(1),
            Token::Rparen if true => Some(2),
            Token::Star if true => Some(3),
            Token::Plus if true => Some(4),
            Token::Comma if true => Some(5),
            Token::Minus if true => Some(6),
            Token::Rstab if true => Some(7),
            Token::Slash if true => Some(8),
            Token::SlashSlash if true => Some(9),
            Token::ColonColon if true => Some(10),
            Token::Equal if true => Some(11),
            Token::Dot if true => Some(12),
            Token::At if true => Some(13),
            Token::Lbracket if true => Some(14),
            Token::Rbracket if true => Some(15),
            Token::Add if true => Some(16),
            Token::Adv if true => Some(17),
            Token::AdvMap if true => Some(18),
            Token::InsertHdword if true => Some(19),
            Token::InsertHdwordWithDomain if true => Some(20),
            Token::InsertHperm if true => Some(21),
            Token::InsertMem if true => Some(22),
            Token::AdvLoadw if true => Some(23),
            Token::AdvPipe if true => Some(24),
            Token::AdvPush if true => Some(25),
            Token::AdvStack if true => Some(26),
            Token::PushMapval if true => Some(27),
            Token::PushMapvaln if true => Some(28),
            Token::PushMtnode if true => Some(29),
            Token::PushSmtpeek if true => Some(30),
            Token::PushU64Div if true => Some(31),
            Token::PushFalconDiv if true => Some(32),
            Token::And if true => Some(33),
            Token::ArithmeticCircuitEval if true => Some(34),
            Token::Assert if true => Some(35),
            Token::Assertz if true => Some(36),
            Token::AssertEq if true => Some(37),
            Token::AssertEqw if true => Some(38),
            Token::Begin if true => Some(39),
            Token::Caller if true => Some(40),
            Token::Call if true => Some(41),
            Token::Cdrop if true => Some(42),
            Token::Cdropw if true => Some(43),
            Token::Clk if true => Some(44),
            Token::Const if true => Some(45),
            Token::Cswap if true => Some(46),
            Token::Cswapw if true => Some(47),
            Token::Debug if true => Some(48),
            Token::Breakpoint if true => Some(49),
            Token::Div if true => Some(50),
            Token::Drop if true => Some(51),
            Token::Dropw if true => Some(52),
            Token::Dup if true => Some(53),
            Token::Dupw if true => Some(54),
            Token::Dynexec if true => Some(55),
            Token::Dyncall if true => Some(56),
            Token::Else if true => Some(57),
            Token::Emit if true => Some(58),
            Token::End if true => Some(59),
            Token::Eq if true => Some(60),
            Token::Eqw if true => Some(61),
            Token::Ext2Add if true => Some(62),
            Token::Ext2Div if true => Some(63),
            Token::Ext2Inv if true => Some(64),
            Token::Ext2Mul if true => Some(65),
            Token::Ext2Neg if true => Some(66),
            Token::Ext2Sub if true => Some(67),
            Token::Err if true => Some(68),
            Token::Exec if true => Some(69),
            Token::Exp if true => Some(70),
            Token::ExpU if true => Some(71),
            Token::Export if true => Some(72),
            Token::False if true => Some(73),
            Token::FriExt2Fold4 if true => Some(74),
            Token::Gt if true => Some(75),
            Token::Gte if true => Some(76),
            Token::Hash if true => Some(77),
            Token::HasMapkey if true => Some(78),
            Token::Hperm if true => Some(79),
            Token::Hmerge if true => Some(80),
            Token::If if true => Some(81),
            Token::ILog2 if true => Some(82),
            Token::Inv if true => Some(83),
            Token::IsOdd if true => Some(84),
            Token::Local if true => Some(85),
            Token::Locaddr if true => Some(86),
            Token::LocLoad if true => Some(87),
            Token::LocLoadw if true => Some(88),
            Token::LocStore if true => Some(89),
            Token::LocStorew if true => Some(90),
            Token::Lt if true => Some(91),
            Token::Lte if true => Some(92),
            Token::Mem if true => Some(93),
            Token::MemLoad if true => Some(94),
            Token::MemLoadw if true => Some(95),
            Token::MemStore if true => Some(96),
            Token::MemStorew if true => Some(97),
            Token::MemStream if true => Some(98),
            Token::Movdn if true => Some(99),
            Token::Movdnw if true => Some(100),
            Token::Movup if true => Some(101),
            Token::Movupw if true => Some(102),
            Token::MtreeGet if true => Some(103),
            Token::MtreeMerge if true => Some(104),
            Token::MtreeSet if true => Some(105),
            Token::MtreeVerify if true => Some(106),
            Token::Mul if true => Some(107),
            Token::Neg if true => Some(108),
            Token::Neq if true => Some(109),
            Token::Not if true => Some(110),
            Token::Nop if true => Some(111),
            Token::Or if true => Some(112),
            Token::Padw if true => Some(113),
            Token::Pow2 if true => Some(114),
            Token::Proc if true => Some(115),
            Token::Procref if true => Some(116),
            Token::Push if true => Some(117),
            Token::HornerBase if true => Some(118),
            Token::HornerExt if true => Some(119),
            Token::Repeat if true => Some(120),
            Token::Sdepth if true => Some(121),
            Token::Stack if true => Some(122),
            Token::Sub if true => Some(123),
            Token::Swap if true => Some(124),
            Token::Swapw if true => Some(125),
            Token::Swapdw if true => Some(126),
            Token::Syscall if true => Some(127),
            Token::Trace if true => Some(128),
            Token::True if true => Some(129),
            Token::Use if true => Some(130),
            Token::U32And if true => Some(131),
            Token::U32Assert if true => Some(132),
            Token::U32Assert2 if true => Some(133),
            Token::U32Assertw if true => Some(134),
            Token::U32Cast if true => Some(135),
            Token::U32Div if true => Some(136),
            Token::U32Divmod if true => Some(137),
            Token::U32Gt if true => Some(138),
            Token::U32Gte if true => Some(139),
            Token::U32Lt if true => Some(140),
            Token::U32Lte if true => Some(141),
            Token::U32Max if true => Some(142),
            Token::U32Min if true => Some(143),
            Token::U32Mod if true => Some(144),
            Token::U32Not if true => Some(145),
            Token::U32Or if true => Some(146),
            Token::U32OverflowingAdd if true => Some(147),
            Token::U32OverflowingAdd3 if true => Some(148),
            Token::U32OverflowingMadd if true => Some(149),
            Token::U32OverflowingMul if true => Some(150),
            Token::U32OverflowingSub if true => Some(151),
            Token::U32Popcnt if true => Some(152),
            Token::U32Clz if true => Some(153),
            Token::U32Ctz if true => Some(154),
            Token::U32Clo if true => Some(155),
            Token::U32Cto if true => Some(156),
            Token::U32Rotl if true => Some(157),
            Token::U32Rotr if true => Some(158),
            Token::U32Shl if true => Some(159),
            Token::U32Shr if true => Some(160),
            Token::U32Split if true => Some(161),
            Token::U32Test if true => Some(162),
            Token::U32Testw if true => Some(163),
            Token::U32WrappingAdd if true => Some(164),
            Token::U32WrappingAdd3 if true => Some(165),
            Token::U32WrappingMadd if true => Some(166),
            Token::U32WrappingMul if true => Some(167),
            Token::U32WrappingSub if true => Some(168),
            Token::U32Xor if true => Some(169),
            Token::While if true => Some(170),
            Token::Xor if true => Some(171),
            Token::Eof if true => Some(172),
            Token::Ident(_) if true => Some(173),
            Token::BinValue(_) if true => Some(174),
            Token::Comment if true => Some(175),
            Token::ConstantIdent(_) if true => Some(176),
            Token::DocComment(_) if true => Some(177),
            Token::HexValue(_) if true => Some(178),
            Token::QuotedIdent(_) if true => Some(179),
            Token::QuotedString(_) if true => Some(180),
            Token::Int(_) if true => Some(181),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127 | 128 | 129 | 130 | 131 | 132 | 133 | 134 | 135 | 136 | 137 | 138 | 139 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 147 | 148 | 149 | 150 | 151 | 152 | 153 | 154 | 155 | 156 | 157 | 158 | 159 | 160 | 161 | 162 | 163 | 164 | 165 | 166 | 167 | 168 | 169 | 170 | 171 | 172 | 175 => __Symbol::Variant0(__token),
            173 | 176 | 179 | 180 => match __token {
                Token::Ident(__tok0) | Token::ConstantIdent(__tok0) | Token::QuotedIdent(__tok0) | Token::QuotedString(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            174 => match __token {
                Token::BinValue(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            177 => match __token {
                Token::DocComment(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            178 => match __token {
                Token::HexValue(__tok0) if true => __Symbol::Variant4(__tok0),
                _ => unreachable!(),
            },
            181 => match __token {
                Token::Int(__tok0) if true => __Symbol::Variant5(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        '__1,
        '__2,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, '__1, '__2>>
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 3,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 5,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 7,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 11,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 12,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 14,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 14,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 17,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 18,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 20,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 21,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 21,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 22,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 23,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 24,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 24,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 25,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 25,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 26,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 26,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 26,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 26,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 26,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 26,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 26,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 26,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 29,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 29,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 29,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 29,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 29,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 29,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 29,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 29,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 32,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 35,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 38,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 39,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 40,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 40,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 43,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 45,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 45,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 45,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 47,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 49,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            194 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            195 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            196 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            197 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            198 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            199 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            200 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            201 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            202 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            203 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            204 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            205 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            206 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            207 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            208 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            209 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            210 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            211 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            212 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            213 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            214 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            215 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            216 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            217 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            218 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            219 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            220 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            221 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            222 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            223 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            224 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            225 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            226 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            227 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            228 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            229 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            230 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            231 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            232 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            233 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            234 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            235 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            236 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 52,
                }
            }
            237 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 53,
                }
            }
            238 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 54,
                }
            }
            239 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 54,
                }
            }
            240 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 54,
                }
            }
            241 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 54,
                }
            }
            242 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 54,
                }
            }
            243 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 54,
                }
            }
            244 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 54,
                }
            }
            245 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 54,
                }
            }
            246 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 55,
                }
            }
            247 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 55,
                }
            }
            248 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 56,
                }
            }
            249 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 56,
                }
            }
            250 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            251 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            252 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 58,
                }
            }
            253 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 58,
                }
            }
            254 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            255 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 59,
                }
            }
            256 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            257 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            258 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            259 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            260 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 61,
                }
            }
            261 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            262 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 62,
                }
            }
            263 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            264 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            265 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            266 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            267 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            268 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            269 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 66,
                }
            }
            270 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 66,
                }
            }
            271 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 66,
                }
            }
            272 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            273 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            274 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            275 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            276 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            277 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            278 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            279 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            280 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            281 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            282 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            283 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            284 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            285 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            286 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            287 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            288 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            289 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            290 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            291 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            292 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            293 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            294 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            295 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            296 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            297 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            298 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 67,
                }
            }
            299 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            300 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            301 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            302 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            303 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            304 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            305 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            306 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            307 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            308 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            309 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 67,
                }
            }
            310 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            311 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            312 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            313 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            314 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            315 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            316 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            317 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            318 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            319 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            320 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            321 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            322 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            323 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            324 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            325 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            326 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            327 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            328 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            329 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            330 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            331 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            332 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            333 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            334 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            335 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            336 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            337 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            338 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            339 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            340 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            341 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 67,
                }
            }
            342 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            343 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            344 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            345 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            346 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            347 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            348 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            349 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            350 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            351 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            352 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            353 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            354 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            355 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            356 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            357 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            358 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            359 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            360 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            361 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            362 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            363 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            364 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            365 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            366 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            367 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            368 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            369 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            370 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            371 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            372 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            373 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            374 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            375 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            376 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            377 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            378 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            379 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            380 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 67,
                }
            }
            381 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            382 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            383 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            384 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            385 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            386 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            387 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            388 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            389 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            390 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            391 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            392 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            393 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            394 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            395 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            396 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            397 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            398 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            399 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            400 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            401 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            402 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            403 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            404 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            405 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            406 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            407 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            408 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            409 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            410 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            411 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            412 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            413 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            414 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            415 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            416 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            417 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            418 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            419 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            420 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            421 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            422 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            423 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            424 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            425 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            426 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            427 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            428 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            429 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            430 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            431 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            432 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            433 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            434 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            435 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            436 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            437 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 68,
                }
            }
            438 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            439 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            440 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            441 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            442 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            443 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            444 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            445 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            446 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            447 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            448 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            449 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            450 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            451 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            452 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            453 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            454 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            455 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            456 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            457 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            458 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            459 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            460 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            461 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            462 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            463 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            464 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            465 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            466 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 69,
                }
            }
            467 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            468 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            469 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            470 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 70,
                }
            }
            471 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 70,
                }
            }
            472 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            473 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            474 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            475 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            476 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            477 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            478 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            479 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            480 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            481 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            482 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            483 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            484 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            485 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            486 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            487 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            488 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            489 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            490 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            491 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            492 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            493 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            494 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 72,
                }
            }
            495 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            496 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            497 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            498 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            499 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            500 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            501 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            502 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            503 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            504 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            505 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            506 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            507 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 73,
                }
            }
            508 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            509 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            510 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            511 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            512 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            513 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            514 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            515 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            516 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            517 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            518 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            519 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            520 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            521 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            522 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            523 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            524 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            525 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            526 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            527 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            528 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            529 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            530 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            531 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            532 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            533 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            534 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 74,
                }
            }
            535 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            536 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            537 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            538 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            539 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            540 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            541 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            542 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            543 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            544 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            545 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 74,
                }
            }
            546 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            547 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            548 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            549 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            550 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            551 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            552 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            553 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            554 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            555 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            556 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            557 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            558 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            559 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            560 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            561 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            562 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            563 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            564 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            565 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            566 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            567 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            568 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            569 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            570 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            571 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            572 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            573 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            574 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            575 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            576 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            577 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 74,
                }
            }
            578 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            579 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            580 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            581 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            582 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            583 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            584 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            585 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            586 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            587 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            588 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            589 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            590 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            591 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            592 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            593 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            594 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            595 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            596 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            597 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            598 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            599 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            600 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            601 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            602 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            603 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            604 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            605 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            606 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            607 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            608 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            609 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            610 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            611 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            612 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            613 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            614 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            615 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            616 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 74,
                }
            }
            617 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            618 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            619 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            620 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            621 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            622 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            623 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            624 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            625 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            626 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            627 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            628 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            629 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            630 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            631 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            632 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            633 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            634 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            635 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            636 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            637 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            638 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            639 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            640 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            641 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            642 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            643 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            644 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            645 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            646 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            647 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            648 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            649 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            650 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            651 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            652 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            653 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            654 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            655 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            656 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            657 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            658 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            659 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            660 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            661 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            662 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            663 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            664 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            665 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            666 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            667 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            668 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            669 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            670 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            671 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            672 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            673 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            674 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            675 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            676 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            677 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 76,
                }
            }
            678 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            679 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 77,
                }
            }
            680 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 77,
                }
            }
            681 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            682 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            683 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            684 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            685 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            686 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            687 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            688 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            689 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            690 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            691 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            692 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            693 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            694 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            695 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            696 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            697 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            698 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            699 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            700 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            701 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            702 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            703 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            704 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            705 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            706 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            707 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            708 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            709 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            710 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            711 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            712 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            713 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            714 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            715 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            716 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            717 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            718 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            719 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            720 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            721 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            722 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            723 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            724 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            725 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            726 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            727 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            728 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            729 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            730 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            731 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            732 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            733 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            734 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            735 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            736 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            737 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            738 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            739 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            740 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            741 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            742 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            743 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            744 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            745 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            746 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            747 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            748 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            749 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            750 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            751 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            752 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            753 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            754 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            755 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            756 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            757 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            758 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            759 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            760 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            761 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            762 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            763 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            764 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            765 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            766 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            767 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            768 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            769 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            770 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            771 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            772 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            773 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            774 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            775 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            776 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            777 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            778 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 78,
                }
            }
            779 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            780 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            781 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            782 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 80,
                }
            }
            783 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 80,
                }
            }
            784 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 81,
                }
            }
            785 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 81,
                }
            }
            786 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 82,
                }
            }
            787 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 82,
                }
            }
            788 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 82,
                }
            }
            789 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 83,
                }
            }
            790 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 83,
                }
            }
            791 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 83,
                }
            }
            792 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 84,
                }
            }
            793 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 84,
                }
            }
            794 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 84,
                }
            }
            795 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 85,
                }
            }
            796 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 85,
                }
            }
            797 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 85,
                }
            }
            798 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 86,
                }
            }
            799 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 86,
                }
            }
            800 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 86,
                }
            }
            801 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 87,
                }
            }
            802 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 87,
                }
            }
            803 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 88,
                }
            }
            804 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 88,
                }
            }
            805 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 88,
                }
            }
            806 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 88,
                }
            }
            807 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            808 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 88,
                }
            }
            809 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            810 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 88,
                }
            }
            811 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 89,
                }
            }
            812 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 89,
                }
            }
            813 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 89,
                }
            }
            814 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 89,
                }
            }
            815 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 89,
                }
            }
            816 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            817 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            818 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            819 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            820 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            821 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 91,
                }
            }
            822 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 91,
                }
            }
            823 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            824 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 93,
                }
            }
            825 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            826 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            827 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            828 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            829 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            830 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            831 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            832 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            833 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            834 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            835 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            836 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            837 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            838 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            839 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            840 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            841 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            842 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            843 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            844 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            845 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            846 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            847 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            848 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            849 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            850 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            851 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            852 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            853 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            854 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 94,
                }
            }
            855 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            856 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            857 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            858 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            859 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            860 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            861 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            862 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            863 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            864 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            865 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 94,
                }
            }
            866 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            867 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            868 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            869 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            870 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            871 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            872 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            873 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            874 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            875 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            876 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            877 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            878 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            879 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            880 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            881 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            882 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            883 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            884 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            885 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            886 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            887 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            888 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            889 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            890 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            891 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            892 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            893 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            894 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            895 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            896 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            897 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 94,
                }
            }
            898 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            899 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            900 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            901 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            902 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            903 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            904 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            905 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            906 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            907 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            908 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            909 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            910 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            911 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            912 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            913 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            914 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            915 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            916 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            917 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            918 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            919 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            920 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            921 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            922 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            923 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            924 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            925 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            926 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            927 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            928 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            929 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            930 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            931 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            932 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            933 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            934 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            935 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            936 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 94,
                }
            }
            937 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            938 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            939 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            940 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            941 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            942 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            943 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            944 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            945 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            946 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            947 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            948 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            949 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            950 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            951 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            952 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            953 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            954 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            955 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            956 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            957 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            958 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            959 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            960 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            961 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            962 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            963 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            964 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            965 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            966 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            967 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            968 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            969 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            970 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            971 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            972 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            973 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            974 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            975 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            976 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            977 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            978 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            979 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            980 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            981 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            982 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            983 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            984 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            985 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            986 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            987 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            988 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            989 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            990 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            991 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            992 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            993 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            994 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 95,
                }
            }
            995 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 95,
                }
            }
            996 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            997 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            998 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            999 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1000 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1001 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1002 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1003 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1004 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1005 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1006 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1007 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1008 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1009 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1010 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1011 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1012 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1013 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1014 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1015 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1016 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1017 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1018 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1019 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1020 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1021 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1022 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1023 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1024 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1025 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1026 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1027 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1028 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1029 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1030 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1031 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1032 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1033 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1034 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1035 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1036 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1037 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1038 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1039 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1040 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1041 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1042 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1043 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1044 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1045 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1046 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1047 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1048 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1049 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1050 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1051 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1052 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1053 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1054 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1055 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1056 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1057 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1058 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1059 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1060 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1061 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1062 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1063 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1064 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1065 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1066 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1067 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1068 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1069 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1070 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1071 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1072 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1073 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1074 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1075 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1076 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1077 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1078 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1079 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1080 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1081 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1082 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1083 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1084 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1085 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1086 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1087 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1088 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1089 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1090 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1091 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1092 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1093 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1094 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1095 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1096 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1097 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1098 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1099 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            1129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            1130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            1131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 99,
                }
            }
            1132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 99,
                }
            }
            1133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 99,
                }
            }
            1134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 99,
                }
            }
            1135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 100,
                }
            }
            1136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 100,
                }
            }
            1137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 100,
                }
            }
            1138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 100,
                }
            }
            1139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 100,
                }
            }
            1140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 100,
                }
            }
            1141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 100,
                }
            }
            1142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 100,
                }
            }
            1143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 100,
                }
            }
            1144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 100,
                }
            }
            1145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 101,
                }
            }
            1146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 102,
                }
            }
            1147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 102,
                }
            }
            1148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 102,
                }
            }
            1149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 102,
                }
            }
            1150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            1151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            1152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            1153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 104,
                }
            }
            1154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 104,
                }
            }
            1155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 105,
                }
            }
            1156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 105,
                }
            }
            1157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 105,
                }
            }
            1158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 105,
                }
            }
            1159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 105,
                }
            }
            1160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 105,
                }
            }
            1161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 105,
                }
            }
            1162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 105,
                }
            }
            1163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 106,
                }
            }
            1164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 107,
                }
            }
            1165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 107,
                }
            }
            1166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 108,
                }
            }
            1167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 109,
                }
            }
            1168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 110,
                }
            }
            1169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 111,
                }
            }
            1170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 112,
                }
            }
            1181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 113,
                }
            }
            1182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 113,
                }
            }
            1183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 113,
                }
            }
            1184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 113,
                }
            }
            1185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 113,
                }
            }
            1186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 114,
                }
            }
            1187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 115,
                }
            }
            1188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 115,
                }
            }
            1189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 115,
                }
            }
            1190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 116,
                }
            }
            1191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 117,
                }
            }
            1192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 117,
                }
            }
            1193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 118,
                }
            }
            1194 => __state_machine::SimulatedReduce::Accept,
            1195 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 120,
                }
            }
            1196 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 120,
                }
            }
            _ => panic!("invalid reduction index {__reduce_index}",)
        }
    }
    pub struct FormsParser {
        _priv: (),
    }

    impl Default for FormsParser { fn default() -> Self { Self::new() } }
    impl FormsParser {
        pub fn new() -> FormsParser {
            FormsParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            __TOKEN: __ToTriple<'input, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            source_file: &Arc<SourceFile>,
            interned: &mut BTreeSet<Arc<str>>,
            _marker: PhantomData<&'input str>,
            __tokens0: __TOKENS,
        ) -> Result<Vec<Form>, __lalrpop_util::ParseError<u32, Token<'input>, ParsingError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    source_file,
                    interned,
                    _marker,
                    __phantom: core::marker::PhantomData::<(&())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        '__1,
        '__2,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> bool
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __action: i16,
        __lookahead_start: Option<&u32>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> Option<Result<Vec<Form>,__lalrpop_util::ParseError<u32, Token<'input>, ParsingError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                // ("->" <BareIdent>) = "->", bare_ident => ActionFn(646);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action646::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (2, 0)
            }
            1 => {
                __reduce1(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            2 => {
                // ("->" <BareIdent>)? = "->", bare_ident => ActionFn(664);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action664::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant7(__nt), __end));
                (2, 1)
            }
            3 => {
                __reduce3(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            4 => {
                __reduce4(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            5 => {
                __reduce5(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            6 => {
                __reduce6(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            7 => {
                __reduce7(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            8 => {
                __reduce8(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            9 => {
                __reduce9(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            10 => {
                __reduce10(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            11 => {
                // (<BareIdent> "::") = bare_ident, "::" => ActionFn(648);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action648::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (2, 6)
            }
            12 => {
                __reduce12(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            13 => {
                __reduce13(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            14 => {
                __reduce14(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            15 => {
                // (<BareIdent> "::")+ = bare_ident, "::" => ActionFn(685);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action685::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (2, 8)
            }
            16 => {
                __reduce16(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            17 => {
                // (<BareIdent> "::")+ = (<BareIdent> "::")+, bare_ident, "::" => ActionFn(687);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action687::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 8)
            }
            18 => {
                __reduce18(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            19 => {
                // (<BareIdent> "::")? = bare_ident, "::" => ActionFn(689);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action689::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant7(__nt), __end));
                (2, 9)
            }
            20 => {
                __reduce20(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            21 => {
                __reduce21(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            22 => {
                __reduce22(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            23 => {
                __reduce23(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            24 => {
                __reduce24(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            25 => {
                __reduce25(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            26 => {
                __reduce26(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            27 => {
                __reduce27(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            28 => {
                __reduce28(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            29 => {
                __reduce29(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            30 => {
                __reduce30(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            31 => {
                __reduce31(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            32 => {
                __reduce32(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            33 => {
                __reduce33(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            34 => {
                __reduce34(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            35 => {
                __reduce35(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            36 => {
                __reduce36(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            37 => {
                __reduce37(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            38 => {
                __reduce38(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            39 => {
                __reduce39(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            40 => {
                __reduce40(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            41 => {
                __reduce41(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            42 => {
                __reduce42(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            43 => {
                __reduce43(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            44 => {
                // AdvMap = "adv_map", ".", const_ident, MaybeAdvMapKey, "=", "[", Felt, "]" => ActionFn(754);
                assert!(__symbols.len() >= 8);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant13(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant48(__symbols);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = match super::__action754::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (8, 24)
            }
            45 => {
                // AdvMap = "adv_map", ".", const_ident, MaybeAdvMapKey, "=", "[", (<Felt> ",")+, Felt, "]" => ActionFn(755);
                assert!(__symbols.len() >= 9);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant14(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant48(__symbols);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = match super::__action755::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (9, 24)
            }
            46 => {
                // AliasDef = "export", ".", MaybeQualifiedProcedurePath, "->", ProcedureName => ActionFn(670);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant8(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant46(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action670::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (5, 25)
            }
            47 => {
                // AliasDef = "export", ".", MaybeQualifiedProcedurePath => ActionFn(671);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant46(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action671::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (3, 25)
            }
            48 => {
                // Annotation = "@", bare_ident, "(", MetaExpr, ")" => ActionFn(730);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant17(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action730::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 26)
            }
            49 => {
                // Annotation = "@", bare_ident, "(", (<MetaExpr> ",")+, MetaExpr, ")" => ActionFn(731);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant17(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action731::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (6, 26)
            }
            50 => {
                __reduce50(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            51 => {
                __reduce51(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            52 => {
                // Annotation = "@", bare_ident, "(", MetaKeyValue, ")" => ActionFn(734);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action734::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 26)
            }
            53 => {
                // Annotation = "@", bare_ident, "(", (<MetaKeyValue> ",")+, MetaKeyValue, ")" => ActionFn(735);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant20(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action735::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (6, 26)
            }
            54 => {
                // Annotation = "@", OpcodeName, "(", MetaKeyValue, ")" => ActionFn(736);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant6(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action736::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 26)
            }
            55 => {
                // Annotation = "@", OpcodeName, "(", (<MetaKeyValue> ",")+, MetaKeyValue, ")" => ActionFn(737);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant20(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant6(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action737::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (6, 26)
            }
            56 => {
                // Annotation = "@", bare_ident => ActionFn(738);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action738::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (2, 26)
            }
            57 => {
                __reduce57(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            58 => {
                __reduce58(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            59 => {
                __reduce59(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            60 => {
                __reduce60(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            61 => {
                __reduce61(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            62 => {
                // Attribute = bare_ident, "(", MetaExpr, ")" => ActionFn(726);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action726::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 29)
            }
            63 => {
                // Attribute = bare_ident, "(", (<MetaExpr> ",")+, MetaExpr, ")" => ActionFn(727);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant17(__symbols);
                let __sym2 = __pop_Variant18(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action727::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 29)
            }
            64 => {
                __reduce64(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            65 => {
                __reduce65(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            66 => {
                // Attribute = bare_ident, "(", MetaKeyValue, ")" => ActionFn(722);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action722::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 29)
            }
            67 => {
                // Attribute = bare_ident, "(", (<MetaKeyValue> ",")+, MetaKeyValue, ")" => ActionFn(723);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant20(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action723::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 29)
            }
            68 => {
                // Attribute = OpcodeName, "(", MetaKeyValue, ")" => ActionFn(724);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action724::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 29)
            }
            69 => {
                // Attribute = OpcodeName, "(", (<MetaKeyValue> ",")+, MetaKeyValue, ")" => ActionFn(725);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant20(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action725::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 29)
            }
            70 => {
                // Attribute = bare_ident => ActionFn(654);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action654::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (1, 29)
            }
            71 => {
                __reduce71(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            72 => {
                // BareIdent = bare_ident => ActionFn(563);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action563::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 30)
            }
            73 => {
                __reduce73(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            74 => {
                // BareProcedureName = bare_ident => ActionFn(656);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action656::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (1, 31)
            }
            75 => {
                __reduce75(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            76 => {
                // Begin = "begin", Op+, "end" => ActionFn(1505);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant56(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1505::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (3, 32)
            }
            77 => {
                // BitSize = U8 => ActionFn(221);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action221::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (1, 33)
            }
            78 => {
                // Block = Op+ => ActionFn(1506);
                let __sym0 = __pop_Variant56(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1506::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 34)
            }
            79 => {
                __reduce79(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            80 => {
                __reduce80(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            81 => {
                __reduce81(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            82 => {
                __reduce82(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            83 => {
                __reduce83(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            84 => {
                __reduce84(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            85 => {
                __reduce85(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            86 => {
                __reduce86(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            87 => {
                __reduce87(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            88 => {
                __reduce88(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            89 => {
                __reduce89(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            90 => {
                __reduce90(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            91 => {
                __reduce91(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            92 => {
                // Const = "const", ".", const_ident, "=", ConstantExpr => ActionFn(756);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant34(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action756::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 41)
            }
            93 => {
                // ConstantExpr = ConstantExpr, "+", ConstantExpr100 => ActionFn(567);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant34(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action567::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (3, 42)
            }
            94 => {
                // ConstantExpr = ConstantExpr, "-", ConstantExpr100 => ActionFn(568);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant34(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action568::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (3, 42)
            }
            95 => {
                __reduce95(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            96 => {
                // ConstantExpr100 = ConstantExpr100, "*", Term => ActionFn(569);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant34(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action569::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (3, 43)
            }
            97 => {
                // ConstantExpr100 = ConstantExpr100, "/", Term => ActionFn(570);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant34(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action570::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (3, 43)
            }
            98 => {
                // ConstantExpr100 = ConstantExpr100, "//", Term => ActionFn(571);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant34(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant34(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action571::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (3, 43)
            }
            99 => {
                __reduce99(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            100 => {
                // ConstantName = const_ident => ActionFn(572);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action572::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 44)
            }
            101 => {
                __reduce101(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            102 => {
                __reduce102(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            103 => {
                // Debug = "debug", ".", "stack", ".", const_ident => ActionFn(878);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action878::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 45)
            }
            104 => {
                __reduce104(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            105 => {
                __reduce105(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            106 => {
                // Debug = "debug", ".", "mem", ".", U32, ".", const_ident => ActionFn(768);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action768::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            107 => {
                // Debug = "debug", ".", "mem", ".", const_ident, ".", U32 => ActionFn(769);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action769::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            108 => {
                // Debug = "debug", ".", "mem", ".", const_ident, ".", const_ident => ActionFn(770);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action770::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            109 => {
                __reduce109(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            110 => {
                // Debug = "debug", ".", "mem", ".", const_ident => ActionFn(802);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action802::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 45)
            }
            111 => {
                __reduce111(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            112 => {
                __reduce112(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            113 => {
                // Debug = "debug", ".", "local", ".", U16, ".", const_ident => ActionFn(780);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action780::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            114 => {
                // Debug = "debug", ".", "local", ".", const_ident, ".", U16 => ActionFn(781);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant62(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action781::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            115 => {
                // Debug = "debug", ".", "local", ".", const_ident, ".", const_ident => ActionFn(782);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action782::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 45)
            }
            116 => {
                __reduce116(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            117 => {
                // Debug = "debug", ".", "local", ".", const_ident => ActionFn(796);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action796::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 45)
            }
            118 => {
                __reduce118(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            119 => {
                __reduce119(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            120 => {
                // Debug = "debug", ".", "adv_stack", ".", const_ident => ActionFn(799);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action799::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 45)
            }
            121 => {
                __reduce121(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            122 => {
                __reduce122(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            123 => {
                // Debug = "emit", ".", const_ident => ActionFn(772);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action772::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 45)
            }
            124 => {
                __reduce124(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            125 => {
                // Debug = "trace", ".", const_ident => ActionFn(774);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action774::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 45)
            }
            126 => {
                // Doc = doc_comment => ActionFn(573);
                let __sym0 = __pop_Variant3(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action573::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (1, 46)
            }
            127 => {
                __reduce127(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            128 => {
                __reduce128(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            129 => {
                // Felt = IntValue => ActionFn(574);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action574::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (1, 48)
            }
            130 => {
                __reduce130(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            131 => {
                // FoldableInstWithFeltImmediate = "eq", ".", const_ident => ActionFn(912);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action912::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            132 => {
                __reduce132(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            133 => {
                __reduce133(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            134 => {
                // FoldableInstWithFeltImmediate = "neq", ".", const_ident => ActionFn(915);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action915::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            135 => {
                __reduce135(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            136 => {
                __reduce136(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            137 => {
                // FoldableInstWithFeltImmediate = "lt", ".", const_ident => ActionFn(918);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action918::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            138 => {
                __reduce138(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            139 => {
                __reduce139(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            140 => {
                // FoldableInstWithFeltImmediate = "lte", ".", const_ident => ActionFn(921);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action921::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            141 => {
                __reduce141(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            142 => {
                __reduce142(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            143 => {
                // FoldableInstWithFeltImmediate = "gt", ".", const_ident => ActionFn(924);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action924::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            144 => {
                __reduce144(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            145 => {
                __reduce145(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            146 => {
                // FoldableInstWithFeltImmediate = "gte", ".", const_ident => ActionFn(927);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action927::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            147 => {
                __reduce147(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            148 => {
                __reduce148(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            149 => {
                // FoldableInstWithFeltImmediate = "add", ".", const_ident => ActionFn(930);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action930::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            150 => {
                __reduce150(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            151 => {
                __reduce151(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            152 => {
                // FoldableInstWithFeltImmediate = "sub", ".", const_ident => ActionFn(933);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action933::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            153 => {
                __reduce153(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            154 => {
                __reduce154(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            155 => {
                // FoldableInstWithFeltImmediate = "mul", ".", const_ident => ActionFn(936);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action936::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            156 => {
                __reduce156(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            157 => {
                // FoldableInstWithFeltImmediate = "div", ".", Felt => ActionFn(938);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action938::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            158 => {
                // FoldableInstWithFeltImmediate = "div", ".", const_ident => ActionFn(939);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action939::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 49)
            }
            159 => {
                // FoldableInstWithFeltImmediate = "div" => ActionFn(940);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action940::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 49)
            }
            160 => {
                // FoldableInstWithU32Immediate = "u32div", ".", U32 => ActionFn(804);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action804::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            161 => {
                // FoldableInstWithU32Immediate = "u32div", ".", const_ident => ActionFn(805);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action805::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            162 => {
                // FoldableInstWithU32Immediate = "u32div" => ActionFn(806);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action806::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 50)
            }
            163 => {
                // FoldableInstWithU32Immediate = "u32divmod", ".", U32 => ActionFn(807);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action807::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            164 => {
                // FoldableInstWithU32Immediate = "u32divmod", ".", const_ident => ActionFn(808);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action808::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            165 => {
                // FoldableInstWithU32Immediate = "u32divmod" => ActionFn(809);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action809::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 50)
            }
            166 => {
                // FoldableInstWithU32Immediate = "u32mod", ".", U32 => ActionFn(810);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action810::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            167 => {
                // FoldableInstWithU32Immediate = "u32mod", ".", const_ident => ActionFn(811);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action811::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            168 => {
                // FoldableInstWithU32Immediate = "u32mod" => ActionFn(812);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action812::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 50)
            }
            169 => {
                __reduce169(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            170 => {
                // FoldableInstWithU32Immediate = "u32and", ".", const_ident => ActionFn(814);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action814::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            171 => {
                __reduce171(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            172 => {
                __reduce172(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            173 => {
                // FoldableInstWithU32Immediate = "u32or", ".", const_ident => ActionFn(817);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action817::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            174 => {
                __reduce174(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            175 => {
                __reduce175(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            176 => {
                // FoldableInstWithU32Immediate = "u32xor", ".", const_ident => ActionFn(820);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action820::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            177 => {
                __reduce177(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            178 => {
                __reduce178(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            179 => {
                // FoldableInstWithU32Immediate = "u32not", ".", const_ident => ActionFn(823);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action823::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            180 => {
                __reduce180(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            181 => {
                __reduce181(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            182 => {
                // FoldableInstWithU32Immediate = "u32wrapping_add", ".", const_ident => ActionFn(826);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action826::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            183 => {
                __reduce183(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            184 => {
                __reduce184(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            185 => {
                // FoldableInstWithU32Immediate = "u32wrapping_sub", ".", const_ident => ActionFn(829);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action829::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            186 => {
                __reduce186(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            187 => {
                __reduce187(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            188 => {
                // FoldableInstWithU32Immediate = "u32wrapping_mul", ".", const_ident => ActionFn(832);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action832::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            189 => {
                __reduce189(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            190 => {
                __reduce190(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            191 => {
                // FoldableInstWithU32Immediate = "u32overflowing_add", ".", const_ident => ActionFn(835);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action835::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            192 => {
                __reduce192(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            193 => {
                __reduce193(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            194 => {
                // FoldableInstWithU32Immediate = "u32overflowing_sub", ".", const_ident => ActionFn(838);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action838::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            195 => {
                __reduce195(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            196 => {
                __reduce196(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            197 => {
                // FoldableInstWithU32Immediate = "u32overflowing_mul", ".", const_ident => ActionFn(841);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action841::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            198 => {
                __reduce198(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            199 => {
                __reduce199(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            200 => {
                // FoldableInstWithU32Immediate = "u32shl", ".", const_ident => ActionFn(979);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action979::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            201 => {
                __reduce201(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            202 => {
                __reduce202(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            203 => {
                // FoldableInstWithU32Immediate = "u32shr", ".", const_ident => ActionFn(982);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action982::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            204 => {
                __reduce204(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            205 => {
                __reduce205(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            206 => {
                // FoldableInstWithU32Immediate = "u32rotl", ".", const_ident => ActionFn(985);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action985::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            207 => {
                __reduce207(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            208 => {
                __reduce208(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            209 => {
                // FoldableInstWithU32Immediate = "u32rotr", ".", const_ident => ActionFn(988);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action988::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            210 => {
                __reduce210(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            211 => {
                __reduce211(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            212 => {
                // FoldableInstWithU32Immediate = "u32lt", ".", const_ident => ActionFn(844);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action844::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            213 => {
                __reduce213(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            214 => {
                __reduce214(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            215 => {
                // FoldableInstWithU32Immediate = "u32lte", ".", const_ident => ActionFn(847);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action847::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            216 => {
                __reduce216(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            217 => {
                __reduce217(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            218 => {
                // FoldableInstWithU32Immediate = "u32gt", ".", const_ident => ActionFn(850);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action850::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            219 => {
                __reduce219(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            220 => {
                __reduce220(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            221 => {
                // FoldableInstWithU32Immediate = "u32gte", ".", const_ident => ActionFn(853);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action853::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            222 => {
                __reduce222(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            223 => {
                __reduce223(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            224 => {
                // FoldableInstWithU32Immediate = "u32min", ".", const_ident => ActionFn(856);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action856::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            225 => {
                __reduce225(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            226 => {
                __reduce226(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            227 => {
                // FoldableInstWithU32Immediate = "u32max", ".", const_ident => ActionFn(859);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action859::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 50)
            }
            228 => {
                __reduce228(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            229 => {
                __reduce229(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            230 => {
                __reduce230(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            231 => {
                __reduce231(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            232 => {
                __reduce232(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            233 => {
                __reduce233(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            234 => {
                __reduce234(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            235 => {
                __reduce235(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            236 => {
                __reduce236(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            237 => {
                __reduce237(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            238 => {
                __reduce238(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            239 => {
                __reduce239(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            240 => {
                __reduce240(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            241 => {
                __reduce241(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            242 => {
                __reduce242(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            243 => {
                __reduce243(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            244 => {
                __reduce244(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            245 => {
                __reduce245(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            246 => {
                __reduce246(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            247 => {
                // Imm<Felt> = ".", const_ident => ActionFn(908);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action908::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant40(__nt), __end));
                (2, 55)
            }
            248 => {
                __reduce248(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            249 => {
                // Imm<Shift32> = ".", const_ident => ActionFn(975);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action975::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant41(__nt), __end));
                (2, 56)
            }
            250 => {
                __reduce250(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            251 => {
                // Imm<U16> = ".", const_ident => ActionFn(778);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action778::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant42(__nt), __end));
                (2, 57)
            }
            252 => {
                __reduce252(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            253 => {
                // Imm<U32> = ".", const_ident => ActionFn(766);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action766::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant43(__nt), __end));
                (2, 58)
            }
            254 => {
                __reduce254(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            255 => {
                // Imm<U8> = ".", const_ident => ActionFn(874);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action874::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (2, 59)
            }
            256 => {
                __reduce256(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            257 => {
                __reduce257(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            258 => {
                // ImmError = const_ident => ActionFn(757);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action757::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant45(__nt), __end));
                (1, 60)
            }
            259 => {
                __reduce259(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            260 => {
                // ImmValue<Felt> = const_ident => ActionFn(758);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action758::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant40(__nt), __end));
                (1, 61)
            }
            261 => {
                __reduce261(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            262 => {
                // ImmValue<Shift32> = const_ident => ActionFn(759);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action759::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant41(__nt), __end));
                (1, 62)
            }
            263 => {
                __reduce263(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            264 => {
                // ImmValue<U16> = const_ident => ActionFn(760);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action760::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant42(__nt), __end));
                (1, 63)
            }
            265 => {
                __reduce265(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            266 => {
                // ImmValue<U32> = const_ident => ActionFn(761);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action761::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant43(__nt), __end));
                (1, 64)
            }
            267 => {
                __reduce267(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            268 => {
                // ImmValue<U8> = const_ident => ActionFn(762);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action762::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (1, 65)
            }
            269 => {
                // Import = "use", ".", MaybeQualifiedPath, "->", bare_ident => ActionFn(666);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant55(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action666::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 66)
            }
            270 => {
                // Import = "use", ".", MaybeQualifiedPath, "->", OpcodeName => ActionFn(667);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant6(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant55(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action667::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 66)
            }
            271 => {
                // Import = "use", ".", MaybeQualifiedPath => ActionFn(668);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant55(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action668::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (3, 66)
            }
            272 => {
                __reduce272(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            273 => {
                __reduce273(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            274 => {
                __reduce274(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            275 => {
                __reduce275(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            276 => {
                __reduce276(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            277 => {
                __reduce277(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            278 => {
                __reduce278(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            279 => {
                __reduce279(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            280 => {
                __reduce280(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            281 => {
                __reduce281(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            282 => {
                __reduce282(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            283 => {
                __reduce283(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            284 => {
                __reduce284(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            285 => {
                __reduce285(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            286 => {
                // Inst = "debug", ".", "stack", ".", const_ident => ActionFn(882);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action882::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            287 => {
                __reduce287(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            288 => {
                __reduce288(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            289 => {
                // Inst = "debug", ".", "mem", ".", U32, ".", const_ident => ActionFn(885);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action885::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            290 => {
                // Inst = "debug", ".", "mem", ".", const_ident, ".", U32 => ActionFn(886);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action886::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            291 => {
                // Inst = "debug", ".", "mem", ".", const_ident, ".", const_ident => ActionFn(887);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action887::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            292 => {
                __reduce292(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            293 => {
                // Inst = "debug", ".", "mem", ".", const_ident => ActionFn(889);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action889::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            294 => {
                __reduce294(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            295 => {
                __reduce295(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            296 => {
                // Inst = "debug", ".", "local", ".", U16, ".", const_ident => ActionFn(892);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action892::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            297 => {
                // Inst = "debug", ".", "local", ".", const_ident, ".", U16 => ActionFn(893);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant62(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action893::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            298 => {
                // Inst = "debug", ".", "local", ".", const_ident, ".", const_ident => ActionFn(894);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action894::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (7, 67)
            }
            299 => {
                __reduce299(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            300 => {
                // Inst = "debug", ".", "local", ".", const_ident => ActionFn(896);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action896::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            301 => {
                __reduce301(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            302 => {
                __reduce302(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            303 => {
                // Inst = "debug", ".", "adv_stack", ".", const_ident => ActionFn(899);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action899::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            304 => {
                __reduce304(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            305 => {
                __reduce305(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            306 => {
                // Inst = "emit", ".", const_ident => ActionFn(902);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action902::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            307 => {
                __reduce307(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            308 => {
                // Inst = "trace", ".", const_ident => ActionFn(904);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action904::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            309 => {
                __reduce309(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            310 => {
                __reduce310(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            311 => {
                __reduce311(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            312 => {
                __reduce312(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            313 => {
                // Inst = "assert", ".", "err", "=", const_ident => ActionFn(1129);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1129::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            314 => {
                __reduce314(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            315 => {
                __reduce315(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            316 => {
                __reduce316(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            317 => {
                // Inst = "assertz", ".", "err", "=", const_ident => ActionFn(1133);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1133::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            318 => {
                __reduce318(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            319 => {
                __reduce319(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            320 => {
                __reduce320(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            321 => {
                // Inst = "assert_eq", ".", "err", "=", const_ident => ActionFn(1137);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1137::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            322 => {
                __reduce322(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            323 => {
                __reduce323(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            324 => {
                __reduce324(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            325 => {
                // Inst = "assert_eqw", ".", "err", "=", const_ident => ActionFn(1141);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1141::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            326 => {
                __reduce326(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            327 => {
                __reduce327(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            328 => {
                __reduce328(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            329 => {
                // Inst = "u32assert", ".", "err", "=", const_ident => ActionFn(1145);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1145::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            330 => {
                __reduce330(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            331 => {
                __reduce331(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            332 => {
                __reduce332(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            333 => {
                // Inst = "u32assert2", ".", "err", "=", const_ident => ActionFn(1149);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1149::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            334 => {
                __reduce334(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            335 => {
                __reduce335(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            336 => {
                __reduce336(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            337 => {
                // Inst = "u32assertw", ".", "err", "=", const_ident => ActionFn(1153);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1153::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            338 => {
                __reduce338(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            339 => {
                __reduce339(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            340 => {
                __reduce340(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            341 => {
                // Inst = "mtree_verify", ".", "err", "=", const_ident => ActionFn(1157);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1157::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 67)
            }
            342 => {
                __reduce342(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            343 => {
                // Inst = "exp", ".", const_ident => ActionFn(1124);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1124::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            344 => {
                __reduce344(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            345 => {
                __reduce345(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            346 => {
                // Inst = "locaddr", ".", const_ident => ActionFn(1114);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1114::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            347 => {
                __reduce347(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            348 => {
                // Inst = "loc_load", ".", const_ident => ActionFn(1116);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1116::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            349 => {
                __reduce349(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            350 => {
                // Inst = "loc_loadw", ".", const_ident => ActionFn(1118);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1118::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            351 => {
                __reduce351(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            352 => {
                // Inst = "loc_store", ".", const_ident => ActionFn(1120);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1120::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            353 => {
                __reduce353(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            354 => {
                // Inst = "loc_storew", ".", const_ident => ActionFn(1122);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1122::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            355 => {
                __reduce355(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            356 => {
                // Inst = "dup", ".", U8 => ActionFn(1101);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1101::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            357 => {
                // Inst = "dup" => ActionFn(1102);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1102::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 67)
            }
            358 => {
                // Inst = "dupw", ".", U8 => ActionFn(1103);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1103::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            359 => {
                // Inst = "dupw" => ActionFn(1104);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1104::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 67)
            }
            360 => {
                // Inst = "movdn", ".", U8 => ActionFn(1105);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1105::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            361 => {
                // Inst = "movdnw", ".", U8 => ActionFn(1106);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1106::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            362 => {
                // Inst = "movup", ".", U8 => ActionFn(1107);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1107::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            363 => {
                // Inst = "movupw", ".", U8 => ActionFn(1108);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1108::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            364 => {
                // Inst = "swap", ".", U8 => ActionFn(1109);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1109::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            365 => {
                // Inst = "swap" => ActionFn(1110);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1110::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 67)
            }
            366 => {
                // Inst = "swapw", ".", U8 => ActionFn(1111);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1111::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            367 => {
                // Inst = "swapw" => ActionFn(1112);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1112::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 67)
            }
            368 => {
                __reduce368(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            369 => {
                // Inst = "mem_load", ".", const_ident => ActionFn(1089);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1089::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            370 => {
                __reduce370(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            371 => {
                __reduce371(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            372 => {
                // Inst = "mem_loadw", ".", const_ident => ActionFn(1092);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1092::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            373 => {
                __reduce373(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            374 => {
                __reduce374(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            375 => {
                // Inst = "mem_store", ".", const_ident => ActionFn(1095);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1095::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            376 => {
                __reduce376(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            377 => {
                __reduce377(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            378 => {
                // Inst = "mem_storew", ".", const_ident => ActionFn(1098);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1098::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 67)
            }
            379 => {
                __reduce379(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            380 => {
                __reduce380(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            381 => {
                __reduce381(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            382 => {
                __reduce382(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            383 => {
                __reduce383(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            384 => {
                __reduce384(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            385 => {
                __reduce385(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            386 => {
                __reduce386(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            387 => {
                __reduce387(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            388 => {
                __reduce388(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            389 => {
                __reduce389(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            390 => {
                __reduce390(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            391 => {
                __reduce391(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            392 => {
                __reduce392(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            393 => {
                __reduce393(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            394 => {
                __reduce394(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            395 => {
                __reduce395(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            396 => {
                __reduce396(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            397 => {
                __reduce397(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            398 => {
                __reduce398(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            399 => {
                __reduce399(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            400 => {
                __reduce400(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            401 => {
                __reduce401(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            402 => {
                __reduce402(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            403 => {
                __reduce403(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            404 => {
                __reduce404(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            405 => {
                __reduce405(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            406 => {
                __reduce406(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            407 => {
                __reduce407(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            408 => {
                __reduce408(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            409 => {
                __reduce409(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            410 => {
                __reduce410(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            411 => {
                __reduce411(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            412 => {
                __reduce412(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            413 => {
                __reduce413(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            414 => {
                __reduce414(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            415 => {
                __reduce415(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            416 => {
                __reduce416(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            417 => {
                __reduce417(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            418 => {
                __reduce418(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            419 => {
                __reduce419(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            420 => {
                __reduce420(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            421 => {
                __reduce421(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            422 => {
                __reduce422(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            423 => {
                __reduce423(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            424 => {
                __reduce424(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            425 => {
                __reduce425(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            426 => {
                __reduce426(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            427 => {
                __reduce427(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            428 => {
                __reduce428(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            429 => {
                __reduce429(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            430 => {
                __reduce430(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            431 => {
                __reduce431(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            432 => {
                __reduce432(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            433 => {
                __reduce433(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            434 => {
                __reduce434(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            435 => {
                __reduce435(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            436 => {
                __reduce436(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            437 => {
                __reduce437(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            438 => {
                __reduce438(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            439 => {
                __reduce439(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            440 => {
                __reduce440(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            441 => {
                // InstWithErrorCode = "assert", ".", "err", "=", const_ident => ActionFn(1065);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1065::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            442 => {
                __reduce442(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            443 => {
                __reduce443(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            444 => {
                __reduce444(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            445 => {
                // InstWithErrorCode = "assertz", ".", "err", "=", const_ident => ActionFn(1068);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1068::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            446 => {
                __reduce446(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            447 => {
                __reduce447(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            448 => {
                __reduce448(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            449 => {
                // InstWithErrorCode = "assert_eq", ".", "err", "=", const_ident => ActionFn(1071);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1071::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            450 => {
                __reduce450(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            451 => {
                __reduce451(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            452 => {
                __reduce452(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            453 => {
                // InstWithErrorCode = "assert_eqw", ".", "err", "=", const_ident => ActionFn(1074);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1074::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            454 => {
                __reduce454(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            455 => {
                __reduce455(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            456 => {
                __reduce456(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            457 => {
                // InstWithErrorCode = "u32assert", ".", "err", "=", const_ident => ActionFn(1077);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1077::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            458 => {
                __reduce458(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            459 => {
                __reduce459(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            460 => {
                __reduce460(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            461 => {
                // InstWithErrorCode = "u32assert2", ".", "err", "=", const_ident => ActionFn(1080);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1080::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            462 => {
                __reduce462(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            463 => {
                __reduce463(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            464 => {
                __reduce464(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            465 => {
                // InstWithErrorCode = "u32assertw", ".", "err", "=", const_ident => ActionFn(1083);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1083::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            466 => {
                __reduce466(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            467 => {
                __reduce467(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            468 => {
                __reduce468(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            469 => {
                // InstWithErrorCode = "mtree_verify", ".", "err", "=", const_ident => ActionFn(1086);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1086::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (5, 69)
            }
            470 => {
                __reduce470(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            471 => {
                // InstWithFeltImmediate = "exp", ".", const_ident => ActionFn(942);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action942::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 70)
            }
            472 => {
                __reduce472(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            473 => {
                __reduce473(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            474 => {
                // InstWithLocalIndex = "locaddr", ".", const_ident => ActionFn(784);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action784::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 71)
            }
            475 => {
                __reduce475(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            476 => {
                // InstWithLocalIndex = "loc_load", ".", const_ident => ActionFn(786);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action786::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 71)
            }
            477 => {
                __reduce477(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            478 => {
                // InstWithLocalIndex = "loc_loadw", ".", const_ident => ActionFn(788);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action788::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 71)
            }
            479 => {
                __reduce479(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            480 => {
                // InstWithLocalIndex = "loc_store", ".", const_ident => ActionFn(790);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action790::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 71)
            }
            481 => {
                __reduce481(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            482 => {
                // InstWithLocalIndex = "loc_storew", ".", const_ident => ActionFn(792);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action792::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 71)
            }
            483 => {
                __reduce483(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            484 => {
                // InstWithStackIndex = "dup", ".", U8 => ActionFn(677);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action677::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            485 => {
                // InstWithStackIndex = "dup" => ActionFn(678);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action678::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 72)
            }
            486 => {
                // InstWithStackIndex = "dupw", ".", U8 => ActionFn(679);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action679::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            487 => {
                // InstWithStackIndex = "dupw" => ActionFn(680);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action680::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 72)
            }
            488 => {
                // InstWithStackIndex = "movdn", ".", U8 => ActionFn(673);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action673::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            489 => {
                // InstWithStackIndex = "movdnw", ".", U8 => ActionFn(674);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action674::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            490 => {
                // InstWithStackIndex = "movup", ".", U8 => ActionFn(675);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action675::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            491 => {
                // InstWithStackIndex = "movupw", ".", U8 => ActionFn(676);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action676::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            492 => {
                // InstWithStackIndex = "swap", ".", U8 => ActionFn(681);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action681::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            493 => {
                // InstWithStackIndex = "swap" => ActionFn(682);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action682::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 72)
            }
            494 => {
                // InstWithStackIndex = "swapw", ".", U8 => ActionFn(683);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action683::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 72)
            }
            495 => {
                // InstWithStackIndex = "swapw" => ActionFn(684);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action684::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 72)
            }
            496 => {
                __reduce496(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            497 => {
                // InstWithU32Immediate = "mem_load", ".", const_ident => ActionFn(862);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action862::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 73)
            }
            498 => {
                __reduce498(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            499 => {
                __reduce499(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            500 => {
                // InstWithU32Immediate = "mem_loadw", ".", const_ident => ActionFn(865);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action865::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 73)
            }
            501 => {
                __reduce501(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            502 => {
                __reduce502(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            503 => {
                // InstWithU32Immediate = "mem_store", ".", const_ident => ActionFn(868);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action868::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 73)
            }
            504 => {
                __reduce504(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            505 => {
                __reduce505(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            506 => {
                // InstWithU32Immediate = "mem_storew", ".", const_ident => ActionFn(871);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action871::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (3, 73)
            }
            507 => {
                __reduce507(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            508 => {
                __reduce508(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            509 => {
                __reduce509(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            510 => {
                __reduce510(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            511 => {
                __reduce511(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            512 => {
                __reduce512(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            513 => {
                __reduce513(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            514 => {
                __reduce514(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            515 => {
                __reduce515(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            516 => {
                __reduce516(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            517 => {
                __reduce517(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            518 => {
                __reduce518(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            519 => {
                __reduce519(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            520 => {
                __reduce520(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            521 => {
                __reduce521(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            522 => {
                // Instruction = "debug", ".", "stack", ".", const_ident => ActionFn(1184);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1184::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            523 => {
                __reduce523(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            524 => {
                __reduce524(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            525 => {
                // Instruction = "debug", ".", "mem", ".", U32, ".", const_ident => ActionFn(1187);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1187::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            526 => {
                // Instruction = "debug", ".", "mem", ".", const_ident, ".", U32 => ActionFn(1188);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1188::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            527 => {
                // Instruction = "debug", ".", "mem", ".", const_ident, ".", const_ident => ActionFn(1189);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1189::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            528 => {
                __reduce528(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            529 => {
                // Instruction = "debug", ".", "mem", ".", const_ident => ActionFn(1191);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1191::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            530 => {
                __reduce530(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            531 => {
                __reduce531(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            532 => {
                // Instruction = "debug", ".", "local", ".", U16, ".", const_ident => ActionFn(1194);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1194::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            533 => {
                // Instruction = "debug", ".", "local", ".", const_ident, ".", U16 => ActionFn(1195);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant62(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1195::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            534 => {
                // Instruction = "debug", ".", "local", ".", const_ident, ".", const_ident => ActionFn(1196);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1196::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 74)
            }
            535 => {
                __reduce535(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            536 => {
                // Instruction = "debug", ".", "local", ".", const_ident => ActionFn(1198);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1198::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            537 => {
                __reduce537(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            538 => {
                __reduce538(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            539 => {
                // Instruction = "debug", ".", "adv_stack", ".", const_ident => ActionFn(1201);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1201::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            540 => {
                __reduce540(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            541 => {
                __reduce541(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            542 => {
                // Instruction = "emit", ".", const_ident => ActionFn(1204);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1204::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            543 => {
                __reduce543(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            544 => {
                // Instruction = "trace", ".", const_ident => ActionFn(1206);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1206::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            545 => {
                __reduce545(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            546 => {
                __reduce546(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            547 => {
                __reduce547(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            548 => {
                __reduce548(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            549 => {
                // Instruction = "assert", ".", "err", "=", const_ident => ActionFn(1211);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1211::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            550 => {
                __reduce550(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            551 => {
                __reduce551(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            552 => {
                __reduce552(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            553 => {
                // Instruction = "assertz", ".", "err", "=", const_ident => ActionFn(1215);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1215::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            554 => {
                __reduce554(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            555 => {
                __reduce555(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            556 => {
                __reduce556(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            557 => {
                // Instruction = "assert_eq", ".", "err", "=", const_ident => ActionFn(1219);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1219::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            558 => {
                __reduce558(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            559 => {
                __reduce559(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            560 => {
                __reduce560(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            561 => {
                // Instruction = "assert_eqw", ".", "err", "=", const_ident => ActionFn(1223);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1223::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            562 => {
                __reduce562(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            563 => {
                __reduce563(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            564 => {
                __reduce564(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            565 => {
                // Instruction = "u32assert", ".", "err", "=", const_ident => ActionFn(1227);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1227::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            566 => {
                __reduce566(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            567 => {
                __reduce567(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            568 => {
                __reduce568(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            569 => {
                // Instruction = "u32assert2", ".", "err", "=", const_ident => ActionFn(1231);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1231::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            570 => {
                __reduce570(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            571 => {
                __reduce571(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            572 => {
                __reduce572(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            573 => {
                // Instruction = "u32assertw", ".", "err", "=", const_ident => ActionFn(1235);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1235::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            574 => {
                __reduce574(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            575 => {
                __reduce575(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            576 => {
                __reduce576(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            577 => {
                // Instruction = "mtree_verify", ".", "err", "=", const_ident => ActionFn(1239);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1239::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 74)
            }
            578 => {
                __reduce578(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            579 => {
                // Instruction = "exp", ".", const_ident => ActionFn(1241);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1241::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            580 => {
                __reduce580(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            581 => {
                __reduce581(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            582 => {
                // Instruction = "locaddr", ".", const_ident => ActionFn(1244);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1244::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            583 => {
                __reduce583(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            584 => {
                // Instruction = "loc_load", ".", const_ident => ActionFn(1246);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1246::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            585 => {
                __reduce585(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            586 => {
                // Instruction = "loc_loadw", ".", const_ident => ActionFn(1248);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1248::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            587 => {
                __reduce587(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            588 => {
                // Instruction = "loc_store", ".", const_ident => ActionFn(1250);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1250::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            589 => {
                __reduce589(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            590 => {
                // Instruction = "loc_storew", ".", const_ident => ActionFn(1252);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1252::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            591 => {
                __reduce591(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            592 => {
                // Instruction = "dup", ".", U8 => ActionFn(1254);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1254::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            593 => {
                // Instruction = "dup" => ActionFn(1255);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1255::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 74)
            }
            594 => {
                // Instruction = "dupw", ".", U8 => ActionFn(1256);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1256::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            595 => {
                // Instruction = "dupw" => ActionFn(1257);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1257::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 74)
            }
            596 => {
                // Instruction = "movdn", ".", U8 => ActionFn(1258);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1258::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            597 => {
                // Instruction = "movdnw", ".", U8 => ActionFn(1259);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1259::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            598 => {
                // Instruction = "movup", ".", U8 => ActionFn(1260);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1260::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            599 => {
                // Instruction = "movupw", ".", U8 => ActionFn(1261);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1261::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            600 => {
                // Instruction = "swap", ".", U8 => ActionFn(1262);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1262::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            601 => {
                // Instruction = "swap" => ActionFn(1263);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1263::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 74)
            }
            602 => {
                // Instruction = "swapw", ".", U8 => ActionFn(1264);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1264::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            603 => {
                // Instruction = "swapw" => ActionFn(1265);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1265::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 74)
            }
            604 => {
                __reduce604(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            605 => {
                // Instruction = "mem_load", ".", const_ident => ActionFn(1267);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1267::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            606 => {
                __reduce606(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            607 => {
                __reduce607(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            608 => {
                // Instruction = "mem_loadw", ".", const_ident => ActionFn(1270);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1270::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            609 => {
                __reduce609(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            610 => {
                __reduce610(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            611 => {
                // Instruction = "mem_store", ".", const_ident => ActionFn(1273);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1273::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            612 => {
                __reduce612(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            613 => {
                __reduce613(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            614 => {
                // Instruction = "mem_storew", ".", const_ident => ActionFn(1276);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1276::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 74)
            }
            615 => {
                __reduce615(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            616 => {
                __reduce616(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            617 => {
                __reduce617(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            618 => {
                __reduce618(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            619 => {
                __reduce619(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            620 => {
                __reduce620(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            621 => {
                __reduce621(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            622 => {
                __reduce622(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            623 => {
                __reduce623(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            624 => {
                __reduce624(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            625 => {
                __reduce625(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            626 => {
                __reduce626(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            627 => {
                __reduce627(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            628 => {
                __reduce628(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            629 => {
                __reduce629(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            630 => {
                __reduce630(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            631 => {
                __reduce631(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            632 => {
                __reduce632(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            633 => {
                __reduce633(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            634 => {
                __reduce634(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            635 => {
                __reduce635(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            636 => {
                __reduce636(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            637 => {
                __reduce637(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            638 => {
                __reduce638(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            639 => {
                __reduce639(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            640 => {
                __reduce640(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            641 => {
                __reduce641(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            642 => {
                __reduce642(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            643 => {
                __reduce643(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            644 => {
                __reduce644(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            645 => {
                __reduce645(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            646 => {
                __reduce646(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            647 => {
                __reduce647(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            648 => {
                __reduce648(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            649 => {
                __reduce649(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            650 => {
                __reduce650(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            651 => {
                __reduce651(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            652 => {
                __reduce652(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            653 => {
                __reduce653(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            654 => {
                __reduce654(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            655 => {
                __reduce655(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            656 => {
                __reduce656(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            657 => {
                __reduce657(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            658 => {
                __reduce658(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            659 => {
                __reduce659(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            660 => {
                __reduce660(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            661 => {
                __reduce661(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            662 => {
                __reduce662(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            663 => {
                __reduce663(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            664 => {
                __reduce664(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            665 => {
                __reduce665(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            666 => {
                __reduce666(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            667 => {
                __reduce667(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            668 => {
                __reduce668(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            669 => {
                __reduce669(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            670 => {
                __reduce670(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            671 => {
                __reduce671(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            672 => {
                __reduce672(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            673 => {
                __reduce673(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            674 => {
                __reduce674(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            675 => {
                // IntOrHexImm = const_ident => ActionFn(763);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action763::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant15(__nt), __end));
                (1, 75)
            }
            676 => {
                // IntValue = uint => ActionFn(622);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action622::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant4(__nt), __end));
                (1, 76)
            }
            677 => {
                // IntValue = "[", Felt, ",", Felt, ",", Felt, ",", Felt, "]" => ActionFn(623);
                assert!(__symbols.len() >= 9);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant13(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant13(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = match super::__action623::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant4(__nt), __end));
                (9, 76)
            }
            678 => {
                __reduce678(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            679 => {
                __reduce679(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            680 => {
                __reduce680(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            681 => {
                __reduce681(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            682 => {
                // MacroInst = "eq", ".", const_ident => ActionFn(945);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action945::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            683 => {
                __reduce683(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            684 => {
                __reduce684(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            685 => {
                // MacroInst = "neq", ".", const_ident => ActionFn(948);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action948::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            686 => {
                __reduce686(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            687 => {
                __reduce687(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            688 => {
                // MacroInst = "lt", ".", const_ident => ActionFn(951);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action951::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            689 => {
                __reduce689(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            690 => {
                __reduce690(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            691 => {
                // MacroInst = "lte", ".", const_ident => ActionFn(954);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action954::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            692 => {
                __reduce692(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            693 => {
                __reduce693(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            694 => {
                // MacroInst = "gt", ".", const_ident => ActionFn(957);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action957::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            695 => {
                __reduce695(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            696 => {
                __reduce696(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            697 => {
                // MacroInst = "gte", ".", const_ident => ActionFn(960);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action960::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            698 => {
                __reduce698(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            699 => {
                __reduce699(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            700 => {
                // MacroInst = "add", ".", const_ident => ActionFn(963);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action963::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            701 => {
                __reduce701(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            702 => {
                __reduce702(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            703 => {
                // MacroInst = "sub", ".", const_ident => ActionFn(966);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action966::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            704 => {
                __reduce704(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            705 => {
                __reduce705(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            706 => {
                // MacroInst = "mul", ".", const_ident => ActionFn(969);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action969::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            707 => {
                __reduce707(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            708 => {
                // MacroInst = "div", ".", Felt => ActionFn(971);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action971::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            709 => {
                // MacroInst = "div", ".", const_ident => ActionFn(972);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action972::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            710 => {
                // MacroInst = "div" => ActionFn(973);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action973::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 78)
            }
            711 => {
                // MacroInst = "u32div", ".", U32 => ActionFn(990);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action990::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            712 => {
                // MacroInst = "u32div", ".", const_ident => ActionFn(991);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action991::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            713 => {
                // MacroInst = "u32div" => ActionFn(992);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action992::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 78)
            }
            714 => {
                // MacroInst = "u32divmod", ".", U32 => ActionFn(993);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action993::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            715 => {
                // MacroInst = "u32divmod", ".", const_ident => ActionFn(994);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action994::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            716 => {
                // MacroInst = "u32divmod" => ActionFn(995);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action995::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 78)
            }
            717 => {
                // MacroInst = "u32mod", ".", U32 => ActionFn(996);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action996::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            718 => {
                // MacroInst = "u32mod", ".", const_ident => ActionFn(997);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action997::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            719 => {
                // MacroInst = "u32mod" => ActionFn(998);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action998::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 78)
            }
            720 => {
                __reduce720(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            721 => {
                // MacroInst = "u32and", ".", const_ident => ActionFn(1000);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1000::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            722 => {
                __reduce722(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            723 => {
                __reduce723(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            724 => {
                // MacroInst = "u32or", ".", const_ident => ActionFn(1003);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1003::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            725 => {
                __reduce725(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            726 => {
                __reduce726(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            727 => {
                // MacroInst = "u32xor", ".", const_ident => ActionFn(1006);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1006::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            728 => {
                __reduce728(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            729 => {
                __reduce729(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            730 => {
                // MacroInst = "u32not", ".", const_ident => ActionFn(1009);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1009::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            731 => {
                __reduce731(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            732 => {
                __reduce732(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            733 => {
                // MacroInst = "u32wrapping_add", ".", const_ident => ActionFn(1012);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1012::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            734 => {
                __reduce734(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            735 => {
                __reduce735(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            736 => {
                // MacroInst = "u32wrapping_sub", ".", const_ident => ActionFn(1015);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1015::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            737 => {
                __reduce737(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            738 => {
                __reduce738(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            739 => {
                // MacroInst = "u32wrapping_mul", ".", const_ident => ActionFn(1018);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1018::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            740 => {
                __reduce740(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            741 => {
                __reduce741(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            742 => {
                // MacroInst = "u32overflowing_add", ".", const_ident => ActionFn(1021);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1021::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            743 => {
                __reduce743(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            744 => {
                __reduce744(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            745 => {
                // MacroInst = "u32overflowing_sub", ".", const_ident => ActionFn(1024);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1024::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            746 => {
                __reduce746(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            747 => {
                __reduce747(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            748 => {
                // MacroInst = "u32overflowing_mul", ".", const_ident => ActionFn(1027);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1027::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            749 => {
                __reduce749(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            750 => {
                __reduce750(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            751 => {
                // MacroInst = "u32shl", ".", const_ident => ActionFn(1030);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1030::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            752 => {
                __reduce752(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            753 => {
                __reduce753(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            754 => {
                // MacroInst = "u32shr", ".", const_ident => ActionFn(1033);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1033::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            755 => {
                __reduce755(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            756 => {
                __reduce756(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            757 => {
                // MacroInst = "u32rotl", ".", const_ident => ActionFn(1036);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1036::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            758 => {
                __reduce758(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            759 => {
                __reduce759(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            760 => {
                // MacroInst = "u32rotr", ".", const_ident => ActionFn(1039);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1039::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            761 => {
                __reduce761(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            762 => {
                __reduce762(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            763 => {
                // MacroInst = "u32lt", ".", const_ident => ActionFn(1042);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1042::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            764 => {
                __reduce764(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            765 => {
                __reduce765(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            766 => {
                // MacroInst = "u32lte", ".", const_ident => ActionFn(1045);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1045::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            767 => {
                __reduce767(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            768 => {
                __reduce768(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            769 => {
                // MacroInst = "u32gt", ".", const_ident => ActionFn(1048);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1048::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            770 => {
                __reduce770(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            771 => {
                __reduce771(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            772 => {
                // MacroInst = "u32gte", ".", const_ident => ActionFn(1051);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1051::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            773 => {
                __reduce773(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            774 => {
                __reduce774(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            775 => {
                // MacroInst = "u32min", ".", const_ident => ActionFn(1054);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1054::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            776 => {
                __reduce776(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            777 => {
                __reduce777(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            778 => {
                // MacroInst = "u32max", ".", const_ident => ActionFn(1057);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1057::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 78)
            }
            779 => {
                __reduce779(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            780 => {
                __reduce780(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            781 => {
                // MastRoot = hex_value => ActionFn(624);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action624::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant47(__nt), __end));
                (1, 79)
            }
            782 => {
                __reduce782(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            783 => {
                __reduce783(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            784 => {
                // MaybeAdvMapKey = "(", IntValue, ")" => ActionFn(625);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant4(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action625::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant48(__nt), __end));
                (3, 81)
            }
            785 => {
                __reduce785(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            786 => {
                __reduce786(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            787 => {
                // MaybeImm<Felt> = ".", const_ident => ActionFn(910);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action910::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant49(__nt), __end));
                (2, 82)
            }
            788 => {
                __reduce788(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            789 => {
                __reduce789(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            790 => {
                // MaybeImm<Shift32> = ".", const_ident => ActionFn(977);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action977::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant50(__nt), __end));
                (2, 83)
            }
            791 => {
                __reduce791(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            792 => {
                __reduce792(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            793 => {
                // MaybeImm<U16> = ".", const_ident => ActionFn(794);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action794::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant51(__nt), __end));
                (2, 84)
            }
            794 => {
                __reduce794(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            795 => {
                __reduce795(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            796 => {
                // MaybeImm<U32> = ".", const_ident => ActionFn(776);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action776::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant52(__nt), __end));
                (2, 85)
            }
            797 => {
                __reduce797(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            798 => {
                __reduce798(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            799 => {
                // MaybeImm<U8> = ".", const_ident => ActionFn(876);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action876::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant53(__nt), __end));
                (2, 86)
            }
            800 => {
                __reduce800(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            801 => {
                __reduce801(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            802 => {
                __reduce802(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            803 => {
                // MaybeQualifiedPath = "::", bare_ident => ActionFn(1507);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action1507::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (2, 88)
            }
            804 => {
                // MaybeQualifiedPath = "::", (<BareIdent> "::")+, bare_ident => ActionFn(1508);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1508::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (3, 88)
            }
            805 => {
                // MaybeQualifiedPath = "::", OpcodeName => ActionFn(1509);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant6(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action1509::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (2, 88)
            }
            806 => {
                // MaybeQualifiedPath = "::", (<BareIdent> "::")+, OpcodeName => ActionFn(1510);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant6(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1510::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (3, 88)
            }
            807 => {
                // MaybeQualifiedPath = bare_ident => ActionFn(1511);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1511::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (1, 88)
            }
            808 => {
                // MaybeQualifiedPath = (<BareIdent> "::")+, bare_ident => ActionFn(1512);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action1512::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (2, 88)
            }
            809 => {
                // MaybeQualifiedPath = OpcodeName => ActionFn(1513);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1513::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (1, 88)
            }
            810 => {
                // MaybeQualifiedPath = (<BareIdent> "::")+, OpcodeName => ActionFn(1514);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant6(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action1514::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant55(__nt), __end));
                (2, 88)
            }
            811 => {
                // MaybeQualifiedProcedurePath = "::", ProcedureName => ActionFn(693);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant8(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action693::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (2, 89)
            }
            812 => {
                // MaybeQualifiedProcedurePath = "::", (<BareIdent> "::")+, ProcedureName => ActionFn(694);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action694::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (3, 89)
            }
            813 => {
                // MaybeQualifiedProcedurePath = bare_ident, "::", ProcedureName => ActionFn(699);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action699::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (3, 89)
            }
            814 => {
                __reduce814(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            815 => {
                __reduce815(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            816 => {
                // MetaExpr = bare_ident => ActionFn(658);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action658::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant17(__nt), __end));
                (1, 90)
            }
            817 => {
                __reduce817(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            818 => {
                __reduce818(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            819 => {
                __reduce819(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            820 => {
                __reduce820(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            821 => {
                // MetaKeyValue = bare_ident, "=", MetaExpr => ActionFn(660);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action660::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (3, 91)
            }
            822 => {
                __reduce822(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            823 => {
                // OneBasedStackIndex = U8 => ActionFn(218);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action218::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (1, 92)
            }
            824 => {
                // OneBasedWordIndex = U8 => ActionFn(220);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action220::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (1, 93)
            }
            825 => {
                __reduce825(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            826 => {
                __reduce826(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            827 => {
                __reduce827(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            828 => {
                __reduce828(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            829 => {
                __reduce829(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            830 => {
                __reduce830(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            831 => {
                __reduce831(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            832 => {
                __reduce832(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            833 => {
                __reduce833(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            834 => {
                __reduce834(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            835 => {
                __reduce835(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            836 => {
                __reduce836(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            837 => {
                __reduce837(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            838 => {
                __reduce838(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            839 => {
                __reduce839(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            840 => {
                __reduce840(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            841 => {
                __reduce841(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            842 => {
                // Op = "debug", ".", "stack", ".", const_ident => ActionFn(1349);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1349::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            843 => {
                __reduce843(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            844 => {
                __reduce844(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            845 => {
                // Op = "debug", ".", "mem", ".", U32, ".", const_ident => ActionFn(1352);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1352::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            846 => {
                // Op = "debug", ".", "mem", ".", const_ident, ".", U32 => ActionFn(1353);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1353::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            847 => {
                // Op = "debug", ".", "mem", ".", const_ident, ".", const_ident => ActionFn(1354);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1354::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            848 => {
                __reduce848(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            849 => {
                // Op = "debug", ".", "mem", ".", const_ident => ActionFn(1356);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1356::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            850 => {
                __reduce850(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            851 => {
                __reduce851(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            852 => {
                // Op = "debug", ".", "local", ".", U16, ".", const_ident => ActionFn(1359);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1359::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            853 => {
                // Op = "debug", ".", "local", ".", const_ident, ".", U16 => ActionFn(1360);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant62(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1360::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            854 => {
                // Op = "debug", ".", "local", ".", const_ident, ".", const_ident => ActionFn(1361);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant1(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1361::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (7, 94)
            }
            855 => {
                __reduce855(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            856 => {
                // Op = "debug", ".", "local", ".", const_ident => ActionFn(1363);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1363::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            857 => {
                __reduce857(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            858 => {
                __reduce858(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            859 => {
                // Op = "debug", ".", "adv_stack", ".", const_ident => ActionFn(1366);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1366::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            860 => {
                __reduce860(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            861 => {
                __reduce861(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            862 => {
                // Op = "emit", ".", const_ident => ActionFn(1369);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1369::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            863 => {
                __reduce863(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            864 => {
                // Op = "trace", ".", const_ident => ActionFn(1371);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1371::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            865 => {
                __reduce865(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            866 => {
                __reduce866(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            867 => {
                __reduce867(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            868 => {
                __reduce868(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            869 => {
                // Op = "assert", ".", "err", "=", const_ident => ActionFn(1376);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1376::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            870 => {
                __reduce870(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            871 => {
                __reduce871(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            872 => {
                __reduce872(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            873 => {
                // Op = "assertz", ".", "err", "=", const_ident => ActionFn(1380);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1380::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            874 => {
                __reduce874(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            875 => {
                __reduce875(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            876 => {
                __reduce876(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            877 => {
                // Op = "assert_eq", ".", "err", "=", const_ident => ActionFn(1384);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1384::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            878 => {
                __reduce878(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            879 => {
                __reduce879(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            880 => {
                __reduce880(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            881 => {
                // Op = "assert_eqw", ".", "err", "=", const_ident => ActionFn(1388);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1388::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            882 => {
                __reduce882(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            883 => {
                __reduce883(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            884 => {
                __reduce884(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            885 => {
                // Op = "u32assert", ".", "err", "=", const_ident => ActionFn(1392);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1392::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            886 => {
                __reduce886(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            887 => {
                __reduce887(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            888 => {
                __reduce888(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            889 => {
                // Op = "u32assert2", ".", "err", "=", const_ident => ActionFn(1396);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1396::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            890 => {
                __reduce890(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            891 => {
                __reduce891(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            892 => {
                __reduce892(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            893 => {
                // Op = "u32assertw", ".", "err", "=", const_ident => ActionFn(1400);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1400::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            894 => {
                __reduce894(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            895 => {
                __reduce895(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            896 => {
                __reduce896(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            897 => {
                // Op = "mtree_verify", ".", "err", "=", const_ident => ActionFn(1404);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant1(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1404::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (5, 94)
            }
            898 => {
                __reduce898(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            899 => {
                // Op = "exp", ".", const_ident => ActionFn(1406);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1406::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            900 => {
                __reduce900(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            901 => {
                __reduce901(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            902 => {
                // Op = "locaddr", ".", const_ident => ActionFn(1409);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1409::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            903 => {
                __reduce903(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            904 => {
                // Op = "loc_load", ".", const_ident => ActionFn(1411);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1411::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            905 => {
                __reduce905(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            906 => {
                // Op = "loc_loadw", ".", const_ident => ActionFn(1413);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1413::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            907 => {
                __reduce907(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            908 => {
                // Op = "loc_store", ".", const_ident => ActionFn(1415);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1415::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            909 => {
                __reduce909(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            910 => {
                // Op = "loc_storew", ".", const_ident => ActionFn(1417);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1417::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            911 => {
                __reduce911(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            912 => {
                // Op = "dup", ".", U8 => ActionFn(1419);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1419::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            913 => {
                // Op = "dup" => ActionFn(1420);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1420::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 94)
            }
            914 => {
                // Op = "dupw", ".", U8 => ActionFn(1421);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1421::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            915 => {
                // Op = "dupw" => ActionFn(1422);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1422::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 94)
            }
            916 => {
                // Op = "movdn", ".", U8 => ActionFn(1423);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1423::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            917 => {
                // Op = "movdnw", ".", U8 => ActionFn(1424);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1424::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            918 => {
                // Op = "movup", ".", U8 => ActionFn(1425);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1425::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            919 => {
                // Op = "movupw", ".", U8 => ActionFn(1426);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1426::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            920 => {
                // Op = "swap", ".", U8 => ActionFn(1427);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1427::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            921 => {
                // Op = "swap" => ActionFn(1428);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1428::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 94)
            }
            922 => {
                // Op = "swapw", ".", U8 => ActionFn(1429);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant10(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1429::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            923 => {
                // Op = "swapw" => ActionFn(1430);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1430::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (1, 94)
            }
            924 => {
                __reduce924(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            925 => {
                // Op = "mem_load", ".", const_ident => ActionFn(1432);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1432::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            926 => {
                __reduce926(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            927 => {
                __reduce927(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            928 => {
                // Op = "mem_loadw", ".", const_ident => ActionFn(1435);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1435::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            929 => {
                __reduce929(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            930 => {
                __reduce930(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            931 => {
                // Op = "mem_store", ".", const_ident => ActionFn(1438);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1438::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            932 => {
                __reduce932(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            933 => {
                __reduce933(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            934 => {
                // Op = "mem_storew", ".", const_ident => ActionFn(1441);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1441::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 94)
            }
            935 => {
                __reduce935(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            936 => {
                __reduce936(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            937 => {
                __reduce937(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            938 => {
                __reduce938(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            939 => {
                __reduce939(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            940 => {
                __reduce940(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            941 => {
                __reduce941(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            942 => {
                __reduce942(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            943 => {
                __reduce943(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            944 => {
                __reduce944(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            945 => {
                __reduce945(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            946 => {
                __reduce946(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            947 => {
                __reduce947(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            948 => {
                __reduce948(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            949 => {
                __reduce949(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            950 => {
                __reduce950(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            951 => {
                __reduce951(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            952 => {
                __reduce952(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            953 => {
                __reduce953(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            954 => {
                __reduce954(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            955 => {
                __reduce955(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            956 => {
                __reduce956(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            957 => {
                __reduce957(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            958 => {
                __reduce958(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            959 => {
                __reduce959(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            960 => {
                __reduce960(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            961 => {
                __reduce961(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            962 => {
                __reduce962(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            963 => {
                __reduce963(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            964 => {
                __reduce964(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            965 => {
                __reduce965(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            966 => {
                __reduce966(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            967 => {
                __reduce967(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            968 => {
                __reduce968(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            969 => {
                __reduce969(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            970 => {
                __reduce970(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            971 => {
                __reduce971(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            972 => {
                __reduce972(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            973 => {
                __reduce973(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            974 => {
                __reduce974(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            975 => {
                __reduce975(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            976 => {
                __reduce976(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            977 => {
                __reduce977(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            978 => {
                __reduce978(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            979 => {
                __reduce979(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            980 => {
                __reduce980(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            981 => {
                __reduce981(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            982 => {
                __reduce982(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            983 => {
                __reduce983(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            984 => {
                __reduce984(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            985 => {
                __reduce985(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            986 => {
                __reduce986(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            987 => {
                __reduce987(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            988 => {
                __reduce988(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            989 => {
                __reduce989(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            990 => {
                __reduce990(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            991 => {
                __reduce991(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            992 => {
                __reduce992(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            993 => {
                __reduce993(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            994 => {
                __reduce994(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            995 => {
                __reduce995(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            996 => {
                __reduce996(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            997 => {
                __reduce997(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            998 => {
                __reduce998(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            999 => {
                __reduce999(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1000 => {
                __reduce1000(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1001 => {
                __reduce1001(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1002 => {
                __reduce1002(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1003 => {
                __reduce1003(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1004 => {
                __reduce1004(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1005 => {
                __reduce1005(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1006 => {
                __reduce1006(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1007 => {
                __reduce1007(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1008 => {
                __reduce1008(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1009 => {
                __reduce1009(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1010 => {
                __reduce1010(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1011 => {
                __reduce1011(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1012 => {
                __reduce1012(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1013 => {
                __reduce1013(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1014 => {
                __reduce1014(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1015 => {
                __reduce1015(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1016 => {
                __reduce1016(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1017 => {
                __reduce1017(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1018 => {
                __reduce1018(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1019 => {
                __reduce1019(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1020 => {
                __reduce1020(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1021 => {
                __reduce1021(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1022 => {
                __reduce1022(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1023 => {
                __reduce1023(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1024 => {
                __reduce1024(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1025 => {
                __reduce1025(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1026 => {
                __reduce1026(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1027 => {
                __reduce1027(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1028 => {
                __reduce1028(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1029 => {
                __reduce1029(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1030 => {
                __reduce1030(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1031 => {
                __reduce1031(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1032 => {
                __reduce1032(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1033 => {
                __reduce1033(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1034 => {
                __reduce1034(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1035 => {
                __reduce1035(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1036 => {
                __reduce1036(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1037 => {
                __reduce1037(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1038 => {
                __reduce1038(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1039 => {
                __reduce1039(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1040 => {
                __reduce1040(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1041 => {
                __reduce1041(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1042 => {
                __reduce1042(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1043 => {
                __reduce1043(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1044 => {
                __reduce1044(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1045 => {
                __reduce1045(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1046 => {
                __reduce1046(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1047 => {
                __reduce1047(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1048 => {
                __reduce1048(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1049 => {
                __reduce1049(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1050 => {
                __reduce1050(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1051 => {
                __reduce1051(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1052 => {
                __reduce1052(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1053 => {
                __reduce1053(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1054 => {
                __reduce1054(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1055 => {
                __reduce1055(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1056 => {
                __reduce1056(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1057 => {
                __reduce1057(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1058 => {
                __reduce1058(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1059 => {
                __reduce1059(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1060 => {
                __reduce1060(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1061 => {
                __reduce1061(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1062 => {
                __reduce1062(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1063 => {
                __reduce1063(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1064 => {
                __reduce1064(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1065 => {
                __reduce1065(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1066 => {
                __reduce1066(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1067 => {
                __reduce1067(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1068 => {
                __reduce1068(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1069 => {
                __reduce1069(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1070 => {
                __reduce1070(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1071 => {
                __reduce1071(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1072 => {
                __reduce1072(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1073 => {
                __reduce1073(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1074 => {
                __reduce1074(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1075 => {
                __reduce1075(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1076 => {
                __reduce1076(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1077 => {
                __reduce1077(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1078 => {
                __reduce1078(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1079 => {
                __reduce1079(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1080 => {
                __reduce1080(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1081 => {
                __reduce1081(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1082 => {
                __reduce1082(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1083 => {
                __reduce1083(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1084 => {
                __reduce1084(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1085 => {
                __reduce1085(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1086 => {
                __reduce1086(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1087 => {
                __reduce1087(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1088 => {
                __reduce1088(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1089 => {
                __reduce1089(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1090 => {
                __reduce1090(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1091 => {
                __reduce1091(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1092 => {
                __reduce1092(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1093 => {
                __reduce1093(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1094 => {
                __reduce1094(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1095 => {
                __reduce1095(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1096 => {
                __reduce1096(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1097 => {
                __reduce1097(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1098 => {
                __reduce1098(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1099 => {
                __reduce1099(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1100 => {
                __reduce1100(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1101 => {
                __reduce1101(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1102 => {
                __reduce1102(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1103 => {
                __reduce1103(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1104 => {
                __reduce1104(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1105 => {
                __reduce1105(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1106 => {
                __reduce1106(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1107 => {
                __reduce1107(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1108 => {
                __reduce1108(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1109 => {
                __reduce1109(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1110 => {
                __reduce1110(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1111 => {
                __reduce1111(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1112 => {
                __reduce1112(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1113 => {
                __reduce1113(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1114 => {
                __reduce1114(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1115 => {
                __reduce1115(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1116 => {
                __reduce1116(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1117 => {
                __reduce1117(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1118 => {
                __reduce1118(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1119 => {
                __reduce1119(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1120 => {
                __reduce1120(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1121 => {
                __reduce1121(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1122 => {
                __reduce1122(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1123 => {
                __reduce1123(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1124 => {
                __reduce1124(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1125 => {
                __reduce1125(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1126 => {
                __reduce1126(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1127 => {
                __reduce1127(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1128 => {
                __reduce1128(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1129 => {
                __reduce1129(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1130 => {
                // Ops = Op+ => ActionFn(630);
                let __sym0 = __pop_Variant56(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action630::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant58(__nt), __end));
                (1, 98)
            }
            1131 => {
                // PathComponents<BareIdent> = bare_ident => ActionFn(695);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action695::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant59(__nt), __end));
                (1, 99)
            }
            1132 => {
                // PathComponents<BareIdent> = (<BareIdent> "::")+, bare_ident => ActionFn(696);
                assert!(__symbols.len() >= 2);
                let __sym1 = __pop_Variant1(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = match super::__action696::<>(source_file, interned, _marker, __sym0, __sym1) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant59(__nt), __end));
                (2, 99)
            }
            1133 => {
                __reduce1133(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1134 => {
                __reduce1134(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1135 => {
                // Proc = "proc", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1527);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant27(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1527::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (7, 100)
            }
            1136 => {
                // Proc = "export", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1528);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant27(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1528::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (7, 100)
            }
            1137 => {
                // Proc = "proc", ".", ProcedureName, Block, "end" => ActionFn(1529);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant27(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1529::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 100)
            }
            1138 => {
                // Proc = "export", ".", ProcedureName, Block, "end" => ActionFn(1530);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant27(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1530::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 100)
            }
            1139 => {
                // Proc = Annotation+, "proc", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1531);
                assert!(__symbols.len() >= 8);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant27(__symbols);
                let __sym5 = __pop_Variant62(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant8(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant25(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = match super::__action1531::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (8, 100)
            }
            1140 => {
                // Proc = Annotation+, "export", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1532);
                assert!(__symbols.len() >= 8);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant27(__symbols);
                let __sym5 = __pop_Variant62(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant8(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant25(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = match super::__action1532::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (8, 100)
            }
            1141 => {
                // Proc = Annotation+, "proc", ".", ProcedureName, Block, "end" => ActionFn(1533);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant27(__symbols);
                let __sym3 = __pop_Variant8(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant25(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action1533::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (6, 100)
            }
            1142 => {
                // Proc = Annotation+, "export", ".", ProcedureName, Block, "end" => ActionFn(1534);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant27(__symbols);
                let __sym3 = __pop_Variant8(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant25(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = match super::__action1534::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (6, 100)
            }
            1143 => {
                // Proc = "export", ".", MaybeQualifiedProcedurePath, "->", ProcedureName => ActionFn(718);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant8(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant46(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action718::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (5, 100)
            }
            1144 => {
                // Proc = "export", ".", MaybeQualifiedProcedurePath => ActionFn(719);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant46(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action719::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (3, 100)
            }
            1145 => {
                __reduce1145(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1146 => {
                // ProcedureDef = "proc", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1523);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant27(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1523::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant60(__nt), __end));
                (7, 102)
            }
            1147 => {
                // ProcedureDef = "export", ".", ProcedureName, ".", U16, Block, "end" => ActionFn(1524);
                assert!(__symbols.len() >= 7);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant27(__symbols);
                let __sym4 = __pop_Variant62(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = match super::__action1524::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant60(__nt), __end));
                (7, 102)
            }
            1148 => {
                // ProcedureDef = "proc", ".", ProcedureName, Block, "end" => ActionFn(1525);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant27(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1525::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant60(__nt), __end));
                (5, 102)
            }
            1149 => {
                // ProcedureDef = "export", ".", ProcedureName, Block, "end" => ActionFn(1526);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant27(__symbols);
                let __sym2 = __pop_Variant8(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action1526::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant60(__nt), __end));
                (5, 102)
            }
            1150 => {
                // ProcedureName = bare_ident => ActionFn(740);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action740::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (1, 103)
            }
            1151 => {
                __reduce1151(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1152 => {
                // ProcedureName = quoted_ident => ActionFn(1535);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action1535::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (1, 103)
            }
            1153 => {
                // Push = "push", ".", IntOrHexImm => ActionFn(905);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant15(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action905::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (3, 104)
            }
            1154 => {
                // Push = "push", ".", (<IntOrHexImm> ".")+, IntOrHexImm => ActionFn(906);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant15(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action906::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (4, 104)
            }
            1155 => {
                // QualifiedName = bare_ident, "::", bare_ident => ActionFn(1515);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1515::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (3, 105)
            }
            1156 => {
                // QualifiedName = bare_ident, "::", (<BareIdent> "::")+, bare_ident => ActionFn(1516);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant1(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action1516::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (4, 105)
            }
            1157 => {
                // QualifiedName = bare_ident, "::", OpcodeName => ActionFn(1517);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant6(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1517::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (3, 105)
            }
            1158 => {
                // QualifiedName = bare_ident, "::", (<BareIdent> "::")+, OpcodeName => ActionFn(1518);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant6(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action1518::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (4, 105)
            }
            1159 => {
                // QualifiedName = OpcodeName, "::", bare_ident => ActionFn(1519);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant1(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1519::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (3, 105)
            }
            1160 => {
                // QualifiedName = OpcodeName, "::", (<BareIdent> "::")+, bare_ident => ActionFn(1520);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant1(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action1520::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (4, 105)
            }
            1161 => {
                // QualifiedName = OpcodeName, "::", OpcodeName => ActionFn(1521);
                assert!(__symbols.len() >= 3);
                let __sym2 = __pop_Variant6(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = match super::__action1521::<>(source_file, interned, _marker, __sym0, __sym1, __sym2) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (3, 105)
            }
            1162 => {
                // QualifiedName = OpcodeName, "::", (<BareIdent> "::")+, OpcodeName => ActionFn(1522);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant6(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = match super::__action1522::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant61(__nt), __end));
                (4, 105)
            }
            1163 => {
                // QuotedProcedureName = quoted_ident => ActionFn(635);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action635::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (1, 106)
            }
            1164 => {
                __reduce1164(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1165 => {
                __reduce1165(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1166 => {
                __reduce1166(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1167 => {
                // Repeat = "repeat", ".", uint, Block, "end" => ActionFn(637);
                assert!(__symbols.len() >= 5);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant27(__symbols);
                let __sym2 = __pop_Variant5(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = match super::__action637::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant39(__nt), __end));
                (5, 109)
            }
            1168 => {
                // Shift32 = U8 => ActionFn(210);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action210::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (1, 110)
            }
            1169 => {
                // StackWordOffset = U8 => ActionFn(219);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action219::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (1, 111)
            }
            1170 => {
                __reduce1170(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1171 => {
                __reduce1171(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1172 => {
                __reduce1172(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1173 => {
                __reduce1173(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1174 => {
                __reduce1174(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1175 => {
                __reduce1175(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1176 => {
                __reduce1176(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1177 => {
                __reduce1177(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1178 => {
                __reduce1178(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1179 => {
                __reduce1179(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1180 => {
                __reduce1180(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1181 => {
                __reduce1181(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1182 => {
                // Term = IntValue => ActionFn(638);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action638::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (1, 113)
            }
            1183 => {
                __reduce1183(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1184 => {
                __reduce1184(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1185 => {
                // Term = const_ident => ActionFn(764);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action764::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (1, 113)
            }
            1186 => {
                // U16 = uint => ActionFn(640);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action640::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant62(__nt), __end));
                (1, 114)
            }
            1187 => {
                // U32 = uint => ActionFn(641);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action641::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (1, 115)
            }
            1188 => {
                // U32 = hex_value => ActionFn(642);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action642::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (1, 115)
            }
            1189 => {
                // U32 = bin_value => ActionFn(643);
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action643::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (1, 115)
            }
            1190 => {
                // U8 = uint => ActionFn(644);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = match super::__action644::<>(source_file, interned, _marker, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (1, 116)
            }
            1191 => {
                __reduce1191(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1192 => {
                __reduce1192(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1193 => {
                __reduce1193(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1194 => {
                // __Forms = Forms => ActionFn(0);
                let __sym0 = __pop_Variant38(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(source_file, interned, _marker, __sym0);
                return Some(Ok(__nt));
            }
            1195 => {
                __reduce1195(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            1196 => {
                __reduce1196(source_file, interned, _marker, __lookahead_start, __symbols, core::marker::PhantomData::<(&())>)
            }
            _ => panic!("invalid action code {__action}")
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant61<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, (Ident, LibraryPath), u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Attribute, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, BinEncodedValue, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Block, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, ConstantExpr, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, DocumentationType, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Felt, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Form, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Ident, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<Arc<str>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<Felt>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<IntValue>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<Span<u8>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<u16>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<u32>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Immediate<u8>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Instruction, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, IntValue, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, InvocationTarget, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, MetaExpr, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Op, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Block>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Ident>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Immediate<Felt>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Immediate<Span<u8>>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Immediate<u16>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Immediate<u32>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Immediate<u8>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<ProcedureName>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Span<WordValue>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<Span<u8>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Option<u16>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Procedure, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, ProcedureAlias, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, ProcedureName, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, SmallOpsVec, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Span<(Ident, MetaExpr)>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Span<LibraryPath>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Span<Word>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Span<u8>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Token<'input>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Felt>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Form>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Ident>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Immediate<IntValue>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<MetaExpr>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Op>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Vec<Span<(Ident, MetaExpr)>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant63<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, Visibility, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant63(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Attribute>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Felt>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Form>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Ident>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Immediate<IntValue>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<MetaExpr>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<SmallOpsVec>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, bool, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, u16, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, u32, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, u64, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, u8, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, &'input str, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>
    ) -> (u32, &'static str, u32)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce1<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <BareIdent>) = "->", OpcodeName => ActionFn(647);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action647::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 0)
    }
    fn __reduce3<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <BareIdent>)? = "->", OpcodeName => ActionFn(665);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action665::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 1)
    }
    fn __reduce4<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <BareIdent>)? =  => ActionFn(427);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action427::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 1)
    }
    fn __reduce5<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <ProcedureName>) = "->", ProcedureName => ActionFn(420);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action420::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 2)
    }
    fn __reduce6<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <ProcedureName>)? = "->", ProcedureName => ActionFn(669);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action669::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 3)
    }
    fn __reduce7<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("->" <ProcedureName>)? =  => ActionFn(419);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action419::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 3)
    }
    fn __reduce8<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("." <U8>) = ".", U8 => ActionFn(399);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action399::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 4)
    }
    fn __reduce9<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("." <U8>)? = ".", U8 => ActionFn(672);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action672::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 5)
    }
    fn __reduce10<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ("." <U8>)? =  => ActionFn(398);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action398::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 5)
    }
    fn __reduce12<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::") = OpcodeName, "::" => ActionFn(649);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action649::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    fn __reduce13<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")* =  => ActionFn(393);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action393::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 7)
    }
    fn __reduce14<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")* = (<BareIdent> "::")+ => ActionFn(394);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action394::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 7)
    }
    fn __reduce16<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")+ = OpcodeName, "::" => ActionFn(686);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action686::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 8)
    }
    fn __reduce18<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")+ = (<BareIdent> "::")+, OpcodeName, "::" => ActionFn(688);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action688::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 8)
    }
    fn __reduce20<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")? = OpcodeName, "::" => ActionFn(690);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action690::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    fn __reduce21<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<BareIdent> "::")? =  => ActionFn(392);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action392::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 9)
    }
    fn __reduce22<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Felt> ",") = Felt, "," => ActionFn(435);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action435::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 10)
    }
    fn __reduce23<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Felt> ",")* =  => ActionFn(433);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action433::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 11)
    }
    fn __reduce24<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Felt> ",")* = (<Felt> ",")+ => ActionFn(434);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action434::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 11)
    }
    fn __reduce25<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Felt> ",")+ = Felt, "," => ActionFn(702);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action702::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 12)
    }
    fn __reduce26<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<Felt> ",")+ = (<Felt> ",")+, Felt, "," => ActionFn(703);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action703::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 12)
    }
    fn __reduce27<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<IntOrHexImm> ".") = IntOrHexImm, "." => ActionFn(453);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action453::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 13)
    }
    fn __reduce28<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<IntOrHexImm> ".")* =  => ActionFn(451);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action451::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 14)
    }
    fn __reduce29<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<IntOrHexImm> ".")* = (<IntOrHexImm> ".")+ => ActionFn(452);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action452::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 14)
    }
    fn __reduce30<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<IntOrHexImm> ".")+ = IntOrHexImm, "." => ActionFn(706);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action706::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 15)
    }
    fn __reduce31<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<IntOrHexImm> ".")+ = (<IntOrHexImm> ".")+, IntOrHexImm, "." => ActionFn(707);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action707::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 15)
    }
    fn __reduce32<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaExpr> ",") = MetaExpr, "," => ActionFn(440);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action440::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 16)
    }
    fn __reduce33<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaExpr> ",")* =  => ActionFn(438);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action438::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 17)
    }
    fn __reduce34<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaExpr> ",")* = (<MetaExpr> ",")+ => ActionFn(439);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action439::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 17)
    }
    fn __reduce35<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaExpr> ",")+ = MetaExpr, "," => ActionFn(710);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action710::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 18)
    }
    fn __reduce36<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaExpr> ",")+ = (<MetaExpr> ",")+, MetaExpr, "," => ActionFn(711);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action711::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 18)
    }
    fn __reduce37<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaKeyValue> ",") = MetaKeyValue, "," => ActionFn(443);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action443::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 19)
    }
    fn __reduce38<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaKeyValue> ",")* =  => ActionFn(441);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action441::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 20)
    }
    fn __reduce39<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaKeyValue> ",")* = (<MetaKeyValue> ",")+ => ActionFn(442);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action442::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 20)
    }
    fn __reduce40<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaKeyValue> ",")+ = MetaKeyValue, "," => ActionFn(714);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action714::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 21)
    }
    fn __reduce41<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // (<MetaKeyValue> ",")+ = (<MetaKeyValue> ",")+, MetaKeyValue, "," => ActionFn(715);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action715::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 21)
    }
    fn __reduce42<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(430);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action430::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 22)
    }
    fn __reduce43<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(429);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action429::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 23)
    }
    fn __reduce50<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", OpcodeName, "(", MetaExpr, ")" => ActionFn(732);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action732::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 26)
    }
    fn __reduce51<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", OpcodeName, "(", (<MetaExpr> ",")+, MetaExpr, ")" => ActionFn(733);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant17(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action733::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (6, 26)
    }
    fn __reduce57<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation = "@", OpcodeName => ActionFn(739);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action739::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 26)
    }
    fn __reduce58<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation* =  => ActionFn(423);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action423::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (0, 27)
    }
    fn __reduce59<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation* = Annotation+ => ActionFn(424);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action424::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 27)
    }
    fn __reduce60<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation => ActionFn(436);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action436::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 28)
    }
    fn __reduce61<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Annotation+ = Annotation+, Annotation => ActionFn(437);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action437::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 28)
    }
    fn __reduce64<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Attribute = OpcodeName, "(", MetaExpr, ")" => ActionFn(728);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action728::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (4, 29)
    }
    fn __reduce65<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Attribute = OpcodeName, "(", (<MetaExpr> ",")+, MetaExpr, ")" => ActionFn(729);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action729::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 29)
    }
    fn __reduce71<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Attribute = OpcodeName => ActionFn(655);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action655::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 29)
    }
    fn __reduce73<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BareIdent = OpcodeName => ActionFn(237);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action237::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    fn __reduce75<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // BareProcedureName = OpcodeName => ActionFn(657);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action657::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 31)
    }
    fn __reduce79<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block? = Block => ActionFn(412);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action412::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 35)
    }
    fn __reduce80<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Block? =  => ActionFn(413);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action413::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 35)
    }
    fn __reduce81<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Call = "exec", ".", InvocationTarget => ActionFn(143);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action143::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 36)
    }
    fn __reduce82<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Call = "call", ".", InvocationTarget => ActionFn(144);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action144::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 36)
    }
    fn __reduce83<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Call = "syscall", ".", InvocationTarget => ActionFn(145);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action145::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 36)
    }
    fn __reduce84<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<Felt> = Felt => ActionFn(704);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action704::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 37)
    }
    fn __reduce85<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<Felt> = (<Felt> ",")+, Felt => ActionFn(705);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action705::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 37)
    }
    fn __reduce86<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<MetaExpr> = MetaExpr => ActionFn(712);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action712::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 38)
    }
    fn __reduce87<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<MetaExpr> = (<MetaExpr> ",")+, MetaExpr => ActionFn(713);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action713::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 38)
    }
    fn __reduce88<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<MetaKeyValue> = MetaKeyValue => ActionFn(716);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action716::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 39)
    }
    fn __reduce89<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // CommaDelimited<MetaKeyValue> = (<MetaKeyValue> ",")+, MetaKeyValue => ActionFn(717);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action717::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (2, 39)
    }
    fn __reduce90<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Condition = "true" => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 40)
    }
    fn __reduce91<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Condition = "false" => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 40)
    }
    fn __reduce95<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConstantExpr = ConstantExpr100 => ActionFn(378);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action378::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 42)
    }
    fn __reduce99<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ConstantExpr100 = Term => ActionFn(382);
        let __sym0 = __pop_Variant34(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action382::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 43)
    }
    fn __reduce101<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "breakpoint" => ActionFn(146);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action146::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 45)
    }
    fn __reduce102<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "stack", ".", U8 => ActionFn(877);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action877::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 45)
    }
    fn __reduce104<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "stack" => ActionFn(879);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action879::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce105<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "mem", ".", U32, ".", U32 => ActionFn(767);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action767::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (7, 45)
    }
    fn __reduce109<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "mem", ".", U32 => ActionFn(801);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action801::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 45)
    }
    fn __reduce111<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "mem" => ActionFn(803);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action803::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce112<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "local", ".", U16, ".", U16 => ActionFn(779);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant62(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action779::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (7, 45)
    }
    fn __reduce116<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "local", ".", U16 => ActionFn(795);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action795::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 45)
    }
    fn __reduce118<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "local" => ActionFn(797);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action797::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce119<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "adv_stack", ".", U16 => ActionFn(798);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action798::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 45)
    }
    fn __reduce121<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "debug", ".", "adv_stack" => ActionFn(800);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action800::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce122<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "emit", ".", U32 => ActionFn(771);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action771::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce124<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Debug = "trace", ".", U32 => ActionFn(773);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action773::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 45)
    }
    fn __reduce127<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DotDelimited<IntOrHexImm> = IntOrHexImm => ActionFn(708);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action708::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 47)
    }
    fn __reduce128<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // DotDelimited<IntOrHexImm> = (<IntOrHexImm> ".")+, IntOrHexImm => ActionFn(709);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action709::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 47)
    }
    fn __reduce130<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "eq", ".", Felt => ActionFn(911);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action911::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce132<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "eq" => ActionFn(913);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action913::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce133<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "neq", ".", Felt => ActionFn(914);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action914::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce135<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "neq" => ActionFn(916);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action916::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce136<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "lt", ".", Felt => ActionFn(917);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action917::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce138<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "lt" => ActionFn(919);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action919::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce139<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "lte", ".", Felt => ActionFn(920);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action920::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce141<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "lte" => ActionFn(922);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action922::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce142<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "gt", ".", Felt => ActionFn(923);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action923::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce144<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "gt" => ActionFn(925);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action925::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce145<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "gte", ".", Felt => ActionFn(926);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action926::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce147<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "gte" => ActionFn(928);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action928::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce148<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "add", ".", Felt => ActionFn(929);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action929::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce150<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "add" => ActionFn(931);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action931::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce151<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "sub", ".", Felt => ActionFn(932);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action932::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce153<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "sub" => ActionFn(934);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action934::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce154<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "mul", ".", Felt => ActionFn(935);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action935::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 49)
    }
    fn __reduce156<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithFeltImmediate = "mul" => ActionFn(937);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action937::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 49)
    }
    fn __reduce169<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32and", ".", U32 => ActionFn(813);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action813::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce171<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32and" => ActionFn(815);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action815::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce172<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32or", ".", U32 => ActionFn(816);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action816::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce174<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32or" => ActionFn(818);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action818::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce175<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32xor", ".", U32 => ActionFn(819);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action819::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce177<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32xor" => ActionFn(821);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action821::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce178<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32not", ".", U32 => ActionFn(822);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action822::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce180<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32not" => ActionFn(824);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action824::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce181<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_add", ".", U32 => ActionFn(825);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action825::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce183<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_add" => ActionFn(827);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action827::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce184<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_sub", ".", U32 => ActionFn(828);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action828::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce186<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_sub" => ActionFn(830);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action830::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce187<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_mul", ".", U32 => ActionFn(831);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action831::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce189<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32wrapping_mul" => ActionFn(833);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action833::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce190<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_add", ".", U32 => ActionFn(834);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action834::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce192<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_add" => ActionFn(836);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action836::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce193<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_sub", ".", U32 => ActionFn(837);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action837::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce195<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_sub" => ActionFn(839);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action839::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce196<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_mul", ".", U32 => ActionFn(840);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action840::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce198<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32overflowing_mul" => ActionFn(842);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action842::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce199<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32shl", ".", Shift32 => ActionFn(978);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action978::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce201<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32shl" => ActionFn(980);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action980::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce202<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32shr", ".", Shift32 => ActionFn(981);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action981::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce204<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32shr" => ActionFn(983);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action983::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce205<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32rotl", ".", Shift32 => ActionFn(984);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action984::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce207<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32rotl" => ActionFn(986);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action986::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce208<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32rotr", ".", Shift32 => ActionFn(987);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action987::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce210<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32rotr" => ActionFn(989);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action989::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce211<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32lt", ".", U32 => ActionFn(843);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action843::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce213<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32lt" => ActionFn(845);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action845::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce214<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32lte", ".", U32 => ActionFn(846);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action846::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce216<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32lte" => ActionFn(848);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action848::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce217<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32gt", ".", U32 => ActionFn(849);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action849::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce219<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32gt" => ActionFn(851);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action851::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce220<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32gte", ".", U32 => ActionFn(852);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action852::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce222<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32gte" => ActionFn(854);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action854::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce223<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32min", ".", U32 => ActionFn(855);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action855::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce225<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32min" => ActionFn(857);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action857::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce226<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32max", ".", U32 => ActionFn(858);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action858::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 50)
    }
    fn __reduce228<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // FoldableInstWithU32Immediate = "u32max" => ActionFn(860);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action860::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 50)
    }
    fn __reduce229<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = Doc => ActionFn(2);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce230<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = Import => ActionFn(3);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce231<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = Const => ActionFn(4);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce232<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = AdvMap => ActionFn(5);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce233<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = Begin => ActionFn(6);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce234<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form = Proc => ActionFn(7);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 51)
    }
    fn __reduce235<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form+ = Form => ActionFn(431);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action431::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 52)
    }
    fn __reduce236<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Form+ = Form+, Form => ActionFn(432);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action432::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 52)
    }
    fn __reduce237<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Forms = Form+, EOF => ActionFn(1);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action1::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 53)
    }
    fn __reduce238<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "true", "else", Block, "end" => ActionFn(746);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action746::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (6, 54)
    }
    fn __reduce239<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "false", "else", Block, "end" => ActionFn(747);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant27(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action747::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (6, 54)
    }
    fn __reduce240<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "true", Block, "else", Block, "end" => ActionFn(748);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action748::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (7, 54)
    }
    fn __reduce241<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "false", Block, "else", Block, "end" => ActionFn(749);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant27(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action749::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (7, 54)
    }
    fn __reduce242<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "true", Block, "else", "end" => ActionFn(750);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action750::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (6, 54)
    }
    fn __reduce243<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "false", Block, "else", "end" => ActionFn(751);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action751::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (6, 54)
    }
    fn __reduce244<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "true", Block, "end" => ActionFn(752);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action752::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (5, 54)
    }
    fn __reduce245<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IfElse = "if", ".", "false", Block, "end" => ActionFn(753);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action753::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (5, 54)
    }
    fn __reduce246<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Imm<Felt> = ".", Felt => ActionFn(907);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action907::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (2, 55)
    }
    fn __reduce248<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Imm<Shift32> = ".", Shift32 => ActionFn(974);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action974::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (2, 56)
    }
    fn __reduce250<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Imm<U16> = ".", U16 => ActionFn(777);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action777::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (2, 57)
    }
    fn __reduce252<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Imm<U32> = ".", U32 => ActionFn(765);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action765::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (2, 58)
    }
    fn __reduce254<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Imm<U8> = ".", U8 => ActionFn(873);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action873::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 59)
    }
    fn __reduce256<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmError = quoted_string => ActionFn(1059);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1059::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 60)
    }
    fn __reduce257<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmError = quoted_ident => ActionFn(1060);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1060::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 60)
    }
    fn __reduce259<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmValue<Felt> = Felt => ActionFn(612);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action612::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 61)
    }
    fn __reduce261<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmValue<Shift32> = Shift32 => ActionFn(613);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action613::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 62)
    }
    fn __reduce263<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmValue<U16> = U16 => ActionFn(614);
        let __sym0 = __pop_Variant62(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action614::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 63)
    }
    fn __reduce265<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmValue<U32> = U32 => ActionFn(615);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action615::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 64)
    }
    fn __reduce267<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ImmValue<U8> = U8 => ActionFn(616);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action616::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (1, 65)
    }
    fn __reduce272<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "insert_hdword" => ActionFn(1159);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1159::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce273<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "insert_hdword_d" => ActionFn(1160);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1160::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce274<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "insert_hperm" => ActionFn(1161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1161::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce275<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "insert_mem" => ActionFn(1162);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1162::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce276<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_mapval" => ActionFn(1163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1163::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce277<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_mapvaln" => ActionFn(1164);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1164::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce278<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "has_mapkey" => ActionFn(1165);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1165::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce279<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_mtnode" => ActionFn(1166);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1166::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce280<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_smtpeek" => ActionFn(1167);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1167::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce281<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_u64div" => ActionFn(1168);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1168::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce282<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv", ".", "push_falcon_div" => ActionFn(1169);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1169::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce283<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = Call => ActionFn(49);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce284<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "breakpoint" => ActionFn(880);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action880::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce285<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "stack", ".", U8 => ActionFn(881);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action881::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce287<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "stack" => ActionFn(883);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action883::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce288<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "mem", ".", U32, ".", U32 => ActionFn(884);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action884::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (7, 67)
    }
    fn __reduce292<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "mem", ".", U32 => ActionFn(888);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action888::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce294<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "mem" => ActionFn(890);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action890::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce295<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "local", ".", U16, ".", U16 => ActionFn(891);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant62(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action891::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (7, 67)
    }
    fn __reduce299<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "local", ".", U16 => ActionFn(895);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action895::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce301<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "local" => ActionFn(897);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action897::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce302<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "adv_stack", ".", U16 => ActionFn(898);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action898::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce304<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "debug", ".", "adv_stack" => ActionFn(900);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action900::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce305<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "emit", ".", U32 => ActionFn(901);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action901::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce307<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "trace", ".", U32 => ActionFn(903);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action903::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce309<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "exp.u", BitSize => ActionFn(1158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action1158::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 67)
    }
    fn __reduce310<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert" => ActionFn(1126);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1126::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce311<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert", ".", "err", "=", quoted_string => ActionFn(1127);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1127::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce312<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert", ".", "err", "=", quoted_ident => ActionFn(1128);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1128::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce314<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assertz" => ActionFn(1130);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1130::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce315<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assertz", ".", "err", "=", quoted_string => ActionFn(1131);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1131::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce316<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assertz", ".", "err", "=", quoted_ident => ActionFn(1132);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1132::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce318<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eq" => ActionFn(1134);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1134::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce319<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eq", ".", "err", "=", quoted_string => ActionFn(1135);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1135::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce320<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eq", ".", "err", "=", quoted_ident => ActionFn(1136);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1136::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce322<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eqw" => ActionFn(1138);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1138::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce323<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eqw", ".", "err", "=", quoted_string => ActionFn(1139);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1139::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce324<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "assert_eqw", ".", "err", "=", quoted_ident => ActionFn(1140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1140::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce326<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert" => ActionFn(1142);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1142::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce327<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert", ".", "err", "=", quoted_string => ActionFn(1143);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1143::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce328<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert", ".", "err", "=", quoted_ident => ActionFn(1144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1144::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce330<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert2" => ActionFn(1146);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1146::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce331<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert2", ".", "err", "=", quoted_string => ActionFn(1147);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1147::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce332<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assert2", ".", "err", "=", quoted_ident => ActionFn(1148);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1148::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce334<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assertw" => ActionFn(1150);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1150::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce335<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assertw", ".", "err", "=", quoted_string => ActionFn(1151);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1151::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce336<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32assertw", ".", "err", "=", quoted_ident => ActionFn(1152);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1152::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce338<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_verify" => ActionFn(1154);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1154::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce339<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_verify", ".", "err", "=", quoted_string => ActionFn(1155);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1155::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce340<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_verify", ".", "err", "=", quoted_ident => ActionFn(1156);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1156::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 67)
    }
    fn __reduce342<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "exp", ".", Felt => ActionFn(1123);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1123::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce344<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "exp" => ActionFn(1125);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1125::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce345<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "locaddr", ".", U16 => ActionFn(1113);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1113::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce347<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "loc_load", ".", U16 => ActionFn(1115);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1115::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce349<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "loc_loadw", ".", U16 => ActionFn(1117);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1117::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce351<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "loc_store", ".", U16 => ActionFn(1119);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1119::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce353<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "loc_storew", ".", U16 => ActionFn(1121);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1121::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce355<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv_push", ".", OneBasedStackIndex => ActionFn(1100);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1100::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce368<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_load", ".", U32 => ActionFn(1088);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1088::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce370<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_load" => ActionFn(1090);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1090::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce371<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_loadw", ".", U32 => ActionFn(1091);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1091::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce373<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_loadw" => ActionFn(1093);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1093::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce374<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_store", ".", U32 => ActionFn(1094);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1094::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce376<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_store" => ActionFn(1096);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1096::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce377<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_storew", ".", U32 => ActionFn(1097);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1097::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce379<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_storew" => ActionFn(1099);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1099::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce380<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "procref", ".", InvocationTarget => ActionFn(1087);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1087::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 67)
    }
    fn __reduce381<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv_pipe" => ActionFn(58);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce382<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "adv_loadw" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce383<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "and" => ActionFn(60);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce384<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "arithmetic_circuit_eval" => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action61::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce385<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "caller" => ActionFn(62);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action62::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce386<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "cdrop" => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce387<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "cdropw" => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action64::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce388<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "clk" => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce389<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "cswap" => ActionFn(66);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action66::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce390<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "cswapw" => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce391<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "drop" => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce392<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "dropw" => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce393<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "dyncall" => ActionFn(70);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce394<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "dynexec" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce395<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "eqw" => ActionFn(72);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action72::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce396<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2add" => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce397<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2div" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce398<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2inv" => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action75::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce399<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2mul" => ActionFn(76);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action76::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce400<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2neg" => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action77::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce401<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ext2sub" => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action78::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce402<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "fri_ext2fold4" => ActionFn(79);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action79::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce403<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "hash" => ActionFn(80);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action80::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce404<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "hperm" => ActionFn(81);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action81::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce405<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "hmerge" => ActionFn(82);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action82::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce406<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "ilog2" => ActionFn(83);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action83::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce407<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "inv" => ActionFn(84);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action84::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce408<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "is_odd" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action85::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce409<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mem_stream" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action86::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce410<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_get" => ActionFn(87);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action87::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce411<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_merge" => ActionFn(88);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action88::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce412<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "mtree_set" => ActionFn(89);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action89::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce413<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "neg" => ActionFn(90);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action90::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce414<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "not" => ActionFn(91);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action91::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce415<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "nop" => ActionFn(92);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce416<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "or" => ActionFn(93);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action93::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce417<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "padw" => ActionFn(94);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce418<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "pow2" => ActionFn(95);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action95::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce419<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "horner_eval_base" => ActionFn(96);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action96::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce420<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "horner_eval_ext" => ActionFn(97);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action97::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce421<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "sdepth" => ActionFn(98);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action98::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce422<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "swapdw" => ActionFn(99);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce423<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32cast" => ActionFn(100);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action100::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce424<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32overflowing_add3" => ActionFn(101);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action101::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce425<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32overflowing_madd" => ActionFn(102);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce426<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32popcnt" => ActionFn(103);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action103::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce427<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32clz" => ActionFn(104);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action104::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce428<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32ctz" => ActionFn(105);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action105::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce429<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32clo" => ActionFn(106);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action106::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce430<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32cto" => ActionFn(107);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce431<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32split" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action108::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce432<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32test" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action109::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce433<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32testw" => ActionFn(110);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action110::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce434<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32wrapping_add3" => ActionFn(111);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action111::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce435<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "u32wrapping_madd" => ActionFn(112);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action112::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce436<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Inst = "xor" => ActionFn(113);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action113::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 67)
    }
    fn __reduce437<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithBitSizeImmediate = "exp.u", BitSize => ActionFn(208);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action208::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 68)
    }
    fn __reduce438<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert" => ActionFn(125);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action125::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce439<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert", ".", "err", "=", quoted_string => ActionFn(1063);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1063::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce440<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert", ".", "err", "=", quoted_ident => ActionFn(1064);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1064::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce442<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assertz" => ActionFn(127);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action127::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce443<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assertz", ".", "err", "=", quoted_string => ActionFn(1066);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1066::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce444<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assertz", ".", "err", "=", quoted_ident => ActionFn(1067);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1067::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce446<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eq" => ActionFn(129);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action129::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce447<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eq", ".", "err", "=", quoted_string => ActionFn(1069);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1069::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce448<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eq", ".", "err", "=", quoted_ident => ActionFn(1070);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1070::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce450<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eqw" => ActionFn(131);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action131::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce451<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eqw", ".", "err", "=", quoted_string => ActionFn(1072);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1072::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce452<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "assert_eqw", ".", "err", "=", quoted_ident => ActionFn(1073);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1073::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce454<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert" => ActionFn(133);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action133::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce455<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert", ".", "err", "=", quoted_string => ActionFn(1075);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1075::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce456<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert", ".", "err", "=", quoted_ident => ActionFn(1076);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1076::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce458<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert2" => ActionFn(135);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action135::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce459<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert2", ".", "err", "=", quoted_string => ActionFn(1078);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1078::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce460<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assert2", ".", "err", "=", quoted_ident => ActionFn(1079);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1079::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce462<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assertw" => ActionFn(137);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action137::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce463<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assertw", ".", "err", "=", quoted_string => ActionFn(1081);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1081::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce464<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "u32assertw", ".", "err", "=", quoted_ident => ActionFn(1082);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1082::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce466<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "mtree_verify" => ActionFn(139);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action139::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 69)
    }
    fn __reduce467<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "mtree_verify", ".", "err", "=", quoted_string => ActionFn(1084);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1084::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce468<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithErrorCode = "mtree_verify", ".", "err", "=", quoted_ident => ActionFn(1085);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1085::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (5, 69)
    }
    fn __reduce470<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithFeltImmediate = "exp", ".", Felt => ActionFn(941);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action941::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 70)
    }
    fn __reduce472<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithFeltImmediate = "exp" => ActionFn(943);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action943::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 70)
    }
    fn __reduce473<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithLocalIndex = "locaddr", ".", U16 => ActionFn(783);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action783::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 71)
    }
    fn __reduce475<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithLocalIndex = "loc_load", ".", U16 => ActionFn(785);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action785::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 71)
    }
    fn __reduce477<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithLocalIndex = "loc_loadw", ".", U16 => ActionFn(787);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action787::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 71)
    }
    fn __reduce479<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithLocalIndex = "loc_store", ".", U16 => ActionFn(789);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action789::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 71)
    }
    fn __reduce481<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithLocalIndex = "loc_storew", ".", U16 => ActionFn(791);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action791::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 71)
    }
    fn __reduce483<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithStackIndex = "adv_push", ".", OneBasedStackIndex => ActionFn(618);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action618::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 72)
    }
    fn __reduce496<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_load", ".", U32 => ActionFn(861);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action861::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 73)
    }
    fn __reduce498<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_load" => ActionFn(863);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action863::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    fn __reduce499<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_loadw", ".", U32 => ActionFn(864);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action864::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 73)
    }
    fn __reduce501<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_loadw" => ActionFn(866);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action866::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    fn __reduce502<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_store", ".", U32 => ActionFn(867);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action867::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 73)
    }
    fn __reduce504<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_store" => ActionFn(869);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action869::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    fn __reduce505<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_storew", ".", U32 => ActionFn(870);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action870::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 73)
    }
    fn __reduce507<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InstWithU32Immediate = "mem_storew" => ActionFn(872);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action872::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 73)
    }
    fn __reduce508<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "insert_hdword" => ActionFn(1170);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1170::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce509<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "insert_hdword_d" => ActionFn(1171);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1171::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce510<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "insert_hperm" => ActionFn(1172);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1172::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce511<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "insert_mem" => ActionFn(1173);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1173::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce512<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_mapval" => ActionFn(1174);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1174::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce513<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_mapvaln" => ActionFn(1175);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1175::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce514<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "has_mapkey" => ActionFn(1176);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1176::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce515<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_mtnode" => ActionFn(1177);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1177::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce516<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_smtpeek" => ActionFn(1178);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1178::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce517<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_u64div" => ActionFn(1179);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1179::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce518<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv", ".", "push_falcon_div" => ActionFn(1180);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1180::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce519<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = Call => ActionFn(1181);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1181::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce520<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "breakpoint" => ActionFn(1182);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1182::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce521<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "stack", ".", U8 => ActionFn(1183);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1183::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce523<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "stack" => ActionFn(1185);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1185::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce524<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "mem", ".", U32, ".", U32 => ActionFn(1186);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action1186::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (7, 74)
    }
    fn __reduce528<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "mem", ".", U32 => ActionFn(1190);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1190::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce530<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "mem" => ActionFn(1192);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1192::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce531<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "local", ".", U16, ".", U16 => ActionFn(1193);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant62(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action1193::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (7, 74)
    }
    fn __reduce535<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "local", ".", U16 => ActionFn(1197);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1197::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce537<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "local" => ActionFn(1199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1199::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce538<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "adv_stack", ".", U16 => ActionFn(1200);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1200::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce540<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "debug", ".", "adv_stack" => ActionFn(1202);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1202::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce541<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "emit", ".", U32 => ActionFn(1203);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1203::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce543<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "trace", ".", U32 => ActionFn(1205);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1205::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce545<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "exp.u", BitSize => ActionFn(1207);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action1207::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 74)
    }
    fn __reduce546<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert" => ActionFn(1208);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1208::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce547<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert", ".", "err", "=", quoted_string => ActionFn(1209);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1209::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce548<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert", ".", "err", "=", quoted_ident => ActionFn(1210);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1210::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce550<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assertz" => ActionFn(1212);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1212::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce551<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assertz", ".", "err", "=", quoted_string => ActionFn(1213);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1213::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce552<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assertz", ".", "err", "=", quoted_ident => ActionFn(1214);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1214::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce554<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eq" => ActionFn(1216);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1216::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce555<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eq", ".", "err", "=", quoted_string => ActionFn(1217);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1217::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce556<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eq", ".", "err", "=", quoted_ident => ActionFn(1218);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1218::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce558<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eqw" => ActionFn(1220);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1220::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce559<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eqw", ".", "err", "=", quoted_string => ActionFn(1221);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1221::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce560<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "assert_eqw", ".", "err", "=", quoted_ident => ActionFn(1222);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1222::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce562<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert" => ActionFn(1224);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1224::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce563<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert", ".", "err", "=", quoted_string => ActionFn(1225);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1225::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce564<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert", ".", "err", "=", quoted_ident => ActionFn(1226);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1226::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce566<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert2" => ActionFn(1228);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1228::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce567<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert2", ".", "err", "=", quoted_string => ActionFn(1229);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1229::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce568<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assert2", ".", "err", "=", quoted_ident => ActionFn(1230);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1230::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce570<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assertw" => ActionFn(1232);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1232::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce571<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assertw", ".", "err", "=", quoted_string => ActionFn(1233);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1233::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce572<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32assertw", ".", "err", "=", quoted_ident => ActionFn(1234);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1234::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce574<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_verify" => ActionFn(1236);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1236::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce575<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_verify", ".", "err", "=", quoted_string => ActionFn(1237);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1237::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce576<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_verify", ".", "err", "=", quoted_ident => ActionFn(1238);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1238::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 74)
    }
    fn __reduce578<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "exp", ".", Felt => ActionFn(1240);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1240::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce580<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "exp" => ActionFn(1242);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1242::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce581<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "locaddr", ".", U16 => ActionFn(1243);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1243::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce583<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "loc_load", ".", U16 => ActionFn(1245);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1245::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce585<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "loc_loadw", ".", U16 => ActionFn(1247);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1247::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce587<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "loc_store", ".", U16 => ActionFn(1249);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1249::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce589<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "loc_storew", ".", U16 => ActionFn(1251);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1251::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce591<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv_push", ".", OneBasedStackIndex => ActionFn(1253);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1253::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce604<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_load", ".", U32 => ActionFn(1266);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1266::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce606<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_load" => ActionFn(1268);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1268::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce607<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_loadw", ".", U32 => ActionFn(1269);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1269::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce609<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_loadw" => ActionFn(1271);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1271::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce610<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_store", ".", U32 => ActionFn(1272);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1272::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce612<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_store" => ActionFn(1274);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1274::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce613<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_storew", ".", U32 => ActionFn(1275);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1275::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce615<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_storew" => ActionFn(1277);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1277::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce616<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "procref", ".", InvocationTarget => ActionFn(1278);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1278::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 74)
    }
    fn __reduce617<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv_pipe" => ActionFn(1279);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1279::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce618<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "adv_loadw" => ActionFn(1280);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1280::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce619<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "and" => ActionFn(1281);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1281::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce620<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "arithmetic_circuit_eval" => ActionFn(1282);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1282::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce621<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "caller" => ActionFn(1283);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1283::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce622<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "cdrop" => ActionFn(1284);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1284::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce623<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "cdropw" => ActionFn(1285);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1285::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce624<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "clk" => ActionFn(1286);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1286::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce625<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "cswap" => ActionFn(1287);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1287::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce626<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "cswapw" => ActionFn(1288);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1288::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce627<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "drop" => ActionFn(1289);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1289::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce628<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "dropw" => ActionFn(1290);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1290::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce629<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "dyncall" => ActionFn(1291);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1291::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce630<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "dynexec" => ActionFn(1292);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1292::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce631<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "eqw" => ActionFn(1293);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1293::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce632<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2add" => ActionFn(1294);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1294::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce633<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2div" => ActionFn(1295);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1295::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce634<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2inv" => ActionFn(1296);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1296::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce635<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2mul" => ActionFn(1297);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1297::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce636<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2neg" => ActionFn(1298);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1298::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce637<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ext2sub" => ActionFn(1299);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1299::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce638<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "fri_ext2fold4" => ActionFn(1300);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1300::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce639<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "hash" => ActionFn(1301);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1301::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce640<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "hperm" => ActionFn(1302);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1302::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce641<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "hmerge" => ActionFn(1303);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1303::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce642<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "ilog2" => ActionFn(1304);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1304::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce643<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "inv" => ActionFn(1305);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1305::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce644<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "is_odd" => ActionFn(1306);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1306::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce645<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mem_stream" => ActionFn(1307);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1307::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce646<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_get" => ActionFn(1308);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1308::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce647<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_merge" => ActionFn(1309);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1309::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce648<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "mtree_set" => ActionFn(1310);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1310::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce649<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "neg" => ActionFn(1311);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1311::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce650<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "not" => ActionFn(1312);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1312::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce651<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "nop" => ActionFn(1313);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1313::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce652<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "or" => ActionFn(1314);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1314::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce653<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "padw" => ActionFn(1315);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1315::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce654<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "pow2" => ActionFn(1316);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1316::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce655<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "horner_eval_base" => ActionFn(1317);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1317::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce656<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "horner_eval_ext" => ActionFn(1318);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1318::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce657<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "sdepth" => ActionFn(1319);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1319::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce658<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "swapdw" => ActionFn(1320);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1320::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce659<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32cast" => ActionFn(1321);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1321::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce660<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32overflowing_add3" => ActionFn(1322);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1322::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce661<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32overflowing_madd" => ActionFn(1323);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1323::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce662<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32popcnt" => ActionFn(1324);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1324::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce663<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32clz" => ActionFn(1325);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1325::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce664<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32ctz" => ActionFn(1326);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1326::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce665<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32clo" => ActionFn(1327);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1327::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce666<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32cto" => ActionFn(1328);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1328::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce667<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32split" => ActionFn(1329);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1329::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce668<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32test" => ActionFn(1330);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1330::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce669<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32testw" => ActionFn(1331);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1331::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce670<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32wrapping_add3" => ActionFn(1332);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1332::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce671<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "u32wrapping_madd" => ActionFn(1333);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1333::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce672<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = "xor" => ActionFn(1334);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1334::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce673<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Instruction = MacroInst => ActionFn(44);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action44::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 74)
    }
    fn __reduce674<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IntOrHexImm = IntValue => ActionFn(621);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action621::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 75)
    }
    fn __reduce678<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // IntValue = hex_value => ActionFn(226);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action226::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 76)
    }
    fn __reduce679<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InvocationTarget = MastRoot => ActionFn(232);
        let __sym0 = __pop_Variant47(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action232::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 77)
    }
    fn __reduce680<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // InvocationTarget = MaybeQualifiedProcedurePath => ActionFn(233);
        let __sym0 = __pop_Variant46(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action233::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 77)
    }
    fn __reduce681<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "eq", ".", Felt => ActionFn(944);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action944::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce683<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "eq" => ActionFn(946);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action946::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce684<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "neq", ".", Felt => ActionFn(947);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action947::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce686<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "neq" => ActionFn(949);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action949::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce687<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "lt", ".", Felt => ActionFn(950);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action950::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce689<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "lt" => ActionFn(952);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action952::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce690<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "lte", ".", Felt => ActionFn(953);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action953::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce692<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "lte" => ActionFn(955);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action955::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce693<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "gt", ".", Felt => ActionFn(956);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action956::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce695<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "gt" => ActionFn(958);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action958::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce696<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "gte", ".", Felt => ActionFn(959);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action959::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce698<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "gte" => ActionFn(961);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action961::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce699<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "add", ".", Felt => ActionFn(962);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action962::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce701<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "add" => ActionFn(964);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action964::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce702<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "sub", ".", Felt => ActionFn(965);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action965::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce704<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "sub" => ActionFn(967);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action967::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce705<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "mul", ".", Felt => ActionFn(968);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action968::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce707<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "mul" => ActionFn(970);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action970::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce720<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32and", ".", U32 => ActionFn(999);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action999::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce722<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32and" => ActionFn(1001);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1001::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce723<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32or", ".", U32 => ActionFn(1002);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1002::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce725<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32or" => ActionFn(1004);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1004::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce726<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32xor", ".", U32 => ActionFn(1005);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1005::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce728<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32xor" => ActionFn(1007);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1007::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce729<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32not", ".", U32 => ActionFn(1008);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1008::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce731<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32not" => ActionFn(1010);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1010::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce732<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_add", ".", U32 => ActionFn(1011);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1011::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce734<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_add" => ActionFn(1013);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1013::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce735<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_sub", ".", U32 => ActionFn(1014);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1014::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce737<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_sub" => ActionFn(1016);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1016::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce738<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_mul", ".", U32 => ActionFn(1017);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1017::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce740<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32wrapping_mul" => ActionFn(1019);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1019::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce741<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_add", ".", U32 => ActionFn(1020);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1020::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce743<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_add" => ActionFn(1022);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1022::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce744<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_sub", ".", U32 => ActionFn(1023);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1023::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce746<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_sub" => ActionFn(1025);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1025::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce747<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_mul", ".", U32 => ActionFn(1026);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1026::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce749<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32overflowing_mul" => ActionFn(1028);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1028::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce750<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32shl", ".", Shift32 => ActionFn(1029);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1029::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce752<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32shl" => ActionFn(1031);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1031::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce753<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32shr", ".", Shift32 => ActionFn(1032);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1032::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce755<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32shr" => ActionFn(1034);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1034::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce756<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32rotl", ".", Shift32 => ActionFn(1035);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1035::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce758<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32rotl" => ActionFn(1037);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1037::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce759<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32rotr", ".", Shift32 => ActionFn(1038);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1038::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce761<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32rotr" => ActionFn(1040);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1040::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce762<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32lt", ".", U32 => ActionFn(1041);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1041::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce764<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32lt" => ActionFn(1043);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1043::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce765<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32lte", ".", U32 => ActionFn(1044);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1044::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce767<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32lte" => ActionFn(1046);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1046::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce768<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32gt", ".", U32 => ActionFn(1047);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1047::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce770<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32gt" => ActionFn(1049);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1049::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce771<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32gte", ".", U32 => ActionFn(1050);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1050::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce773<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32gte" => ActionFn(1052);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1052::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce774<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32min", ".", U32 => ActionFn(1053);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1053::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce776<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32min" => ActionFn(1055);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1055::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce777<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32max", ".", U32 => ActionFn(1056);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1056::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 78)
    }
    fn __reduce779<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = "u32max" => ActionFn(1058);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1058::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce780<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MacroInst = Push => ActionFn(47);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 78)
    }
    fn __reduce782<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeAbsolute = "::" => ActionFn(239);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action239::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 80)
    }
    fn __reduce783<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeAbsolute =  => ActionFn(240);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action240::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 80)
    }
    fn __reduce785<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeAdvMapKey =  => ActionFn(12);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action12::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (0, 81)
    }
    fn __reduce786<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<Felt> = ".", Felt => ActionFn(909);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action909::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (2, 82)
    }
    fn __reduce788<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<Felt> =  => ActionFn(403);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action403::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (0, 82)
    }
    fn __reduce789<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<Shift32> = ".", Shift32 => ActionFn(976);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action976::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (2, 83)
    }
    fn __reduce791<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<Shift32> =  => ActionFn(401);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action401::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (0, 83)
    }
    fn __reduce792<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U16> = ".", U16 => ActionFn(793);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action793::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (2, 84)
    }
    fn __reduce794<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U16> =  => ActionFn(405);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action405::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (0, 84)
    }
    fn __reduce795<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U32> = ".", U32 => ActionFn(775);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action775::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 85)
    }
    fn __reduce797<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U32> =  => ActionFn(408);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action408::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (0, 85)
    }
    fn __reduce798<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U8> = ".", U8 => ActionFn(875);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action875::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (2, 86)
    }
    fn __reduce800<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeImm<U8> =  => ActionFn(411);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action411::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (0, 86)
    }
    fn __reduce801<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeParam<U16> = ".", U16 => ActionFn(421);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant62(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action421::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (2, 87)
    }
    fn __reduce802<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeParam<U16> =  => ActionFn(422);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action422::<>(source_file, interned, _marker, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (0, 87)
    }
    fn __reduce814<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeQualifiedProcedurePath = OpcodeName, "::", ProcedureName => ActionFn(700);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action700::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (3, 89)
    }
    fn __reduce815<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MaybeQualifiedProcedurePath = ProcedureName => ActionFn(701);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action701::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 89)
    }
    fn __reduce817<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MetaExpr = OpcodeName => ActionFn(659);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action659::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 90)
    }
    fn __reduce818<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MetaExpr = quoted_string => ActionFn(1536);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1536::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 90)
    }
    fn __reduce819<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MetaExpr = quoted_ident => ActionFn(1537);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1537::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 90)
    }
    fn __reduce820<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MetaExpr = IntValue => ActionFn(627);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action627::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 90)
    }
    fn __reduce822<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // MetaKeyValue = OpcodeName, "=", MetaExpr => ActionFn(661);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action661::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 91)
    }
    fn __reduce825<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = IfElse => ActionFn(32);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce826<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = While => ActionFn(33);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce827<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = Repeat => ActionFn(34);
        let __sym0 = __pop_Variant39(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce828<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "insert_hdword" => ActionFn(1335);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1335::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce829<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "insert_hdword_d" => ActionFn(1336);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1336::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce830<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "insert_hperm" => ActionFn(1337);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1337::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce831<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "insert_mem" => ActionFn(1338);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1338::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce832<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_mapval" => ActionFn(1339);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1339::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce833<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_mapvaln" => ActionFn(1340);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1340::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce834<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "has_mapkey" => ActionFn(1341);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1341::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce835<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_mtnode" => ActionFn(1342);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1342::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce836<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_smtpeek" => ActionFn(1343);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1343::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce837<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_u64div" => ActionFn(1344);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1344::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce838<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv", ".", "push_falcon_div" => ActionFn(1345);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1345::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce839<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = Call => ActionFn(1346);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1346::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce840<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "breakpoint" => ActionFn(1347);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1347::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce841<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "stack", ".", U8 => ActionFn(1348);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1348::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce843<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "stack" => ActionFn(1350);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1350::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce844<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "mem", ".", U32, ".", U32 => ActionFn(1351);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action1351::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (7, 94)
    }
    fn __reduce848<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "mem", ".", U32 => ActionFn(1355);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1355::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce850<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "mem" => ActionFn(1357);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1357::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce851<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "local", ".", U16, ".", U16 => ActionFn(1358);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant62(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action1358::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (7, 94)
    }
    fn __reduce855<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "local", ".", U16 => ActionFn(1362);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1362::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce857<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "local" => ActionFn(1364);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1364::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce858<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "adv_stack", ".", U16 => ActionFn(1365);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1365::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce860<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "debug", ".", "adv_stack" => ActionFn(1367);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1367::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce861<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "emit", ".", U32 => ActionFn(1368);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1368::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce863<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "trace", ".", U32 => ActionFn(1370);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1370::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce865<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "exp.u", BitSize => ActionFn(1372);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action1372::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 94)
    }
    fn __reduce866<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert" => ActionFn(1373);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1373::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce867<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert", ".", "err", "=", quoted_string => ActionFn(1374);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1374::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce868<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert", ".", "err", "=", quoted_ident => ActionFn(1375);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1375::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce870<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assertz" => ActionFn(1377);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1377::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce871<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assertz", ".", "err", "=", quoted_string => ActionFn(1378);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1378::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce872<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assertz", ".", "err", "=", quoted_ident => ActionFn(1379);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1379::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce874<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eq" => ActionFn(1381);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1381::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce875<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eq", ".", "err", "=", quoted_string => ActionFn(1382);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1382::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce876<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eq", ".", "err", "=", quoted_ident => ActionFn(1383);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1383::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce878<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eqw" => ActionFn(1385);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1385::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce879<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eqw", ".", "err", "=", quoted_string => ActionFn(1386);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1386::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce880<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "assert_eqw", ".", "err", "=", quoted_ident => ActionFn(1387);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1387::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce882<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert" => ActionFn(1389);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1389::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce883<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert", ".", "err", "=", quoted_string => ActionFn(1390);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1390::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce884<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert", ".", "err", "=", quoted_ident => ActionFn(1391);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1391::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce886<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert2" => ActionFn(1393);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1393::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce887<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert2", ".", "err", "=", quoted_string => ActionFn(1394);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1394::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce888<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assert2", ".", "err", "=", quoted_ident => ActionFn(1395);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1395::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce890<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assertw" => ActionFn(1397);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1397::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce891<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assertw", ".", "err", "=", quoted_string => ActionFn(1398);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1398::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce892<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32assertw", ".", "err", "=", quoted_ident => ActionFn(1399);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1399::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce894<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_verify" => ActionFn(1401);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1401::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce895<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_verify", ".", "err", "=", quoted_string => ActionFn(1402);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1402::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce896<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_verify", ".", "err", "=", quoted_ident => ActionFn(1403);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant1(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action1403::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 94)
    }
    fn __reduce898<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "exp", ".", Felt => ActionFn(1405);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1405::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce900<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "exp" => ActionFn(1407);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1407::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce901<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "locaddr", ".", U16 => ActionFn(1408);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1408::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce903<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "loc_load", ".", U16 => ActionFn(1410);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1410::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce905<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "loc_loadw", ".", U16 => ActionFn(1412);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1412::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce907<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "loc_store", ".", U16 => ActionFn(1414);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1414::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce909<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "loc_storew", ".", U16 => ActionFn(1416);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1416::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce911<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv_push", ".", OneBasedStackIndex => ActionFn(1418);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1418::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce924<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_load", ".", U32 => ActionFn(1431);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1431::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce926<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_load" => ActionFn(1433);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1433::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce927<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_loadw", ".", U32 => ActionFn(1434);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1434::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce929<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_loadw" => ActionFn(1436);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1436::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce930<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_store", ".", U32 => ActionFn(1437);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1437::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce932<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_store" => ActionFn(1439);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1439::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce933<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_storew", ".", U32 => ActionFn(1440);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1440::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce935<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_storew" => ActionFn(1442);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1442::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce936<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "procref", ".", InvocationTarget => ActionFn(1443);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action1443::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (3, 94)
    }
    fn __reduce937<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv_pipe" => ActionFn(1444);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1444::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce938<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "adv_loadw" => ActionFn(1445);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1445::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce939<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "and" => ActionFn(1446);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1446::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce940<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "arithmetic_circuit_eval" => ActionFn(1447);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1447::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce941<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "caller" => ActionFn(1448);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1448::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce942<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "cdrop" => ActionFn(1449);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1449::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce943<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "cdropw" => ActionFn(1450);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1450::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce944<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "clk" => ActionFn(1451);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1451::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce945<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "cswap" => ActionFn(1452);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1452::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce946<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "cswapw" => ActionFn(1453);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1453::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce947<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "drop" => ActionFn(1454);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1454::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce948<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "dropw" => ActionFn(1455);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1455::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce949<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "dyncall" => ActionFn(1456);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1456::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce950<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "dynexec" => ActionFn(1457);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1457::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce951<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "eqw" => ActionFn(1458);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1458::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce952<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2add" => ActionFn(1459);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1459::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce953<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2div" => ActionFn(1460);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1460::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce954<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2inv" => ActionFn(1461);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1461::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce955<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2mul" => ActionFn(1462);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1462::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce956<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2neg" => ActionFn(1463);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1463::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce957<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ext2sub" => ActionFn(1464);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1464::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce958<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "fri_ext2fold4" => ActionFn(1465);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1465::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce959<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "hash" => ActionFn(1466);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1466::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce960<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "hperm" => ActionFn(1467);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1467::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce961<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "hmerge" => ActionFn(1468);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1468::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce962<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "ilog2" => ActionFn(1469);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1469::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce963<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "inv" => ActionFn(1470);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1470::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce964<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "is_odd" => ActionFn(1471);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1471::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce965<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mem_stream" => ActionFn(1472);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1472::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce966<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_get" => ActionFn(1473);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1473::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce967<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_merge" => ActionFn(1474);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1474::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce968<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "mtree_set" => ActionFn(1475);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1475::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce969<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "neg" => ActionFn(1476);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1476::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce970<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "not" => ActionFn(1477);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1477::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce971<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "nop" => ActionFn(1478);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1478::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce972<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "or" => ActionFn(1479);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1479::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce973<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "padw" => ActionFn(1480);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1480::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce974<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "pow2" => ActionFn(1481);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1481::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce975<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "horner_eval_base" => ActionFn(1482);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1482::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce976<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "horner_eval_ext" => ActionFn(1483);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1483::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce977<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "sdepth" => ActionFn(1484);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1484::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce978<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "swapdw" => ActionFn(1485);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1485::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce979<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32cast" => ActionFn(1486);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1486::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce980<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32overflowing_add3" => ActionFn(1487);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1487::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce981<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32overflowing_madd" => ActionFn(1488);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1488::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce982<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32popcnt" => ActionFn(1489);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1489::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce983<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32clz" => ActionFn(1490);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1490::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce984<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32ctz" => ActionFn(1491);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1491::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce985<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32clo" => ActionFn(1492);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1492::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce986<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32cto" => ActionFn(1493);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1493::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce987<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32split" => ActionFn(1494);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1494::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce988<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32test" => ActionFn(1495);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1495::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce989<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32testw" => ActionFn(1496);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1496::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce990<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32wrapping_add3" => ActionFn(1497);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1497::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce991<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "u32wrapping_madd" => ActionFn(1498);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1498::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce992<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = "xor" => ActionFn(1499);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1499::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce993<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op = MacroInst => ActionFn(1500);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1500::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 94)
    }
    fn __reduce994<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op+ = Op => ActionFn(414);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action414::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 95)
    }
    fn __reduce995<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Op+ = Op+, Op => ActionFn(415);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant36(__symbols);
        let __sym0 = __pop_Variant56(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action415::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (2, 95)
    }
    fn __reduce996<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "add" => ActionFn(243);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action243::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce997<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv" => ActionFn(244);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action244::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce998<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv_map" => ActionFn(245);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action245::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce999<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv_loadw" => ActionFn(246);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action246::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1000<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv_pipe" => ActionFn(247);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action247::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1001<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv_push" => ActionFn(248);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action248::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1002<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "adv_stack" => ActionFn(249);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action249::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1003<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "and" => ActionFn(250);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action250::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1004<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "arithmetic_circuit_eval" => ActionFn(251);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action251::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1005<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "assert" => ActionFn(252);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action252::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1006<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "assertz" => ActionFn(253);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action253::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1007<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "assert_eq" => ActionFn(254);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action254::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1008<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "assert_eqw" => ActionFn(255);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action255::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1009<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "begin" => ActionFn(256);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action256::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1010<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "caller" => ActionFn(257);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action257::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1011<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "call" => ActionFn(258);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action258::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1012<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "cdrop" => ActionFn(259);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action259::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1013<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "cdropw" => ActionFn(260);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action260::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1014<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "clk" => ActionFn(261);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action261::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1015<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "const" => ActionFn(262);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action262::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1016<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "cswap" => ActionFn(263);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action263::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1017<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "cswapw" => ActionFn(264);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action264::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1018<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "debug" => ActionFn(265);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action265::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1019<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "div" => ActionFn(266);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action266::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1020<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "drop" => ActionFn(267);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action267::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1021<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "dropw" => ActionFn(268);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action268::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1022<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "dup" => ActionFn(269);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action269::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1023<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "dupw" => ActionFn(270);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action270::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1024<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "dynexec" => ActionFn(271);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action271::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1025<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "dyncall" => ActionFn(272);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action272::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1026<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "else" => ActionFn(273);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action273::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1027<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "emit" => ActionFn(274);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action274::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1028<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "end" => ActionFn(275);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action275::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1029<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "eq" => ActionFn(276);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action276::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1030<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "eqw" => ActionFn(277);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action277::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1031<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2add" => ActionFn(278);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action278::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1032<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2div" => ActionFn(279);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action279::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1033<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2inv" => ActionFn(280);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action280::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1034<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2mul" => ActionFn(281);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action281::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1035<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2neg" => ActionFn(282);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action282::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1036<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ext2sub" => ActionFn(283);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action283::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1037<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "err" => ActionFn(284);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action284::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1038<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "exec" => ActionFn(285);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action285::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1039<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "exp" => ActionFn(286);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action286::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1040<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "exp.u" => ActionFn(287);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action287::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1041<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "export" => ActionFn(288);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action288::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1042<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "gt" => ActionFn(289);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action289::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1043<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "gte" => ActionFn(290);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action290::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1044<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "hash" => ActionFn(291);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action291::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1045<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "hperm" => ActionFn(292);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action292::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1046<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "hmerge" => ActionFn(293);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action293::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1047<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "ilog2" => ActionFn(294);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action294::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1048<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "inv" => ActionFn(295);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action295::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1049<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "is_odd" => ActionFn(296);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action296::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1050<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "local" => ActionFn(297);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action297::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1051<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "locaddr" => ActionFn(298);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action298::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1052<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "loc_load" => ActionFn(299);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action299::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1053<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "loc_loadw" => ActionFn(300);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action300::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1054<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "loc_store" => ActionFn(301);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action301::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1055<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "loc_storew" => ActionFn(302);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action302::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1056<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "lt" => ActionFn(303);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action303::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1057<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "lte" => ActionFn(304);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action304::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1058<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem" => ActionFn(305);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action305::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1059<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem_load" => ActionFn(306);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action306::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1060<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem_loadw" => ActionFn(307);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action307::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1061<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem_store" => ActionFn(308);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action308::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1062<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem_storew" => ActionFn(309);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action309::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1063<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mem_stream" => ActionFn(310);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action310::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1064<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "movdn" => ActionFn(311);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action311::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1065<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "movdnw" => ActionFn(312);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action312::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1066<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "movup" => ActionFn(313);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action313::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1067<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "movupw" => ActionFn(314);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action314::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1068<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mtree_merge" => ActionFn(315);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action315::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1069<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mtree_verify" => ActionFn(316);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action316::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1070<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "mul" => ActionFn(317);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action317::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1071<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "neg" => ActionFn(318);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action318::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1072<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "neq" => ActionFn(319);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action319::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1073<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "not" => ActionFn(320);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action320::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1074<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "or" => ActionFn(321);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action321::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1075<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "padw" => ActionFn(322);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action322::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1076<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "pow2" => ActionFn(323);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action323::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1077<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "proc" => ActionFn(324);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action324::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1078<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "procref" => ActionFn(325);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action325::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1079<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "push" => ActionFn(326);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action326::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1080<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "repeat" => ActionFn(327);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action327::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1081<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "sdepth" => ActionFn(328);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action328::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1082<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "stack" => ActionFn(329);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action329::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1083<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "sub" => ActionFn(330);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action330::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1084<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "swap" => ActionFn(331);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action331::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1085<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "swapw" => ActionFn(332);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action332::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1086<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "swapdw" => ActionFn(333);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action333::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1087<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "syscall" => ActionFn(334);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action334::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1088<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "trace" => ActionFn(335);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action335::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1089<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32and" => ActionFn(336);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action336::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1090<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32assert" => ActionFn(337);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action337::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1091<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32assert2" => ActionFn(338);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action338::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1092<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32assertw" => ActionFn(339);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action339::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1093<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32cast" => ActionFn(340);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action340::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1094<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32div" => ActionFn(341);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action341::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1095<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32divmod" => ActionFn(342);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action342::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1096<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32gt" => ActionFn(343);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action343::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1097<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32gte" => ActionFn(344);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action344::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1098<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32lt" => ActionFn(345);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action345::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1099<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32lte" => ActionFn(346);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action346::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1100<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32max" => ActionFn(347);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action347::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1101<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32min" => ActionFn(348);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action348::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1102<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32mod" => ActionFn(349);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action349::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1103<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32not" => ActionFn(350);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action350::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1104<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32or" => ActionFn(351);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action351::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1105<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32overflowing_add" => ActionFn(352);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action352::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1106<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32overflowing_add3" => ActionFn(353);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action353::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1107<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32overflowing_madd" => ActionFn(354);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action354::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1108<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32overflowing_mul" => ActionFn(355);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action355::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1109<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32overflowing_sub" => ActionFn(356);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action356::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1110<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32popcnt" => ActionFn(357);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action357::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1111<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32clz" => ActionFn(358);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action358::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1112<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32ctz" => ActionFn(359);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action359::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1113<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32clo" => ActionFn(360);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action360::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1114<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32cto" => ActionFn(361);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action361::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1115<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32rotl" => ActionFn(362);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action362::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1116<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32rotr" => ActionFn(363);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action363::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1117<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32shl" => ActionFn(364);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action364::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1118<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32shr" => ActionFn(365);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action365::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1119<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32split" => ActionFn(366);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action366::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1120<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32test" => ActionFn(367);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action367::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1121<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32testw" => ActionFn(368);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action368::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1122<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32wrapping_add" => ActionFn(369);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action369::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1123<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32wrapping_add3" => ActionFn(370);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action370::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1124<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32wrapping_madd" => ActionFn(371);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action371::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1125<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32wrapping_mul" => ActionFn(372);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action372::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1126<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32wrapping_sub" => ActionFn(373);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action373::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1127<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "u32xor" => ActionFn(374);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action374::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1128<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Opcode = "xor" => ActionFn(375);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action375::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 96)
    }
    fn __reduce1129<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // OpcodeName = Opcode => ActionFn(629);
        let __sym0 = __pop_Variant57(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action629::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 97)
    }
    fn __reduce1133<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PathComponents<BareIdent> = OpcodeName => ActionFn(697);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action697::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (1, 99)
    }
    fn __reduce1134<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // PathComponents<BareIdent> = (<BareIdent> "::")+, OpcodeName => ActionFn(698);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action698::<>(source_file, interned, _marker, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (2, 99)
    }
    fn __reduce1145<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProcRef = "procref", ".", InvocationTarget => ActionFn(631);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant46(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action631::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 101)
    }
    fn __reduce1151<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // ProcedureName = OpcodeName => ActionFn(741);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action741::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 103)
    }
    fn __reduce1164<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // QuotedString = quoted_string => ActionFn(1061);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1061::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 107)
    }
    fn __reduce1165<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // QuotedString = quoted_ident => ActionFn(1062);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1062::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 107)
    }
    fn __reduce1166<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // RawU8 = U8 => ActionFn(211);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action211::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 108)
    }
    fn __reduce1170<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "insert_hdword" => ActionFn(114);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action114::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1171<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "insert_hdword_d" => ActionFn(115);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action115::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1172<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "insert_hperm" => ActionFn(116);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action116::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1173<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "insert_mem" => ActionFn(117);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action117::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1174<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_mapval" => ActionFn(118);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action118::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1175<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_mapvaln" => ActionFn(119);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action119::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1176<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "has_mapkey" => ActionFn(120);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action120::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1177<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_mtnode" => ActionFn(121);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action121::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1178<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_smtpeek" => ActionFn(122);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action122::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1179<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_u64div" => ActionFn(123);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action123::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1180<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // SystemEvent = "adv", ".", "push_falcon_div" => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action124::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 112)
    }
    fn __reduce1181<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = "(", ConstantExpr, ")" => ActionFn(384);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action384::<>(source_file, interned, _marker, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (3, 113)
    }
    fn __reduce1183<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = quoted_string => ActionFn(1538);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1538::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 113)
    }
    fn __reduce1184<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Term = quoted_ident => ActionFn(1539);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1539::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 113)
    }
    fn __reduce1191<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Visibility = "proc" => ActionFn(19);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action19::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 117)
    }
    fn __reduce1192<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // Visibility = "export" => ActionFn(20);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant63(__nt), __end));
        (1, 117)
    }
    fn __reduce1193<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // While = "while", ".", "true", Block, "end" => ActionFn(645);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant27(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action645::<>(source_file, interned, _marker, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (5, 118)
    }
    fn __reduce1195<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // string = quoted_string => ActionFn(388);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action388::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 120)
    }
    fn __reduce1196<
        'input,
    >(
        source_file: &Arc<SourceFile>,
        interned: &mut BTreeSet<Arc<str>>,
        _marker: PhantomData<&'input str>,
        __lookahead_start: Option<&u32>,
        __symbols: &mut alloc::vec::Vec<(u32,__Symbol<'input>,u32)>,
        _: core::marker::PhantomData<(&'input ())>,
    ) -> (usize, usize)
    {
        // string = quoted_ident => ActionFn(389);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action389::<>(source_file, interned, _marker, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 120)
    }
}
#[allow(unused_imports)]
pub use self::__parse__Forms::FormsParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action0<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Vec<Form>, u32),
) -> Vec<Form>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action1<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, forms, _): (u32, alloc::vec::Vec<Form>, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> Vec<Form>
{
    forms
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action2<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action3<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action4<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action5<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action6<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action7<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> Form
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action8<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, doc, _): (u32, DocumentationType, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        if doc.as_bytes().len() > u16::MAX as usize {
            Err(ParseError::User { error: ParsingError::DocsTooLarge { span: span!(source_file.id(), l, r) } })
        } else {
            match doc {
                DocumentationType::Module(doc) => Ok(Form::ModuleDoc(Span::new(span!(source_file.id(), l, r), doc))),
                DocumentationType::Form(doc) => Ok(Form::Doc(Span::new(span!(source_file.id(), l, r), doc))),
            }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action9<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, path, _): (u32, Span<LibraryPath>, u32),
    (_, alias, _): (u32, Option<Ident>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        if path.num_components() == 1 {
            return Err(ParseError::User {
                error: ParsingError::UnqualifiedImport { span },
            });
        }
        let name = alias.unwrap_or(path.last_component().to_ident());
        Ok(Form::Import(Import { span, name, path: path.into_inner(), uses: 0 }))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action10<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, name, _): (u32, Ident, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Form
{
    {
        Form::Constant(Constant::new(
            span!(source_file.id(), l, r),
            name,
            value,
        ))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action11<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Option<Span<WordValue>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        match value {
            IntValue::Word(word) => Ok(Some(Span::new(span!(source_file.id(), l, r), word))),
            _ => {
                Err(ParseError::User { error: ParsingError::InvalidAdvMapKey { span: span!(source_file.id(), l, r) } })
            }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action12<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Span<WordValue>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action13<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, name, _): (u32, Ident, u32),
    (_, key, _): (u32, Option<Span<WordValue>>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Vec<Felt>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Form
{
    {
        Form::AdviceMapEntry(AdviceMapEntry::new(
            span!(source_file.id(), l, r),
            name,
            key,
            value,
        ))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action14<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, body, _): (u32, Vec<Op>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Form
{
    {
        Form::Begin(Block::new(span!(source_file.id(), l, r), body))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action15<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, annotations, _): (u32, alloc::vec::Vec<Attribute>, u32),
    (_, mut proc, _): (u32, Procedure, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        use alloc::collections::btree_map::Entry;
        let attributes = proc.attributes_mut();
        for attr in annotations {
            match attr {
                Attribute::KeyValue(kv) => {
                    match attributes.entry(kv.id()) {
                        AttributeSetEntry::Vacant(entry) => {
                            entry.insert(Attribute::KeyValue(kv));
                        }
                        AttributeSetEntry::Occupied(mut entry) => {
                            let value = entry.get_mut();
                            match value {
                                Attribute::KeyValue(existing_kvs) => {
                                    for (k, v) in kv.into_iter() {
                                        let span = k.span();
                                        match existing_kvs.entry(k) {
                                            Entry::Vacant(entry) => {
                                                entry.insert(v);
                                            }
                                            Entry::Occupied(entry) => {
                                                let prev = entry.get();
                                                return Err(ParseError::User {
                                                    error: ParsingError::AttributeKeyValueConflict { span, prev: prev.span() },
                                                });
                                            }
                                        }
                                    }
                                }
                                other => {
                                    return Err(ParseError::User {
                                        error: ParsingError::AttributeConflict { span: kv.span(), prev: other.span() },
                                    });
                                }
                            }
                        }
                    }
                }
                attr => {
                    match attributes.entry(attr.id()) {
                        AttributeSetEntry::Vacant(entry) => {
                            entry.insert(attr);
                        }
                        AttributeSetEntry::Occupied(entry) => {
                            let prev_attr = entry.get();
                            return Err(ParseError::User {
                                error: ParsingError::AttributeConflict { span: attr.span(), prev: prev_attr.span() },
                            });
                        }
                    }
                }
            }
        }
        Ok(Form::Procedure(Export::Procedure(proc)))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action16<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ProcedureAlias, u32),
) -> Form
{
    Form::Procedure(Export::Alias(__0))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action17<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, visibility, _): (u32, Visibility, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, name, _): (u32, ProcedureName, u32),
    (_, num_locals, _): (u32, Option<u16>, u32),
    (_, body, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let num_locals = num_locals.unwrap_or(0);
        let procedure = Procedure::new(
            span!(source_file.id(), l, r),
            visibility,
            name,
            num_locals,
            body
        );
        Ok(procedure)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action18<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, name, _): (u32, InvocationTarget, u32),
    (_, alias, _): (u32, Option<ProcedureName>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ProcedureAlias,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        let alias = match name {
            InvocationTarget::ProcedureName(_) =>  return Err(ParseError::User {
                error: ParsingError::UnqualifiedImport { span },
            }),
            InvocationTarget::MastRoot(digest) => {
                if alias.is_none() {
                    return Err(ParseError::User {
                        error: ParsingError::UnnamedReexportOfMastRoot { span },
                    });
                }
                ProcedureAlias::new(alias.unwrap(), AliasTarget::MastRoot(digest))
            }
            InvocationTarget::ProcedurePath { name, module } => {
                let export_name = alias.unwrap_or_else(|| name.clone());
                let module = match module.as_str() {
                    LibraryNamespace::KERNEL_PATH => LibraryPath::new_from_components(LibraryNamespace::Kernel, []),
                    LibraryNamespace::EXEC_PATH => LibraryPath::new_from_components(LibraryNamespace::Exec, []),
                    LibraryNamespace::ANON_PATH => LibraryPath::new_from_components(LibraryNamespace::Anon, []),
                    _ => LibraryPath::new_from_components(LibraryNamespace::User(module.into_inner()), []),
                };
                let target = QualifiedProcedureName {
                    span,
                    module,
                    name,
                };
                ProcedureAlias::new(export_name, AliasTarget::ProcedurePath(target))
            }
            InvocationTarget::AbsoluteProcedurePath { name, path } => {
                let export_name = alias.unwrap_or_else(|| name.clone());
                let target = QualifiedProcedureName {
                    span,
                    module: path,
                    name,
                };
                ProcedureAlias::new(export_name, AliasTarget::AbsoluteProcedurePath(target))
            }
        };
        Ok(alias)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action19<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Visibility
{
    Visibility::Private
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action20<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Visibility
{
    Visibility::Public
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action21<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, attr, _): (u32, Attribute, u32),
    (_, r, _): (u32, u32, u32),
) -> Attribute
{
    attr.with_span(span!(source_file.id(), l, r))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action22<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, Ident, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, items, _): (u32, Vec<MetaExpr>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Attribute
{
    {
        Attribute::List(MetaList { span: span!(source_file.id(), l, r), name, items })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action23<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, Ident, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, items, _): (u32, Vec<Span<(Ident, MetaExpr)>>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        use alloc::collections::btree_map::Entry;

        let mut map = BTreeMap::<Ident, MetaExpr>::default();
        for meta_kv in items {
            let (span, (k, v)) = meta_kv.into_parts();
            match map.entry(k) {
                Entry::Occupied(entry) => {
                    let prev = entry.key().span();
                    return Err(ParseError::User {
                        error: ParsingError::AttributeKeyValueConflict { span, prev },
                    });
                }
                Entry::Vacant(entry) => {
                    entry.insert(v);
                }
            }
        }
        Ok(Attribute::KeyValue(MetaKeyValue { span: span!(source_file.id(), l, r), name, items: map }))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action24<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, name, _): (u32, Ident, u32),
) -> Attribute
{
    Attribute::Marker(name)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action25<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, key, _): (u32, Ident, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, MetaExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Span<(Ident, MetaExpr)>
{
    {
        let span = span!(source_file.id(), l, r);
        Span::new(span, (key, value))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action26<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> MetaExpr
{
    MetaExpr::Ident(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action27<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> MetaExpr
{
    MetaExpr::String(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action28<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> MetaExpr
{
    MetaExpr::Int(Span::new(span!(source_file.id(), l, r), value))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action29<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, &'input str, u32),
    (_, r, _): (u32, u32, u32),
) -> Ident
{
    {
        let value = interned.get(value).cloned().unwrap_or_else(|| {
            let value = Arc::<str>::from(value.to_string().into_boxed_str());
            interned.insert(value.clone());
            value
        });
        let span = span!(source_file.id(), l, r);
        Ident::from_raw_parts(Span::new(span, value))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action30<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, body, _): (u32, Vec<Op>, u32),
    (_, r, _): (u32, u32, u32),
) -> Block
{
    Block::new(span!(source_file.id(), l, r), body)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action31<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, ops, _): (u32, alloc::vec::Vec<SmallOpsVec>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Vec<Op>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let ops = ops.into_iter().flat_map(|ops| ops.into_iter()).collect::<Vec<_>>();
        if ops.len() > u16::MAX as usize {
            Err(ParseError::User { error: ParsingError::CodeBlockTooBig { span: span!(source_file.id(), l, r) } })
        } else {
            Ok(ops)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action32<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Op, u32),
) -> SmallOpsVec
{
    smallvec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action33<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Op, u32),
) -> SmallOpsVec
{
    smallvec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action34<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Op, u32),
) -> SmallOpsVec
{
    smallvec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action35<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action36<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, cond, _): (u32, bool, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, else_blk, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Op
{
    {
        let span = span!(source_file.id(), l, r);
        let then_blk = Block::new(span, vec![Op::Inst(Span::new(span, Instruction::Nop))]);
        // If false-conditioned, swap the blocks
        if cond {
            Op::If { span, then_blk, else_blk }
        } else {
            Op::If { span, then_blk: else_blk, else_blk: then_blk }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action37<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, cond, _): (u32, bool, u32),
    (_, then_blk, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, else_blk, _): (u32, Option<Block>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Op
{
    {
        let span = span!(source_file.id(), l, r);
        let else_blk = else_blk.unwrap_or_else(|| Block::new(span, vec![Op::Inst(Span::new(span, Instruction::Nop))]));
        // If false-conditioned, swap the blocks
        if cond {
            Op::If { span, then_blk, else_blk }
        } else {
            Op::If { span, then_blk: else_blk, else_blk: then_blk }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action38<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, cond, _): (u32, bool, u32),
    (_, then_blk, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Op
{
    {
        let span = span!(source_file.id(), l, r);
        let else_blk = Block::new(span, vec![Op::Inst(Span::new(span, Instruction::Nop))]);
        // If false-conditioned, swap the blocks
        if cond {
            Op::If { span, then_blk, else_blk }
        } else {
            Op::If { span, then_blk: else_blk, else_blk: then_blk }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action39<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> bool
{
    true
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action40<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> bool
{
    false
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action41<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, body, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Op
{
    {
        Op::While { span: span!(source_file.id(), l, r), body }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action42<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, count, _): (u32, u64, u32),
    (_, body, _): (u32, Block, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Op,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        u32::try_from(count)
            .map_err(|error| ParseError::User { error: ParsingError::ImmediateOutOfRange { span, range: 1..(u32::MAX as usize) } })
            .and_then(|count| {
                NonZeroU32::try_from(count)
                    .map(|count| Op::Repeat { span, count: count.get(), body })
                    .map_err(|error| ParseError::User { error: ParsingError::ImmediateOutOfRange { span, range: 1..(u32::MAX as usize) } })
            })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action43<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, inst, _): (u32, Instruction, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    smallvec![Op::Inst(Span::new(span!(source_file.id(), l, r), inst))]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action44<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action45<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action46<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action47<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action48<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action49<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action50<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action51<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action52<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action53<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action54<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action55<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action56<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action57<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Instruction, u32),
) -> Instruction
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action58<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::AdvPipe
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action59<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::AdvLoadW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action60<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::And
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action61<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::ArithmeticCircuitEval
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action62<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Caller
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action63<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::CDrop
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action64<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::CDropW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action65<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Clk
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action66<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::CSwap
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action67<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::CSwapW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action68<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Drop
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action69<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::DropW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action70<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::DynCall
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action71<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::DynExec
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action72<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Eqw
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action73<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Add
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action74<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Div
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action75<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Inv
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action76<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Mul
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action77<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Neg
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action78<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Ext2Sub
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action79<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::FriExt2Fold4
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action80<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Hash
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action81<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::HPerm
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action82<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::HMerge
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action83<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::ILog2
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action84<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Inv
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action85<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::IsOdd
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action86<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::MemStream
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action87<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::MTreeGet
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action88<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::MTreeMerge
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action89<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::MTreeSet
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action90<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Neg
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action91<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Not
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action92<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Nop
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action93<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Or
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action94<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::PadW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action95<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Pow2
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action96<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::HornerBase
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action97<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::HornerExt
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action98<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Sdepth
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action99<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SwapDw
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action100<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Cast
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action101<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32OverflowingAdd3
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action102<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32OverflowingMadd
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action103<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Popcnt
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action104<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Clz
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action105<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Ctz
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action106<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Clo
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action107<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Cto
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action108<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Split
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action109<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Test
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action110<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32TestW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action111<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32WrappingAdd3
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action112<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32WrappingMadd
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action113<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Xor
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action114<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::InsertHdword)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action115<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::InsertHdwordWithDomain)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action116<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::InsertHperm)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action117<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::InsertMem)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action118<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushMapVal)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action119<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushMapValN)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action120<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::HasMapKey)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action121<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushMtNode)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action122<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushSmtPeek)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action123<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushU64Div)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action124<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
    (_, __1, _): (u32, Token<'input>, u32),
    (_, __2, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::SysEvent(SystemEventNode::PushFalconDiv)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action125<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Assert
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action126<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::AssertWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action127<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Assertz
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action128<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::AssertzWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action129<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::AssertEq
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action130<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::AssertEqWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action131<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::AssertEqw
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action132<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::AssertEqwWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action133<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Assert
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action134<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::U32AssertWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action135<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32Assert2
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action136<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::U32Assert2WithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action137<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::U32AssertW
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action138<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::U32AssertWWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action139<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::MTreeVerify
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action140<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, value, _): (u32, Immediate<Arc<str>>, u32),
) -> Instruction
{
    Instruction::MTreeVerifyWithError(value)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action141<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, &'input str, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<Arc<str>>
{
    {
        let name = Arc::<str>::from(t.to_string().into_boxed_str());
        let id = Span::new(span!(source_file.id(), l, r), name);
        Immediate::Value(id)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action142<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<Arc<str>>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action143<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, callee, _): (u32, InvocationTarget, u32),
) -> Instruction
{
    Instruction::Exec(callee)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action144<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, callee, _): (u32, InvocationTarget, u32),
) -> Instruction
{
    Instruction::Call(callee)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action145<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, callee, _): (u32, InvocationTarget, u32),
) -> Instruction
{
    Instruction::SysCall(callee)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action146<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> Instruction
{
    Instruction::Breakpoint
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action147<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Option<Immediate<Span<u8>>>, u32),
) -> Instruction
{
    {
        match n {
            Some(n) => Instruction::Debug(DebugOptions::StackTop(n.map(|spanned| spanned.into_inner()))),
            None => Instruction::Debug(DebugOptions::StackAll),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action148<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Immediate<u32>, u32),
    (_, m, _): (u32, Immediate<u32>, u32),
) -> Instruction
{
    Instruction::Debug(DebugOptions::MemInterval(n, m))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action149<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Option<Immediate<u32>>, u32),
) -> Instruction
{
    {
        match n {
            Some(n) => Instruction::Debug(DebugOptions::MemInterval(n.clone(), n)),
            None => Instruction::Debug(DebugOptions::MemAll),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action150<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Immediate<u16>, u32),
    (_, m, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::Debug(DebugOptions::LocalInterval(n, m))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action151<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Option<Immediate<u16>>, u32),
) -> Instruction
{
    {
        match n {
            Some(n) => Instruction::Debug(DebugOptions::LocalRangeFrom(n)),
            None => Instruction::Debug(DebugOptions::LocalAll),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action152<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, n, _): (u32, Option<Immediate<u16>>, u32),
) -> Instruction
{
    {
        match n {
            Some(n) => Instruction::Debug(DebugOptions::AdvStackTop(n)),
            None => // length 0 means print the whole stack
            Instruction::Debug(DebugOptions::AdvStackTop(0.into())),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action153<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, id, _): (u32, Immediate<u32>, u32),
) -> Instruction
{
    Instruction::Emit(id)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action154<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, id, _): (u32, Immediate<u32>, u32),
) -> Instruction
{
    Instruction::Trace(id)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action155<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, l, _): (u32, u32, u32),
    (_, target, _): (u32, InvocationTarget, u32),
    (_, r, _): (u32, u32, u32),
) -> Instruction
{
    {
        Instruction::ProcRef(target)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action156<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::EqImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::Eq))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action157<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::NeqImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::Neq))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action158<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::Lt))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushFelt(value.into_inner()))), Op::Inst(Span::new(span, Instruction::Lt))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::Lt))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action159<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::Lte))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushFelt(value.into_inner()))), Op::Inst(Span::new(span, Instruction::Lte))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::Lte))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action160<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::Gt))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushFelt(value.into_inner()))), Op::Inst(Span::new(span, Instruction::Gt))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::Gt))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action161<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::Gte))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushFelt(value.into_inner()))), Op::Inst(Span::new(span, Instruction::Gte))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::Gte))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action162<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == Felt::ZERO => smallvec![],
            Some(imm) if imm == Felt::ONE => smallvec![Op::Inst(Span::new(span, Instruction::Incr))],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::AddImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::Add))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action163<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == Felt::ZERO => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::SubImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::Sub))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action164<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == Felt::ZERO => smallvec![Op::Inst(Span::new(span, Instruction::Drop)), Op::Inst(Span::new(span, Instruction::PushU8(0)))],
            Some(imm) if imm == Felt::ONE => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::MulImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::Mul))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action165<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == Felt::ZERO => Err(ParseError::User { error: ParsingError::DivisionByZero { span: span!(source_file.id(), l, r) } }),
            Some(imm) if imm == Felt::ONE => Ok(smallvec![]),
            Some(imm) => Ok(smallvec![Op::Inst(Span::new(span, Instruction::DivImm(imm)))]),
            None => Ok(smallvec![Op::Inst(Span::new(span, Instruction::Div))]),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action166<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => Err(ParseError::User { error: ParsingError::DivisionByZero { span: span!(source_file.id(), l, r) } }),
            Some(imm) if imm == 1 => Ok(smallvec![]),
            Some(imm) => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32DivImm(imm)))]),
            None => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32Div))]),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action167<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => Err(ParseError::User { error: ParsingError::DivisionByZero { span: span!(source_file.id(), l, r) } }),
            Some(imm) => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32DivModImm(imm)))]),
            None => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32DivMod))]),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action168<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => Err(ParseError::User { error: ParsingError::DivisionByZero { span: span!(source_file.id(), l, r) } }),
            Some(imm) => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32ModImm(imm)))]),
            None => Ok(smallvec![Op::Inst(Span::new(span, Instruction::U32Mod))]),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action169<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![Op::Inst(Span::new(span, Instruction::Drop)), Op::Inst(Span::new(span, Instruction::PushU8(0)))],
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32And))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32And))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32And))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action170<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Or))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Or))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Or))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action171<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Xor))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Xor))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Xor))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action172<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Not))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Not))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Not))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action173<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingAddImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingAdd))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action174<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingSubImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingSub))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action175<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![Op::Inst(Span::new(span, Instruction::Drop)), Op::Inst(Span::new(span, Instruction::PushU8(0)))],
            Some(imm) if imm == 1 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingMulImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32WrappingMul))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action176<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingAddImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingAdd))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action177<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingSubImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingSub))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action178<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingMulImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32OverflowingMul))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action179<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u8>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32ShlImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Shl))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action180<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u8>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32ShrImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Shr))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action181<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u8>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32RotlImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Rotl))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action182<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u8>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) if imm == 0 => smallvec![],
            Some(imm) => smallvec![Op::Inst(Span::new(span, Instruction::U32RotrImm(imm)))],
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Rotr))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action183<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Lt))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Lt))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Lt))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action184<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Lte))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Lte))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Lte))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action185<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Gt))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Gt))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Gt))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action186<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Gte))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Gte))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Gte))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action187<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Min))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Min))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Min))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action188<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
    (_, r, _): (u32, u32, u32),
) -> SmallOpsVec
{
    {
        let span = span!(source_file.id(), l, r);
        match imm {
            Some(imm) => {
                match imm {
                    Immediate::Constant(name) => smallvec![Op::Inst(Span::new(span, Instruction::Push(Immediate::Constant(name)))), Op::Inst(Span::new(span, Instruction::U32Max))],
                    Immediate::Value(value) => smallvec![Op::Inst(Span::new(span, Instruction::PushU32(value.into_inner()))), Op::Inst(Span::new(span, Instruction::U32Max))],
                }
            }
            None => smallvec![Op::Inst(Span::new(span, Instruction::U32Max))],
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action189<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<Felt>>, u32),
) -> Instruction
{
    imm.map(Instruction::ExpImm).unwrap_or(Instruction::Exp)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action190<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
) -> Instruction
{
    imm.map(Instruction::MemLoadImm).unwrap_or(Instruction::MemLoad)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action191<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
) -> Instruction
{
    imm.map(Instruction::MemLoadWImm).unwrap_or(Instruction::MemLoadW)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action192<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
) -> Instruction
{
    imm.map(Instruction::MemStoreImm).unwrap_or(Instruction::MemStore)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action193<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, Option<Immediate<u32>>, u32),
) -> Instruction
{
    imm.map(Instruction::MemStoreWImm).unwrap_or(Instruction::MemStoreW)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action194<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::Locaddr(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action195<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::LocLoad(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action196<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::LocLoadW(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action197<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::LocStore(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action198<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Immediate<u16>, u32),
) -> Instruction
{
    Instruction::LocStoreW(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action199<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, l, _): (u32, u32, u32),
    (_, i, _): (u32, u8, u32),
    (_, r, _): (u32, u32, u32),
) -> Instruction
{
    Instruction::AdvPush(Immediate::Value(Span::new(span!(source_file.id(), l, r), i)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action200<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Option<Span<u8>>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, idx) = i.map(|s| s.into_parts()).unwrap_or((SourceSpan::default(), 0));
        Ok(match idx {
            0 => Instruction::Dup0,
            1 => Instruction::Dup1,
            2 => Instruction::Dup2,
            3 => Instruction::Dup3,
            4 => Instruction::Dup4,
            5 => Instruction::Dup5,
            6 => Instruction::Dup6,
            7 => Instruction::Dup7,
            8 => Instruction::Dup8,
            9 => Instruction::Dup9,
            10 => Instruction::Dup10,
            11 => Instruction::Dup11,
            12 => Instruction::Dup12,
            13 => Instruction::Dup13,
            14 => Instruction::Dup14,
            15 => Instruction::Dup15,
            _ => return Err(ParseError::User {
                error: ParsingError::ImmediateOutOfRange { span, range: 0..16 },
            }),
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action201<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, l, _): (u32, u32, u32),
    (_, i, _): (u32, Option<Span<u8>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, idx) = i.map(|s| s.into_parts()).unwrap_or((SourceSpan::default(), 0));
        Ok(match idx {
            0 => Instruction::DupW0,
            1 => Instruction::DupW1,
            2 => Instruction::DupW2,
            3 => Instruction::DupW3,
            _ => {
                return Err(ParseError::User {
                    error: ParsingError::ImmediateOutOfRange { span, range: 0..4 },
                })
            }
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action202<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    Ok(match i.into_inner() {
        2 => Instruction::MovDn2,
        3 => Instruction::MovDn3,
        4 => Instruction::MovDn4,
        5 => Instruction::MovDn5,
        6 => Instruction::MovDn6,
        7 => Instruction::MovDn7,
        8 => Instruction::MovDn8,
        9 => Instruction::MovDn9,
        10 => Instruction::MovDn10,
        11 => Instruction::MovDn11,
        12 => Instruction::MovDn12,
        13 => Instruction::MovDn13,
        14 => Instruction::MovDn14,
        15 => Instruction::MovDn15,
        _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span: i.span(), range: 2..16 }}),
    })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action203<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    Ok(match i.into_inner() {
        2 => Instruction::MovDnW2,
        3 => Instruction::MovDnW3,
        _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span: i.span(), range: 2..4 }}),
    })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action204<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    Ok(match i.into_inner() {
        2 => Instruction::MovUp2,
        3 => Instruction::MovUp3,
        4 => Instruction::MovUp4,
        5 => Instruction::MovUp5,
        6 => Instruction::MovUp6,
        7 => Instruction::MovUp7,
        8 => Instruction::MovUp8,
        9 => Instruction::MovUp9,
        10 => Instruction::MovUp10,
        11 => Instruction::MovUp11,
        12 => Instruction::MovUp12,
        13 => Instruction::MovUp13,
        14 => Instruction::MovUp14,
        15 => Instruction::MovUp15,
        _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span: i.span(), range: 2..16 }}),
    })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action205<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    Ok(match i.into_inner() {
        2 => Instruction::MovUpW2,
        3 => Instruction::MovUpW3,
        _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span: i.span(), range: 2..4 }}),
    })
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action206<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Option<Span<u8>>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, idx) = i.map(|s| s.into_parts()).unwrap_or((SourceSpan::default(), 1));
        Ok(match idx {
            1 => Instruction::Swap1,
            2 => Instruction::Swap2,
            3 => Instruction::Swap3,
            4 => Instruction::Swap4,
            5 => Instruction::Swap5,
            6 => Instruction::Swap6,
            7 => Instruction::Swap7,
            8 => Instruction::Swap8,
            9 => Instruction::Swap9,
            10 => Instruction::Swap10,
            11 => Instruction::Swap11,
            12 => Instruction::Swap12,
            13 => Instruction::Swap13,
            14 => Instruction::Swap14,
            15 => Instruction::Swap15,
            _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span, range: 1..16 }}),
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action207<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, i, _): (u32, Option<Span<u8>>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, idx) = i.map(|s| s.into_parts()).unwrap_or((SourceSpan::default(), 1));
        Ok(match idx {
            1 => Instruction::SwapW1,
            2 => Instruction::SwapW2,
            3 => Instruction::SwapW3,
            _ => return Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span, range: 1..4 }}),
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action208<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, imm, _): (u32, u8, u32),
) -> Instruction
{
    Instruction::ExpBitLength(imm)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action209<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, values, _): (u32, Vec<Immediate<IntValue>>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let ops = values.into_iter().enumerate().map(|(i, imm)| {
            let span = imm.span();
            // Include the "push" token in the first item's span
            let span = if i == 0 {
                span!(source_file.id(), l, span.end().to_u32())
            } else {
                span
            };
            Op::Inst(Span::new(span, match imm {
                Immediate::Constant(name) => Instruction::Push(Immediate::Constant(name)),
                Immediate::Value(value) => {
                    match value.into_inner() {
                        IntValue::U8(v) => Instruction::PushU8(v),
                        IntValue::U16(v) => Instruction::PushU16(v),
                        IntValue::U32(v) => Instruction::PushU32(v),
                        IntValue::Felt(v) => Instruction::PushFelt(v),
                        IntValue::Word(v) => Instruction::PushWord(v),
                    }
                }
            }))
        }).collect::<SmallOpsVec>();
        if ops.len() > 16 {
            Err(ParseError::User { error: ParsingError::PushOverflow { span: span!(source_file.id(), l, r), count: ops.len() } })
        } else {
            Ok(ops)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action210<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> Result<u8,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, n) = n.into_parts();
        if n > 31 {
            Err(ParseError::User { error: ParsingError::ImmediateOutOfRange { span, range: 0..32 } })
        } else {
            Ok(n)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action211<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> u8
{
    n.into_inner()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action212<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, n, _): (u32, u64, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Span<u8>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        u8::try_from(n).map_err(|error| ParseError::User {
            error: ParsingError::ImmediateOutOfRange { span, range: 0..(u8::MAX as usize + 1) },
        }).map(|n| Span::new(span, n))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action213<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, n, _): (u32, u64, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<u16,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        u16::try_from(n).map_err(|error| ParseError::User {
            error: ParsingError::ImmediateOutOfRange { span: span!(source_file.id(), l, r), range: 0..(u16::MAX as usize + 1) },
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action214<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, n, _): (u32, u64, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        u32::try_from(n).map_err(|error| ParseError::User {
            error: ParsingError::InvalidLiteral { span: span!(source_file.id(), l, r), kind: LiteralErrorKind::U32Overflow },
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action215<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        match value {
            IntValue::U8(v) => Ok(v as u32),
            IntValue::U16(v) => Ok(v as u32),
            IntValue::U32(v) => Ok(v),
            _ =>  Err(ParseError::User { error: ParsingError::InvalidLiteral { span: span!(source_file.id(), l, r), kind: LiteralErrorKind::U32Overflow } }),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action216<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, BinEncodedValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        match value {
            BinEncodedValue::U8(v) => Ok(v as u32),
            BinEncodedValue::U16(v) => Ok(v as u32),
            BinEncodedValue::U32(v) => Ok(v),
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action217<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Span<Word>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        match value {
            IntValue::Word(word) => Ok(Span::new(span!(source_file.id(), l, r), Word::from(word.0))),
            _ => {
                Err(ParseError::User { error: ParsingError::InvalidMastRoot { span: span!(source_file.id(), l, r) } })
            }
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action218<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> Result<u8,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, n) = n.into_parts();
        if n == 0 || n > 16 {
            Err(ParseError::User {
                error: ParsingError::ImmediateOutOfRange { span, range: 1..17 },
            })
        } else {
            Ok(n)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action219<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> Result<u8,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, n) = n.into_parts();
        if n > crate::ast::MAX_STACK_WORD_OFFSET {
            Err(ParseError::User {
                error: ParsingError::ImmediateOutOfRange { span, range: 0..(crate::ast::MAX_STACK_WORD_OFFSET as usize + 1) },
            })
        } else {
            Ok(n)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action220<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> Result<u8,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, n) = n.into_parts();
        if n == 0 || n > 4 {
            Err(ParseError::User {
                error: ParsingError::ImmediateOutOfRange { span, range: 1..5 },
            })
        } else {
            Ok(n)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action221<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, n, _): (u32, Span<u8>, u32),
) -> Result<u8,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let (span, n) = n.into_parts();
        if n < 64 {
            Ok(n)
        } else {
            Err(ParseError::User { error: ParsingError::InvalidLiteral { span, kind: LiteralErrorKind::InvalidBitSize } })
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action222<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<IntValue>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), value))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action223<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, name, _): (u32, Ident, u32),
) -> Immediate<IntValue>
{
    Immediate::Constant(name)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action224<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, n, _): (u32, u64, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        if n >= Felt::MODULUS {
            return Err(ParseError::User { error: ParsingError::InvalidLiteral { span: span!(source_file.id(), l, r), kind: LiteralErrorKind::FeltOverflow } });
        }
        if n <= (u8::MAX as u64) {
            Ok(IntValue::U8(n as u8))
        } else if n <= (u16::MAX as u64) {
            Ok(IntValue::U16(n as u16))
        } else if n <= (u32::MAX as u64) {
            Ok(IntValue::U32(n as u32))
        } else {
            Ok(IntValue::Felt(Felt::new(n)))
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action225<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, v0, _): (u32, Felt, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, v1, _): (u32, Felt, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, v2, _): (u32, Felt, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, v3, _): (u32, Felt, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        Ok(IntValue::Word(WordValue([v0,v1,v2,v3])))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action226<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, IntValue, u32),
) -> IntValue
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action227<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Felt,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        Ok(match value {
            IntValue::U8(v) => Felt::new(v as u64),
            IntValue::U16(v) => Felt::new(v as u64),
            IntValue::U32(v) => Felt::new(v as u64),
            IntValue::Felt(v) => v,
            IntValue::Word(_) => return Err(ParseError::User {
                error: ParsingError::InvalidHexLiteral { span: span!(source_file.id(), l, r), kind: HexErrorKind::Overflow },
            }),
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action228<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ProcedureName, u32),
) -> ProcedureName
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action229<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ProcedureName, u32),
) -> ProcedureName
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action230<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> ProcedureName
{
    ProcedureName::from_raw_parts(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action231<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, &'input str, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let name = interned.get(name).cloned().unwrap_or_else(|| {
            let name = Arc::<str>::from(name.to_string().into_boxed_str());
            interned.insert(name.clone());
            name
        });
        let span = span!(source_file.id(), l, r);
        Ident::validate(&name)
            .map_err(|error| ParseError::User {
                error: ParsingError::InvalidIdentifier { error, span },
            })?;
        let id = Ident::from_raw_parts(Span::new(span, name));
        Ok(ProcedureName::from_raw_parts(id))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action232<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Span<Word>, u32),
) -> InvocationTarget
{
    InvocationTarget::MastRoot(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action233<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, InvocationTarget, u32),
) -> InvocationTarget
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action234<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, components, _): (u32, alloc::vec::Vec<Ident>, u32),
    (_, name, _): (u32, ProcedureName, u32),
) -> Result<InvocationTarget,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        // A fully-qualified path without a module is routed to the anonymous namespace
        if components.is_empty() {
            let path = LibraryPath::new_from_components(LibraryNamespace::Anon, []);
            return Ok(InvocationTarget::AbsoluteProcedurePath { name, path });
        }

        // Otherwise, use the path specified
        let mut components = VecDeque::from(components);
        let ns = components.pop_front().unwrap();
        let ns = match ns.as_str() {
            // Disallow the use of special namespaces with other components
            special_ns @ (
                LibraryNamespace::EXEC_PATH
                | LibraryNamespace::ANON_PATH
            ) if !components.is_empty() => {
                return Err(ParseError::User {
                    error: ParsingError::InvalidLibraryPath {
                        span: ns.span(),
                        message: format!("the {special_ns} namespace cannot have submodules")
                    },
                });
            }
            LibraryNamespace::KERNEL_PATH => LibraryNamespace::Kernel,
            LibraryNamespace::EXEC_PATH => LibraryNamespace::Exec,
            LibraryNamespace::ANON_PATH => LibraryNamespace::Anon,
            _ => LibraryNamespace::User(ns.into_inner()),
        };
        let path = LibraryPath::new_from_components(ns, components);
        Ok(InvocationTarget::AbsoluteProcedurePath { name, path })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action235<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, module, _): (u32, Option<Ident>, u32),
    (_, name, _): (u32, ProcedureName, u32),
) -> InvocationTarget
{
    {
        if let Some(module) = module {
            InvocationTarget::ProcedurePath { name, module }
        } else {
            InvocationTarget::ProcedureName(name)
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action236<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, &'input str, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let name = interned.get(name).cloned().unwrap_or_else(|| {
            let name = Arc::<str>::from(name.to_string().into_boxed_str());
            interned.insert(name.clone());
            name
        });
        let span = span!(source_file.id(), l, r);
        Ident::validate(&name)
            .map_err(|error| ParseError::User {
                error: ParsingError::InvalidIdentifier { error, span },
            })?;
        Ok(Ident::from_raw_parts(Span::new(span, name)))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action237<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Ident
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action238<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, _is_absolute, _): (u32, bool, u32),
    (_, mut components, _): (u32, Vec<Ident>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);
        let name = components.pop().unwrap();
        if components.is_empty() {
            let ns = LibraryNamespace::User(name.into_inner());
            Ok(Span::new(span, LibraryPath::new_from_components(ns, [])))
        } else {
            let mut components = VecDeque::from(components);
            let ns = components.pop_front().unwrap();
            let ns = match ns.as_str() {
                // Disallow the use of special namespaces with other components
                special_ns @ (
                    LibraryNamespace::EXEC_PATH
                    | LibraryNamespace::ANON_PATH
                ) if !components.is_empty() => {
                    return Err(ParseError::User {
                        error: ParsingError::InvalidLibraryPath {
                            span: ns.span(),
                            message: format!("the {special_ns} namespace cannot have submodules")
                        },
                    });
                }
                LibraryNamespace::KERNEL_PATH => LibraryNamespace::Kernel,
                LibraryNamespace::EXEC_PATH => LibraryNamespace::Exec,
                LibraryNamespace::ANON_PATH => LibraryNamespace::Anon,
                _ => LibraryNamespace::User(ns.into_inner()),
            };
            components.push_back(name);
            Ok(Span::new(span, LibraryPath::new_from_components(ns, components)))
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action239<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> bool
{
    true
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action240<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> bool
{
    false
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action241<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, first, _): (u32, Ident, u32),
    (_, mut components, _): (u32, Vec<Ident>, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let span = span!(source_file.id(), l, r);

        let name = components.pop().unwrap();
        let ns = match first.as_str() {
            // Disallow the use of special namespaces with other components
            special_ns @ (
                LibraryNamespace::EXEC_PATH
                | LibraryNamespace::ANON_PATH
            ) if !components.is_empty() => {
                return Err(ParseError::User {
                    error: ParsingError::InvalidLibraryPath {
                        span: first.span(),
                        message: format!("the {special_ns} namespace cannot have submodules")
                    },
                });
            }
            LibraryNamespace::KERNEL_PATH => LibraryNamespace::Kernel,
            LibraryNamespace::EXEC_PATH => LibraryNamespace::Exec,
            LibraryNamespace::ANON_PATH => LibraryNamespace::Anon,
            _ => LibraryNamespace::User(first.into_inner()),
        };
        Ok((name, LibraryPath::new_from_components(ns, components)))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action242<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, &'static str, u32),
    (_, r, _): (u32, u32, u32),
) -> Ident
{
    {
        let name = interned.get(name).cloned().unwrap_or_else(|| {
            let name = Arc::<str>::from(name.to_string().into_boxed_str());
            interned.insert(name.clone());
            name
        });
        Ident::from_raw_parts(Span::new(span!(source_file.id(), l, r), name))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action243<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "add"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action244<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action245<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv_map"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action246<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv_loadw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action247<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv_pipe"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action248<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv_push"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action249<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "adv_stack"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action250<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "and"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action251<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "arithmetic_circuit_eval"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action252<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "assert"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action253<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "assertz"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action254<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "assert_eq"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action255<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "assert_eqw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action256<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "begin"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action257<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "caller"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action258<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "call"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action259<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "cdrop"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action260<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "cdropw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action261<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "clk"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action262<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "const"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action263<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "cswap"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action264<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "cswapw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action265<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "debug"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action266<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "div"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action267<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "drop"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action268<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "dropw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action269<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "dup"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action270<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "dupw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action271<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "dynexec"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action272<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "dyncall"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action273<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "else"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action274<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "emit"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action275<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "end"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action276<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "eq"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action277<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "eqw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action278<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2add"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action279<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2div"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action280<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2inv"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action281<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2mul"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action282<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2neg"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action283<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ext2sub"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action284<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "err"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action285<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "exec"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action286<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "exp"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action287<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "exp.u"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action288<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "export"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action289<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "gt"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action290<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "gte"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action291<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "hash"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action292<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "hperm"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action293<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "hmerge"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action294<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "ilog2"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action295<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "inv"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action296<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "is_odd"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action297<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "local"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action298<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "locaddr"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action299<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "loc_load"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action300<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "loc_loadw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action301<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "loc_store"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action302<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "loc_storew"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action303<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "lt"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action304<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "lte"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action305<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action306<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem_load"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action307<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem_loadw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action308<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem_store"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action309<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem_storew"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action310<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mem_stream"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action311<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "movdn"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action312<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "movdnw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action313<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "movup"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action314<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "movupw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action315<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mtree_merge"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action316<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mtree_verify"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action317<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "mul"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action318<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "neg"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action319<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "neq"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action320<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "not"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action321<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "or"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action322<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "padw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action323<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "pow2"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action324<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "proc"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action325<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "procref"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action326<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "push"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action327<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "repeat"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action328<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "sdepth"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action329<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "stack"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action330<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "sub"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action331<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "swap"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action332<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "swapw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action333<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "swapdw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action334<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "syscall"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action335<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "trace"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action336<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32and"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action337<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32assert"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action338<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32assert2"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action339<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32assertw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action340<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32cast"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action341<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32div"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action342<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32divmod"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action343<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32gt"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action344<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32gte"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action345<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32lt"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action346<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32lte"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action347<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32max"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action348<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32min"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action349<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32mod"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action350<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32not"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action351<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32or"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action352<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32overflowing_add"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action353<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32overflowing_add3"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action354<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32overflowing_madd"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action355<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32overflowing_mul"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action356<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32overflowing_sub"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action357<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32popcnt"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action358<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32clz"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action359<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32ctz"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action360<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32clo"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action361<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32cto"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action362<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32rotl"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action363<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32rotr"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action364<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32shl"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action365<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32shr"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action366<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32split"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action367<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32test"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action368<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32testw"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action369<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32wrapping_add"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action370<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32wrapping_add3"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action371<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32wrapping_madd"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action372<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32wrapping_mul"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action373<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32wrapping_sub"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action374<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "u32xor"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action375<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Token<'input>, u32),
) -> &'static str
{
    "xor"
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action376<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, x, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, y, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let expr = ConstantExpr::BinaryOp {  span: span!(source_file.id(), l, r), op: ConstantOp::Add, lhs: Box::new(x), rhs: Box::new(y) };
        expr.try_fold().map_err(|error| ParseError::User { error })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action377<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, x, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, y, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let expr = ConstantExpr::BinaryOp { span: span!(source_file.id(), l, r), op: ConstantOp::Sub, lhs: Box::new(x), rhs: Box::new(y) };
        expr.try_fold().map_err(|error| ParseError::User { error })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action378<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ConstantExpr, u32),
) -> ConstantExpr
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action379<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, x, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, y, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let expr = ConstantExpr::BinaryOp { span: span!(source_file.id(), l, r), op: ConstantOp::Mul, lhs: Box::new(x), rhs: Box::new(y) };
        expr.try_fold().map_err(|error| ParseError::User { error })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action380<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, x, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, y, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let expr = ConstantExpr::BinaryOp { span: span!(source_file.id(), l, r), op: ConstantOp::Div, lhs: Box::new(x), rhs: Box::new(y) };
        expr.try_fold().map_err(|error| ParseError::User { error })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action381<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, x, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
    (_, y, _): (u32, ConstantExpr, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let expr = ConstantExpr::BinaryOp { span: span!(source_file.id(), l, r), op: ConstantOp::IntDiv, lhs: Box::new(x), rhs: Box::new(y) };
        expr.try_fold().map_err(|error| ParseError::User { error })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action382<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ConstantExpr, u32),
) -> ConstantExpr
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action383<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, name, _): (u32, &'input str, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        let name = interned.get(name).cloned().unwrap_or_else(|| {
            let name = Arc::<str>::from(name.to_string().into_boxed_str());
            interned.insert(name.clone());
            name
        });
        let span = span!(source_file.id(), l, r);

        Ident::validate(&name)
            .map_err(|error| ParseError::User {
                error: ParsingError::InvalidIdentifier { error, span },
            })?;
        Ok(Ident::from_raw_parts(Span::new(span, name)))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action384<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, ConstantExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> ConstantExpr
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action385<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, value, _): (u32, IntValue, u32),
    (_, r, _): (u32, u32, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    {
        Ok(match value {
            IntValue::U8(v) => ConstantExpr::Literal(Span::new(span!(source_file.id(), l, r), Felt::new(v as u64))),
            IntValue::U16(v) => ConstantExpr::Literal(Span::new(span!(source_file.id(), l, r), Felt::new(v as u64))),
            IntValue::U32(v) => ConstantExpr::Literal(Span::new(span!(source_file.id(), l, r), Felt::new(v as u64))),
            IntValue::Felt(v) => ConstantExpr::Literal(Span::new(span!(source_file.id(), l, r), v)),
            IntValue::Word(t) => ConstantExpr::Word(Span::new(span!(source_file.id(), l, r),t))
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action386<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, Ident, u32),
    (_, r, _): (u32, u32, u32),
) -> ConstantExpr
{
    ConstantExpr::String(t)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action387<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> ConstantExpr
{
    ConstantExpr::Var(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action388<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, &'input str, u32),
) -> &'input str
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action389<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, &'input str, u32),
) -> &'input str
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action390<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, mut v, _): (u32, alloc::vec::Vec<Ident>, u32),
    (_, e, _): (u32, Ident, u32),
) -> Vec<Ident>
{
    {
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action391<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Option<Ident>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action392<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Ident>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action393<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action394<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Ident>, u32),
) -> alloc::vec::Vec<Ident>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action395<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> Ident
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action396<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, mut v, _): (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
    (_, e, _): (u32, Immediate<IntValue>, u32),
) -> Vec<Immediate<IntValue>>
{
    {
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action397<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Span<u8>, u32),
) -> Option<Span<u8>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action398<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Span<u8>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action399<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Span<u8>, u32),
) -> Span<u8>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action400<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<u8>, u32),
) -> Option<Immediate<u8>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action401<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Immediate<u8>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action402<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<Felt>, u32),
) -> Option<Immediate<Felt>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action403<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Immediate<Felt>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action404<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<u16>, u32),
) -> Option<Immediate<u16>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action405<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Immediate<u16>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action406<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Immediate<u16>, u32),
) -> Immediate<u16>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action407<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<u32>, u32),
) -> Option<Immediate<u32>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action408<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Immediate<u32>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action409<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Immediate<u32>, u32),
) -> Immediate<u32>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action410<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<Span<u8>>, u32),
) -> Option<Immediate<Span<u8>>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action411<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Immediate<Span<u8>>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action412<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Block, u32),
) -> Option<Block>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action413<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Block>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action414<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, SmallOpsVec, u32),
) -> alloc::vec::Vec<SmallOpsVec>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action415<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<SmallOpsVec>, u32),
    (_, e, _): (u32, SmallOpsVec, u32),
) -> alloc::vec::Vec<SmallOpsVec>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action416<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, mut v, _): (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    (_, e, _): (u32, Span<(Ident, MetaExpr)>, u32),
) -> Vec<Span<(Ident, MetaExpr)>>
{
    {
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action417<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, mut v, _): (u32, alloc::vec::Vec<MetaExpr>, u32),
    (_, e, _): (u32, MetaExpr, u32),
) -> Vec<MetaExpr>
{
    {
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action418<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, ProcedureName, u32),
) -> Option<ProcedureName>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action419<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<ProcedureName>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action420<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, ProcedureName, u32),
) -> ProcedureName
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action421<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, t, _): (u32, u16, u32),
) -> Option<u16>
{
    Some(t)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action422<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<u16>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action423<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<Attribute>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action424<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Attribute>, u32),
) -> alloc::vec::Vec<Attribute>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action425<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, mut v, _): (u32, alloc::vec::Vec<Felt>, u32),
    (_, e, _): (u32, Felt, u32),
) -> Vec<Felt>
{
    {
        v.push(e);
        v
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action426<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Option<Ident>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action427<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> Option<Ident>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action428<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Ident, u32),
) -> Ident
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action429<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> u32
{
    *__lookbehind
}

#[allow(unused_variables)]
#[allow(clippy::needless_lifetimes)]
fn __action430<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> u32
{
    *__lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action431<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Form, u32),
) -> alloc::vec::Vec<Form>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action432<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Form>, u32),
    (_, e, _): (u32, Form, u32),
) -> alloc::vec::Vec<Form>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action433<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<Felt>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action434<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Felt>, u32),
) -> alloc::vec::Vec<Felt>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action435<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Felt, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> Felt
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action436<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Attribute, u32),
) -> alloc::vec::Vec<Attribute>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action437<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Attribute>, u32),
    (_, e, _): (u32, Attribute, u32),
) -> alloc::vec::Vec<Attribute>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action438<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<MetaExpr>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action439<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<MetaExpr>, u32),
) -> alloc::vec::Vec<MetaExpr>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action440<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, MetaExpr, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> MetaExpr
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action441<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action442<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action443<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Span<(Ident, MetaExpr)>, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> Span<(Ident, MetaExpr)>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action444<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Immediate<Span<u8>>, u32),
) -> Immediate<Span<u8>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action445<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, u32, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<u32>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action446<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<u32>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action447<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, u16, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<u16>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action448<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<u16>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action449<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Immediate<Felt>, u32),
) -> Immediate<Felt>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action450<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, _, _): (u32, Token<'input>, u32),
    (_, __0, _): (u32, Immediate<u8>, u32),
) -> Immediate<u8>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action451<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __lookbehind: &u32,
    __lookahead: &u32,
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action452<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action453<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<IntValue>, u32),
    (_, _, _): (u32, Token<'input>, u32),
) -> Immediate<IntValue>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action454<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action455<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Ident>, u32),
    (_, e, _): (u32, Ident, u32),
) -> alloc::vec::Vec<Ident>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action456<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Immediate<IntValue>, u32),
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action457<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
    (_, e, _): (u32, Immediate<IntValue>, u32),
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action458<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, u8, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<u8>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action459<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<u8>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action460<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, Felt, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<Felt>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action461<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<Felt>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action462<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, l, _): (u32, u32, u32),
    (_, t, _): (u32, Span<u8>, u32),
    (_, r, _): (u32, u32, u32),
) -> Immediate<Span<u8>>
{
    Immediate::Value(Span::new(span!(source_file.id(), l, r), t))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action463<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Ident, u32),
) -> Immediate<Span<u8>>
{
    Immediate::Constant(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action464<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Span<(Ident, MetaExpr)>, u32),
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action465<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    (_, e, _): (u32, Span<(Ident, MetaExpr)>, u32),
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action466<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, MetaExpr, u32),
) -> alloc::vec::Vec<MetaExpr>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action467<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<MetaExpr>, u32),
    (_, e, _): (u32, MetaExpr, u32),
) -> alloc::vec::Vec<MetaExpr>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action468<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, __0, _): (u32, Felt, u32),
) -> alloc::vec::Vec<Felt>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action469<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    (_, v, _): (u32, alloc::vec::Vec<Felt>, u32),
    (_, e, _): (u32, Felt, u32),
) -> alloc::vec::Vec<Felt>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action470<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Ident, u32),
    __4: (u32, Option<Span<WordValue>>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Token<'input>, u32),
    __7: (u32, Vec<Felt>, u32),
    __8: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __8.2;
    let __end0 = __8.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action471<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, InvocationTarget, u32),
    __4: (u32, Option<ProcedureName>, u32),
) -> Result<ProcedureAlias,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action472<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Attribute, u32),
) -> Attribute
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action473<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Vec<MetaExpr>, u32),
    __4: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action22(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action474<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Vec<Span<(Ident, MetaExpr)>>, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action23(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action475<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'input str, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action236(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action476<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Op>, u32),
    __3: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action477<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Vec<Op>, u32),
) -> Block
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action30(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action478<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Ident, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, ConstantExpr, u32),
) -> Form
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action479<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, ConstantExpr, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action480<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, ConstantExpr, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action481<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, ConstantExpr, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action482<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, ConstantExpr, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action483<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, ConstantExpr, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action484<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'input str, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action383(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action485<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, DocumentationType, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action486<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> Result<Felt,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action227(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action487<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action488<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action489<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action158(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action490<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action159(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action491<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action492<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action493<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action162(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action494<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action495<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action496<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<Felt>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action165(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action497<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action166(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action498<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action167(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action499<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action168(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action500<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action169(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action501<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action170(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action502<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action503<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action172(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action504<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action173(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action505<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action174(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action506<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action175(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action507<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action176(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action508<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action177(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action509<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action510<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action511<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action512<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action513<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action514<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action515<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action516<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action517<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action186(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action518<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action519<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action188(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action520<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, bool, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action36(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action521<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, bool, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Option<Block>, u32),
    __7: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __7.2;
    let __end0 = __7.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action522<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, bool, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action38(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action523<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'input str, u32),
) -> Immediate<Arc<str>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action141(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action524<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Felt, u32),
) -> Immediate<Felt>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action460(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action525<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u8, u32),
) -> Immediate<u8>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action458(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action526<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u16, u32),
) -> Immediate<u16>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action447(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action527<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u32, u32),
) -> Immediate<u32>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action445(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action528<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Span<u8>, u32),
) -> Immediate<Span<u8>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action462(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action529<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Span<LibraryPath>, u32),
    __4: (u32, Option<Ident>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action530<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
    __3: (u32, u8, u32),
) -> Instruction
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action199(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action531<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u32, u32),
    __2: (u32, Option<Span<u8>>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action532<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Instruction, u32),
) -> SmallOpsVec
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action533<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> Immediate<IntValue>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action222(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action534<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u64, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action535<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Felt, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Felt, u32),
    __7: (u32, Token<'input>, u32),
    __8: (u32, Felt, u32),
    __9: (u32, Token<'input>, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __9.2;
    let __end0 = __9.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action225(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action536<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> Result<Span<Word>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action217(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action537<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, IntValue, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Option<Span<WordValue>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action538<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, bool, u32),
    __2: (u32, Vec<Ident>, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action539<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> MetaExpr
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action28(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action540<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, MetaExpr, u32),
) -> Span<(Ident, MetaExpr)>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action25(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action541<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'static str, u32),
) -> Ident
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action542<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, alloc::vec::Vec<SmallOpsVec>, u32),
) -> Result<Vec<Op>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action543<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
    __3: (u32, InvocationTarget, u32),
) -> Instruction
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action544<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Visibility, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ProcedureName, u32),
    __4: (u32, Option<u16>, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action545<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Vec<Immediate<IntValue>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action546<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Vec<Ident>, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action547<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'input str, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action231(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action548<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, &'input str, u32),
) -> Ident
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action29(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action549<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, u64, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Op,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action42(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action550<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action385(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action551<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Ident, u32),
) -> ConstantExpr
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action386(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action552<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u64, u32),
) -> Result<u16,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action553<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u64, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action214(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action554<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, IntValue, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action215(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action555<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, BinEncodedValue, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action216(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action556<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, u64, u32),
) -> Result<Span<u8>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action557<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action429(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action41(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action558<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
    __3: (u32, Option<Span<WordValue>>, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Vec<Felt>, u32),
    __7: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action470(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action559<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
    __3: (u32, Option<ProcedureName>, u32),
) -> Result<ProcedureAlias,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action471(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action560<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Attribute, u32),
) -> Attribute
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action472(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action561<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<MetaExpr>, u32),
    __3: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action473(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action562<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Span<(Ident, MetaExpr)>>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action474(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action563<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action475(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action564<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Vec<Op>, u32),
    __2: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action476(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action565<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Vec<Op>, u32),
) -> Block
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action477(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action566<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, ConstantExpr, u32),
) -> Form
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action478(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action567<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ConstantExpr, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action479(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action568<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ConstantExpr, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action480(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action569<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ConstantExpr, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action481(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action570<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ConstantExpr, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action482(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action571<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ConstantExpr, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ConstantExpr, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action483(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action572<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action484(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action573<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, DocumentationType, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action485(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action574<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> Result<Felt,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action486(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action575<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action487(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action576<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action488(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action577<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action489(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action578<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action490(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action579<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action491(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action580<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action492(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action581<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action493(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action582<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action494(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action583<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action584<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<Felt>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action585<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action497(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action586<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action587<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action588<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action589<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action590<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action591<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action503(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action592<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action504(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action593<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action505(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action594<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action506(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action595<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action507(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action596<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action508(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action597<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action509(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action598<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action510(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action599<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action511(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action600<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action512(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action601<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u8>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action513(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action602<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action514(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action603<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action515(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action604<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action516(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action605<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action517(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action606<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action518(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action607<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Immediate<u32>>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action519(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action608<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, bool, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action520(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action609<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, bool, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Option<Block>, u32),
    __6: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action521(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action610<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, bool, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action522(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action611<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Immediate<Arc<str>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action523(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action612<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Felt, u32),
) -> Immediate<Felt>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action524(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action613<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u8, u32),
) -> Immediate<u8>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action525(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action614<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u16, u32),
) -> Immediate<u16>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action526(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action615<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u32, u32),
) -> Immediate<u32>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action527(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action616<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Span<u8>, u32),
) -> Immediate<Span<u8>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action528(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action617<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<LibraryPath>, u32),
    __3: (u32, Option<Ident>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action529(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action618<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> Instruction
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action530(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action619<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Option<Span<u8>>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action531(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action620<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Instruction, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action532(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action621<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> Immediate<IntValue>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action533(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action622<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u64, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action534(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action623<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Felt, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Felt, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Felt, u32),
    __6: (u32, Token<'input>, u32),
    __7: (u32, Felt, u32),
    __8: (u32, Token<'input>, u32),
) -> Result<IntValue,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action535(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action624<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> Result<Span<Word>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action536(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action625<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, IntValue, u32),
    __2: (u32, Token<'input>, u32),
) -> Result<Option<Span<WordValue>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action537(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action626<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, bool, u32),
    __1: (u32, Vec<Ident>, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action538(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action627<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> MetaExpr
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action539(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action628<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, MetaExpr, u32),
) -> Span<(Ident, MetaExpr)>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action540(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action629<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'static str, u32),
) -> Ident
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action541(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action630<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<SmallOpsVec>, u32),
) -> Result<Vec<Op>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action542(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action631<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> Instruction
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action543(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action632<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Visibility, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Option<u16>, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action544(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action633<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Immediate<IntValue>>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action545(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action634<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Vec<Ident>, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action546(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action635<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action547(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action636<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Ident
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action548(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action637<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u64, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Op,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action549(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action638<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action550(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action639<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> ConstantExpr
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action551(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action640<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u64, u32),
) -> Result<u16,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action552(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action641<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u64, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action553(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action642<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, IntValue, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action554(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action643<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, BinEncodedValue, u32),
) -> Result<u32,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action555(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action644<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, u64, u32),
) -> Result<Span<u8>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action556(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action645<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action430(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action557(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action646<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action428(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action647<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
) -> Ident
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action428(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action648<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
) -> Result<Ident,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action395(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action649<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
) -> Ident
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action395(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action650<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<MetaExpr>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action561(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action651<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<MetaExpr>, u32),
    __3: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action561(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action652<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Span<(Ident, MetaExpr)>>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action562(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action653<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Span<(Ident, MetaExpr)>>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action562(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action654<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action24(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action655<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> Attribute
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action656<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action230(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action657<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> ProcedureName
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action230(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action658<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<MetaExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action26(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action659<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> MetaExpr
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action26(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action660<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, MetaExpr, u32),
) -> Result<Span<(Ident, MetaExpr)>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action628(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action661<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, MetaExpr, u32),
) -> Span<(Ident, MetaExpr)>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action628(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action662<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Vec<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action563(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action390(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action663<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, Ident, u32),
) -> Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action237(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action664<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action646(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action426(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action665<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
) -> Option<Ident>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action647(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action426(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action666<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<LibraryPath>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action664(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action617(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action667<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<LibraryPath>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Ident, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action665(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action617(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action668<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<LibraryPath>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action427(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action617(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action669<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, ProcedureName, u32),
) -> Option<ProcedureName>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action420(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action418(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action670<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, ProcedureName, u32),
) -> Result<ProcedureAlias,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action669(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action559(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action671<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> Result<ProcedureAlias,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action419(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action559(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action672<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Span<u8>, u32),
) -> Option<Span<u8>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action399(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action397(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action673<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action399(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action674<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action399(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action203(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action675<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action399(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action676<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action399(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action677<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action672(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action678<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action398(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action679<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action672(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action619(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action680<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action398(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action619(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action681<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action672(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action682<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action398(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action206(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action683<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action672(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action207(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action684<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action398(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action207(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action685<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
) -> Result<alloc::vec::Vec<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action648(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action454(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action686<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action649(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action454(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action687<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, &'input str, u32),
    __2: (u32, Token<'input>, u32),
) -> Result<alloc::vec::Vec<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action648(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action455(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action688<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action649(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action455(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action689<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
) -> Result<Option<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action648(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action391(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action690<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
) -> Option<Ident>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action649(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action691<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Ident>, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action648(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action634(
        source_file,
        interned,
        _marker,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action692<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Vec<Ident>, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action649(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action634(
        source_file,
        interned,
        _marker,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action693<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, ProcedureName, u32),
) -> Result<InvocationTarget,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action393(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action234(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action694<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, alloc::vec::Vec<Ident>, u32),
    __2: (u32, ProcedureName, u32),
) -> Result<InvocationTarget,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action394(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action234(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action695<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Vec<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action393(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action662(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action696<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Vec<Ident>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action394(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action662(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action697<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action393(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action663(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action698<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, Ident, u32),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action394(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action663(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action699<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
) -> Result<InvocationTarget,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action689(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action235(
        source_file,
        interned,
        _marker,
        __temp0,
        __2,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action700<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
) -> InvocationTarget
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action690(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action235(
        source_file,
        interned,
        _marker,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action701<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, ProcedureName, u32),
) -> InvocationTarget
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action392(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action235(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action702<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Felt, u32),
    __1: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Felt>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action435(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action468(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action703<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Felt>, u32),
    __1: (u32, Felt, u32),
    __2: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Felt>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action435(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action469(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action704<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Felt, u32),
) -> Vec<Felt>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action433(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action425(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action705<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Felt>, u32),
    __1: (u32, Felt, u32),
) -> Vec<Felt>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action434(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action425(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action706<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Immediate<IntValue>, u32),
    __1: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action453(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action456(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action707<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
    __1: (u32, Immediate<IntValue>, u32),
    __2: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Immediate<IntValue>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action453(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action457(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action708<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Immediate<IntValue>, u32),
) -> Vec<Immediate<IntValue>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action451(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action396(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action709<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
    __1: (u32, Immediate<IntValue>, u32),
) -> Vec<Immediate<IntValue>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action452(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action396(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action710<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, MetaExpr, u32),
    __1: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<MetaExpr>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action440(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action466(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action711<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __1: (u32, MetaExpr, u32),
    __2: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<MetaExpr>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action440(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action467(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action712<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, MetaExpr, u32),
) -> Vec<MetaExpr>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action438(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action417(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action713<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __1: (u32, MetaExpr, u32),
) -> Vec<MetaExpr>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action439(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action417(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action714<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Span<(Ident, MetaExpr)>, u32),
    __1: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action443(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action464(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action715<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __1: (u32, Span<(Ident, MetaExpr)>, u32),
    __2: (u32, Token<'input>, u32),
) -> alloc::vec::Vec<Span<(Ident, MetaExpr)>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action443(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action465(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action716<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Span<(Ident, MetaExpr)>, u32),
) -> Vec<Span<(Ident, MetaExpr)>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action441(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action416(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action717<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __1: (u32, Span<(Ident, MetaExpr)>, u32),
) -> Vec<Span<(Ident, MetaExpr)>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action442(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action416(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action718<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, ProcedureName, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action670(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action16(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action719<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action671(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action16(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action720<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Procedure, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action423(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action721<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Attribute>, u32),
    __1: (u32, Procedure, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action424(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action722<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<(Ident, MetaExpr)>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action716(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action652(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action723<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __3: (u32, Span<(Ident, MetaExpr)>, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action717(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action652(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action724<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<(Ident, MetaExpr)>, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action716(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action653(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action725<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __3: (u32, Span<(Ident, MetaExpr)>, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action717(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action653(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action726<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, MetaExpr, u32),
    __3: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action712(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action650(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action727<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __3: (u32, MetaExpr, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action713(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action650(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action728<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, MetaExpr, u32),
    __3: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action712(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action651(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action729<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __3: (u32, MetaExpr, u32),
    __4: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action713(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action651(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action730<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, MetaExpr, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __4.2;
    let __temp0 = __action726(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action731<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __4: (u32, MetaExpr, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action727(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action732<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, MetaExpr, u32),
    __4: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __1.0;
    let __end0 = __4.2;
    let __temp0 = __action728(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action733<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, alloc::vec::Vec<MetaExpr>, u32),
    __4: (u32, MetaExpr, u32),
    __5: (u32, Token<'input>, u32),
) -> Attribute
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action729(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action734<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Span<(Ident, MetaExpr)>, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __4.2;
    let __temp0 = __action722(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action735<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __4: (u32, Span<(Ident, MetaExpr)>, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action723(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action736<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Span<(Ident, MetaExpr)>, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __4.2;
    let __temp0 = __action724(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action737<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, alloc::vec::Vec<Span<(Ident, MetaExpr)>>, u32),
    __4: (u32, Span<(Ident, MetaExpr)>, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action725(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action738<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Attribute,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action654(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action739<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
) -> Attribute
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action655(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action560(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action740<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action656(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action228(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action741<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> ProcedureName
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action657(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action228(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action742<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, bool, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action412(
        source_file,
        interned,
        _marker,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action609(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action743<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, bool, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action413(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action609(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action744<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
    __3: (u32, Option<Span<WordValue>>, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Felt, u32),
    __7: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action704(
        source_file,
        interned,
        _marker,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action558(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action745<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
    __3: (u32, Option<Span<WordValue>>, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, alloc::vec::Vec<Felt>, u32),
    __7: (u32, Felt, u32),
    __8: (u32, Token<'input>, u32),
) -> Form
{
    let __start0 = __6.0;
    let __end0 = __7.2;
    let __temp0 = __action705(
        source_file,
        interned,
        _marker,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action558(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action746<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action39(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action608(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action747<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action40(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action608(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action748<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action39(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action742(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action749<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action40(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action742(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action750<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action39(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action743(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action751<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action40(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action743(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action752<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action39(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action610(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action753<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Op
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action40(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action610(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action754<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
    __3: (u32, Option<Span<WordValue>>, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, Felt, u32),
    __7: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action744(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action755<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
    __3: (u32, Option<Span<WordValue>>, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, alloc::vec::Vec<Felt>, u32),
    __7: (u32, Felt, u32),
    __8: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action745(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action756<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, ConstantExpr, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action566(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
        __3,
        __4,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action757<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<Arc<str>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action142(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action758<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<Felt>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action461(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action759<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<u8>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action459(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action760<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<u16>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action448(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action761<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<u32>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action446(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action762<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<Span<u8>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action463(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action763<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Immediate<IntValue>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action223(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action764<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<ConstantExpr,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action572(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action387(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action765<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u32, u32),
) -> Immediate<u32>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action615(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action409(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action766<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Immediate<u32>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action761(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action409(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action767<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action765(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action765(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action148(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action768<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action765(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action766(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    )?;
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action148(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action769<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action766(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action765(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    );
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action148(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action770<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action766(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action766(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    )?;
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action148(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action771<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action765(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action772<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action766(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action153(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action773<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action765(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action774<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action766(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action154(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action775<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u32, u32),
) -> Option<Immediate<u32>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action765(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action407(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action776<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Immediate<u32>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action766(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action407(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action777<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u16, u32),
) -> Immediate<u16>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action614(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action406(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action778<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Immediate<u16>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action760(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action406(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action779<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action777(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action150(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action780<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action778(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    )?;
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action150(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action781<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action777(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    );
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action150(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action782<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action778(
        source_file,
        interned,
        _marker,
        __5,
        __6,
    )?;
    let __temp1 = (__start1, __temp1, __end1);
    Ok(__action150(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __temp1,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action783<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action194(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action784<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action194(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action785<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action195(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action786<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action195(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action787<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action788<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action196(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action789<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action790<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action197(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action791<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action198(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action792<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action198(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action793<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u16, u32),
) -> Option<Immediate<u16>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action777(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action404(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action794<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Immediate<u16>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action778(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action404(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action795<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action793(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action796<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action794(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action151(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action797<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action405(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action798<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action793(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action799<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action794(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action152(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action800<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action405(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action801<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action802<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action149(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action803<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action804<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action585(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action805<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action585(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action806<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action585(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action807<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action586(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action808<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action586(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action809<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action586(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action810<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action587(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action811<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action587(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action812<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action587(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action813<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action588(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action814<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action588(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action815<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action588(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action816<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action589(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action817<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action589(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action818<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action589(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action819<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action590(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action820<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action590(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action821<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action590(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action822<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action591(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action823<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action591(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action824<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action591(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action825<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action592(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action826<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action592(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action827<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action592(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action828<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action593(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action829<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action593(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action830<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action593(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action831<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action594(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action832<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action594(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action833<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action594(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action834<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action595(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action835<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action595(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action836<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action595(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action837<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action596(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action838<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action596(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action839<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action596(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action840<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action597(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action841<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action597(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action842<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action597(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action843<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action602(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action844<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action602(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action845<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action602(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action846<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action603(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action847<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action603(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action848<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action603(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action849<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action604(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action850<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action604(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action851<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action604(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action852<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action605(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action853<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action605(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action854<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action605(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action855<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action606(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action856<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action606(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action857<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action606(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action858<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action607(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action859<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action607(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action860<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action607(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action861<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action190(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action862<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action190(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action863<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action190(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action864<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action191(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action865<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action191(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action866<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action191(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action867<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action868<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action192(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action869<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action870<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action775(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action871<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action776(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action193(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action872<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action408(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action873<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Span<u8>, u32),
) -> Immediate<Span<u8>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action616(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action444(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action874<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Immediate<Span<u8>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action762(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action444(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action875<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Span<u8>, u32),
) -> Option<Immediate<Span<u8>>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action873(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action410(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action876<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Immediate<Span<u8>>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action874(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action410(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action877<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Span<u8>, u32),
) -> Instruction
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action875(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action878<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action876(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action147(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action879<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action411(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action880<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action146(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action881<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Span<u8>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action877(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action882<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action878(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action883<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action879(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action884<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action767(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action885<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action768(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action886<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action769(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action887<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action770(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action888<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action801(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action889<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action802(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action890<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action803(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action891<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action779(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action892<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action780(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action893<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action781(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action894<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action782(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action895<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action795(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action896<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action796(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action897<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action797(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action898<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action798(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action899<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action799(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action900<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action800(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action901<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action771(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action902<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action772(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action903<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action773(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action904<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action774(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action50(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action905<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Immediate<IntValue>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action708(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action633(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action906<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Immediate<IntValue>>, u32),
    __3: (u32, Immediate<IntValue>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action709(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action633(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action907<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Felt, u32),
) -> Immediate<Felt>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action612(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action449(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action908<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Immediate<Felt>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action758(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action449(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action909<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Felt, u32),
) -> Option<Immediate<Felt>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action907(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action402(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action910<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Immediate<Felt>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action908(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action402(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action911<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action575(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action912<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action575(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action913<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action575(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action914<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action576(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action915<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action576(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action916<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action576(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action917<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action577(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action918<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action577(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action919<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action577(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action920<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action578(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action921<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action578(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action922<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action578(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action923<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action579(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action924<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action579(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action925<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action579(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action926<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action580(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action927<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action580(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action928<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action580(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action929<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action581(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action930<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action581(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action931<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action581(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action932<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action582(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action933<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action582(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action934<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action582(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action935<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action583(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action936<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action583(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action937<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action583(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action938<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action584(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action939<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action584(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action940<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action584(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action941<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> Instruction
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action909(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action942<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action910(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action189(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action943<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action403(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action944<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action911(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action945<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action912(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action946<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action913(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action947<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action914(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action948<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action915(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action949<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action916(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action950<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action917(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action951<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action918(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action952<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action919(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action953<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action920(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action954<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action921(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action955<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action922(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action956<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action923(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action957<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action924(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action958<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action925(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action959<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action926(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action960<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action927(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action961<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action928(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action962<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action929(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action963<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action930(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action964<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action931(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action965<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action932(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action966<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action933(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action967<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action934(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action968<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action935(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action969<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action936(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action970<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action937(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action971<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action938(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action972<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action939(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action973<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action940(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action45(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action974<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u8, u32),
) -> Immediate<u8>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action613(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action450(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action975<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Immediate<u8>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action759(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action450(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action976<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u8, u32),
) -> Option<Immediate<u8>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action974(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action400(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action977<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Option<Immediate<u8>>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action975(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action400(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action978<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action976(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action598(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action979<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action977(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action598(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action980<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action401(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action598(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action981<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action976(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action599(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action982<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action977(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action599(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action983<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action401(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action599(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action984<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action976(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action600(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action985<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action977(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action600(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action986<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action401(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action600(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action987<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action976(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action601(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action988<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action977(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action601(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action989<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action401(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action601(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action990<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action804(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action991<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action805(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action992<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action806(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action993<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action807(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action994<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action808(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action995<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action809(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action996<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action810(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action997<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action811(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action998<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action812(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action999<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action813(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1000<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action814(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1001<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action815(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1002<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action816(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1003<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action817(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1004<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action818(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1005<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action819(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1006<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action820(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1007<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action821(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1008<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action822(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1009<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action823(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1010<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action824(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1011<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action825(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1012<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action826(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1013<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action827(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1014<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action828(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1015<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action829(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1016<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action830(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1017<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action831(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1018<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action832(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1019<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action833(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1020<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action834(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1021<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action835(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1022<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action836(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1023<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action837(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1024<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action838(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1025<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action839(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1026<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action840(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1027<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action841(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1028<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action842(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1029<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action978(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1030<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action979(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1031<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action980(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1032<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action981(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1033<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action982(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1034<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action983(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1035<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action984(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1036<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action985(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1037<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action986(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1038<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action987(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1039<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action988(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1040<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action989(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1041<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action843(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1042<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action844(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1043<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action845(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1044<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action846(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1045<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action847(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1046<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action848(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1047<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action849(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1048<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action850(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1049<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action851(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1050<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action852(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1051<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action853(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1052<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action854(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1053<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action855(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1054<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action856(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1055<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action857(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1056<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action858(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1057<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action859(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action46(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1058<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action860(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1059<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Immediate<Arc<str>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action388(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action611(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1060<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Immediate<Arc<str>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action389(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action611(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1061<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Ident
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action388(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action636(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1062<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Ident
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action389(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action636(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1063<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1064<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1065<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action126(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1066<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1067<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1068<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action128(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1069<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1070<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1071<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action130(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1072<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1073<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1074<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action132(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1075<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1076<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1077<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action134(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1078<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1079<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1080<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action136(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1081<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1082<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1083<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action138(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1084<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1059(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1085<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action1060(
        source_file,
        interned,
        _marker,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1086<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action757(
        source_file,
        interned,
        _marker,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action140(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1087<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action631(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1088<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action861(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1089<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action862(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action56(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1090<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action863(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1091<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action864(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1092<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action865(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action56(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1093<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action866(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1094<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action867(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1095<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action868(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action56(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1096<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action869(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1097<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action870(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1098<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action871(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action56(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1099<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action872(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1100<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action618(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1101<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action677(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1102<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action678(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1103<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action679(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1104<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action680(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1105<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action673(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1106<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action674(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1107<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action675(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1108<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action676(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1109<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action681(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1110<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action682(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1111<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action683(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1112<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action684(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action55(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1113<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action783(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1114<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action784(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action54(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1115<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action785(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1116<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action786(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action54(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1117<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action787(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1118<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action788(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action54(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1119<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action789(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1120<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action790(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action54(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1121<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action791(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1122<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action792(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action54(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1123<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action941(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action53(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1124<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action942(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action53(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1125<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action943(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action53(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1126<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action125(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1127<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1063(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1128<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1064(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1129<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1065(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1130<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action127(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1131<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1066(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1132<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1067(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1133<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1068(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1134<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action129(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1135<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1069(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1136<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1070(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1137<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1071(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1138<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action131(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1139<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1072(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1140<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1073(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1141<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1074(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1142<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action133(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1143<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1075(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1144<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1076(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1145<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1077(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1146<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action135(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1147<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1078(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1148<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1079(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1149<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1080(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1150<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action137(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1151<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1081(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1152<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1082(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1153<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1083(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1154<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action139(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1155<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1084(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1156<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1085(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1157<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<Instruction,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1086(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action52(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1158<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u8, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action208(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action51(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1159<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action114(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1160<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action115(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1161<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action116(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1162<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action117(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1163<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action118(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1164<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action119(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1165<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action120(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1166<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action121(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1167<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action122(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1168<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action123(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1169<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> Instruction
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action124(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1170<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1159(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1171<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1160(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1172<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1161(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1173<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1162(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1174<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1163(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1175<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1164(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1176<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1165(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1177<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1166(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1178<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1167(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1179<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1168(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1180<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1169(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1181<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Instruction, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action49(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1182<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action880(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1183<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Span<u8>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action881(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1184<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action882(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1185<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action883(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1186<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action884(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1187<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action885(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1188<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action886(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1189<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action887(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1190<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action888(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1191<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action889(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1192<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action890(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1193<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action891(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1194<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action892(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1195<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action893(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1196<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action894(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1197<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action895(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1198<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action896(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1199<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action897(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1200<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action898(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1201<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action899(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1202<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action900(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1203<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action901(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1204<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action902(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1205<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action903(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1206<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action904(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1207<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action1158(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1208<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1126(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1209<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1127(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1210<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1128(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1211<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1129(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1212<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1130(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1213<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1131(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1214<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1132(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1215<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1133(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1216<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1134(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1217<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1135(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1218<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1136(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1219<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1137(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1220<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1138(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1221<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1139(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1222<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1140(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1223<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1141(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1224<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1142(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1225<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1143(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1226<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1144(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1227<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1145(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1228<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1146(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1229<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1147(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1230<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1148(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1231<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1149(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1232<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1150(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1233<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1151(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1234<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1152(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1235<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1153(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1236<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1154(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1237<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1155(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1238<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1156(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1239<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1157(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1240<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1123(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1241<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1124(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1242<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1125(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1243<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1113(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1244<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1114(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1245<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1115(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1246<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1116(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1247<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1117(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1248<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1118(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1249<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1119(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1250<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1120(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1251<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1121(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1252<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1122(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1253<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1100(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1254<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1101(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1255<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1102(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1256<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1103(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1257<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1104(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1258<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1105(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1259<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1106(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1260<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1107(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1261<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1108(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1262<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1109(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1263<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1110(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1264<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1111(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1265<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1112(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1266<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1088(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1267<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1089(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1268<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1090(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1269<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1091(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1270<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1092(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1271<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1093(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1272<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1094(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1273<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1095(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1274<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1096(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1275<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1097(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1276<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1098(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action620(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1277<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1099(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1278<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1087(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1279<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action58(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1280<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action59(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1281<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action60(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1282<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action61(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1283<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action62(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1284<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action63(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1285<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action64(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1286<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action65(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1287<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action66(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1288<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action67(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1289<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action68(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1290<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action69(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1291<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action70(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1292<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action71(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1293<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action72(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1294<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action73(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1295<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action74(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1296<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action75(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1297<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action76(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1298<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action77(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1299<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action78(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1300<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action79(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1301<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action80(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1302<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action81(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1303<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action82(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1304<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action83(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1305<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action84(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1306<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action85(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1307<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action86(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1308<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action87(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1309<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action88(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1310<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action89(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1311<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action90(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1312<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action91(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1313<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action92(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1314<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action93(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1315<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action94(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1316<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action95(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1317<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action96(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1318<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action97(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1319<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action98(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1320<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action99(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1321<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action100(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1322<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action101(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1323<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action102(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1324<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action103(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1325<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action104(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1326<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action105(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1327<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action106(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1328<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action107(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1329<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action108(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1330<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action109(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1331<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action110(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1332<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action111(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1333<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action112(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1334<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action113(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action620(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1335<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1170(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1336<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1171(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1337<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1172(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1338<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1173(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1339<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1174(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1340<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1175(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1341<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1176(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1342<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1177(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1343<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1178(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1344<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1179(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1345<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1180(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1346<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Instruction, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1181(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1347<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1182(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1348<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, Span<u8>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1183(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1349<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1184(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1350<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1185(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1351<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1186(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1352<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1187(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1353<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u32, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1188(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1354<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1189(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1355<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1190(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1356<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1191(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1357<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1192(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1358<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1193(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1359<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1194(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1360<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, u16, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1195(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1361<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
    __5: (u32, Token<'input>, u32),
    __6: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1196(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1362<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1197(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1363<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1198(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1364<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1199(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1365<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1200(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1366<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1201(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1367<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1202(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1368<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1203(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1369<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1204(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1370<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1205(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1371<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1206(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1372<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action1207(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1373<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1208(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1374<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1209(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1375<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1210(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1376<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1211(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1377<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1212(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1378<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1213(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1379<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1214(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1380<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1215(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1381<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1216(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1382<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1217(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1383<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1218(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1384<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1219(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1385<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1220(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1386<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1221(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1387<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1222(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1388<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1223(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1389<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1224(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1390<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1225(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1391<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1226(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1392<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1227(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1393<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1228(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1394<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1229(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1395<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1230(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1396<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1231(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1397<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1232(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1398<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1233(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1399<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1234(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1400<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1235(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1401<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1236(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1402<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1237(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1403<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1238(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1404<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1239(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1405<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Felt, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1240(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1406<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1241(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1407<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1242(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1408<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1243(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1409<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1244(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1410<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1245(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1411<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1246(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1412<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1247(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1413<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1248(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1414<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1249(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1415<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1250(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1416<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u16, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1251(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1417<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1252(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1418<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u8, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1253(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1419<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1254(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1420<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1255(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1421<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1256(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1422<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1257(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1423<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1258(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1424<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1259(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1425<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1260(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1426<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1261(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1427<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1262(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1428<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1263(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1429<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Span<u8>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1264(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1430<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1265(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1431<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1266(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1432<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1267(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1433<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1268(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1434<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1269(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1435<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1270(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1436<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1271(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1437<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1272(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1438<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1273(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1439<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1274(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1440<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, u32, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1275(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1441<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<SmallOpsVec,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1276(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action35(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1442<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1277(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1443<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, InvocationTarget, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __2.2;
    let __temp0 = __action1278(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1444<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1279(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1445<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1280(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1446<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1281(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1447<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1282(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1448<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1283(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1449<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1284(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1450<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1285(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1451<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1286(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1452<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1287(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1453<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1288(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1454<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1289(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1455<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1290(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1456<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1291(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1457<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1292(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1458<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1293(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1459<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1294(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1460<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1295(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1461<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1296(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1462<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1297(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1463<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1298(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1464<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1299(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1465<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1300(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1466<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1301(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1467<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1302(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1468<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1303(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1469<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1304(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1470<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1305(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1471<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1306(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1472<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1307(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1473<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1308(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1474<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1309(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1475<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1310(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1476<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1311(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1477<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1312(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1478<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1313(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1479<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1314(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1480<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1315(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1481<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1316(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1482<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1317(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1483<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1318(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1484<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1319(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1485<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1320(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1486<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1321(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1487<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1322(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1488<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1323(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1489<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1324(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1490<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1325(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1491<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1326(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1492<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1327(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1493<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1328(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1494<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1329(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1495<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1330(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1496<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1331(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1497<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1332(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1498<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1333(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1499<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1334(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1500<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, SmallOpsVec, u32),
) -> SmallOpsVec
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action44(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action35(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1501<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Vec<Ident>, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action239(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action626(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1502<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Vec<Ident>, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action240(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action626(
        source_file,
        interned,
        _marker,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1503<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Visibility, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action421(
        source_file,
        interned,
        _marker,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action632(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1504<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Visibility, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action422(
        source_file,
        interned,
        _marker,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action632(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1505<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, alloc::vec::Vec<SmallOpsVec>, u32),
    __2: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action630(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action564(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
        __2,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1506<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<SmallOpsVec>, u32),
) -> Result<Block,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action630(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action565(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1507<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action695(
        source_file,
        interned,
        _marker,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action1501(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1508<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, alloc::vec::Vec<Ident>, u32),
    __2: (u32, &'input str, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action696(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action1501(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1509<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Ident, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action697(
        source_file,
        interned,
        _marker,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1501(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1510<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, alloc::vec::Vec<Ident>, u32),
    __2: (u32, Ident, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action698(
        source_file,
        interned,
        _marker,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1501(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1511<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action695(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action1502(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1512<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, &'input str, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action696(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action1502(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1513<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action697(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1502(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1514<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Ident>, u32),
    __1: (u32, Ident, u32),
) -> Result<Span<LibraryPath>,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action698(
        source_file,
        interned,
        _marker,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1502(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1515<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action695(
        source_file,
        interned,
        _marker,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action691(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1516<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Ident>, u32),
    __3: (u32, &'input str, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action696(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action691(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1517<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action697(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action691(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1518<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Ident>, u32),
    __3: (u32, Ident, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action698(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action691(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1519<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, &'input str, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action695(
        source_file,
        interned,
        _marker,
        __2,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action692(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1520<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Ident>, u32),
    __3: (u32, &'input str, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action696(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action692(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1521<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Ident, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action697(
        source_file,
        interned,
        _marker,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action692(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1522<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Ident, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, alloc::vec::Vec<Ident>, u32),
    __3: (u32, Ident, u32),
) -> Result<(Ident, LibraryPath),__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action698(
        source_file,
        interned,
        _marker,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action692(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1523<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action19(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1503(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1524<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action20(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1503(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1525<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action19(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1504(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1526<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Procedure,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action20(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1504(
        source_file,
        interned,
        _marker,
        __temp0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1527<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1523(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action720(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1528<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Token<'input>, u32),
    __4: (u32, u16, u32),
    __5: (u32, Block, u32),
    __6: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __6.2;
    let __temp0 = __action1524(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action720(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1529<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1525(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action720(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1530<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, Token<'input>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, ProcedureName, u32),
    __3: (u32, Block, u32),
    __4: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __4.2;
    let __temp0 = __action1526(
        source_file,
        interned,
        _marker,
        __0,
        __1,
        __2,
        __3,
        __4,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action720(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1531<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Attribute>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ProcedureName, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, u16, u32),
    __6: (u32, Block, u32),
    __7: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __7.2;
    let __temp0 = __action1523(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action721(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1532<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Attribute>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ProcedureName, u32),
    __4: (u32, Token<'input>, u32),
    __5: (u32, u16, u32),
    __6: (u32, Block, u32),
    __7: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __7.2;
    let __temp0 = __action1524(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action721(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1533<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Attribute>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ProcedureName, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action1525(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action721(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1534<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, alloc::vec::Vec<Attribute>, u32),
    __1: (u32, Token<'input>, u32),
    __2: (u32, Token<'input>, u32),
    __3: (u32, ProcedureName, u32),
    __4: (u32, Block, u32),
    __5: (u32, Token<'input>, u32),
) -> Result<Form,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __1.0;
    let __end0 = __5.2;
    let __temp0 = __action1526(
        source_file,
        interned,
        _marker,
        __1,
        __2,
        __3,
        __4,
        __5,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    __action721(
        source_file,
        interned,
        _marker,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1535<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> Result<ProcedureName,__lalrpop_util::ParseError<u32,Token<'input>,ParsingError>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action635(
        source_file,
        interned,
        _marker,
        __0,
    )?;
    let __temp0 = (__start0, __temp0, __end0);
    Ok(__action229(
        source_file,
        interned,
        _marker,
        __temp0,
    ))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1536<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> MetaExpr
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1061(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1537<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> MetaExpr
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1062(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1538<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> ConstantExpr
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1061(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action639(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action1539<
    'input,
>(
    source_file: &Arc<SourceFile>,
    interned: &mut BTreeSet<Arc<str>>,
    _marker: PhantomData<&'input str>,
    __0: (u32, &'input str, u32),
) -> ConstantExpr
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action1062(
        source_file,
        interned,
        _marker,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action639(
        source_file,
        interned,
        _marker,
        __temp0,
    )
}

#[allow(clippy::type_complexity, dead_code)]
pub trait __ToTriple<'input, >
{
    fn to_triple(self) -> Result<(u32,Token<'input>,u32), __lalrpop_util::ParseError<u32, Token<'input>, ParsingError>>;
}

impl<'input, > __ToTriple<'input, > for (u32, Token<'input>, u32)
{
    fn to_triple(self) -> Result<(u32,Token<'input>,u32), __lalrpop_util::ParseError<u32, Token<'input>, ParsingError>> {
        Ok(self)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(u32, Token<'input>, u32), ParsingError>
{
    fn to_triple(self) -> Result<(u32,Token<'input>,u32), __lalrpop_util::ParseError<u32, Token<'input>, ParsingError>> {
        self.map_err(|error| __lalrpop_util::ParseError::User { error })
    }
}
